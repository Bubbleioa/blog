<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>《瓦尔哈拉聊天室》——年终Project Rush开发报告</title>
    <link href="/2021/01/09/%E3%80%8A%E7%93%A6%E5%B0%94%E5%93%88%E6%8B%89%E8%81%8A%E5%A4%A9%E5%AE%A4%E3%80%8B%E2%80%94%E2%80%94%E5%B9%B4%E7%BB%88Project%20Rush%E5%BC%80%E5%8F%91%E6%8A%A5%E5%91%8A/"/>
    <url>/2021/01/09/%E3%80%8A%E7%93%A6%E5%B0%94%E5%93%88%E6%8B%89%E8%81%8A%E5%A4%A9%E5%AE%A4%E3%80%8B%E2%80%94%E2%80%94%E5%B9%B4%E7%BB%88Project%20Rush%E5%BC%80%E5%8F%91%E6%8A%A5%E5%91%8A/</url>
    
    <content type="html"><![CDATA[<h1 id="大纲"><a href="#大纲" class="headerlink" title="大纲"></a>大纲</h1><p>终于完成了，这个Project！<br>首先先简介下这个Project吧，这是一个由Unity驱动的文字冒险游戏小项目，目的是给10位朋友送上不同的新年祝福。<br>截止至目前还有1人没玩过orz</p><p>这里通过我的<code>TODO LIST</code>来介绍下整个Project的开发过程和思路吧。</p><ol><li>打字机效果</li><li>同时支持富文本</li><li>第二次按下提前结束打字机</li><li>打字音效</li><li>BGM</li><li>提供选项</li><li>对话分支</li><li>滚轮上滑打开历史消息</li><li>CTRL加速</li><li>读取和保存</li><li>实现文本云存储</li><li>开始菜单制作</li><li>自定义设置音量</li><li>人物表情动画系统</li><li>上传用户选项</li><li>结尾谢幕</li><li>留言板</li></ol><p>我是完全没有Unity/C#基础，做之前只看过M_Studio的10集小狐狸的课程，但是并没有涉及UI层的知识，但是……我这个Project全程都是在UI层实现的，所以还是没基础（<br>所以大部分操作实现起来很幼稚还望见谅。</p><h1 id="大体框架"><a href="#大体框架" class="headerlink" title="大体框架"></a>大体框架</h1><h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><h2 id="1-打字机效果"><a href="#1-打字机效果" class="headerlink" title="1.打字机效果"></a>1.打字机效果</h2>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>小丑竟是我自己——2020年度总结</title>
    <link href="/2021/01/09/%E5%B0%8F%E4%B8%91%E7%AB%9F%E6%98%AF%E6%88%91%E8%87%AA%E5%B7%B1%E2%80%94%E2%80%942020%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/"/>
    <url>/2021/01/09/%E5%B0%8F%E4%B8%91%E7%AB%9F%E6%98%AF%E6%88%91%E8%87%AA%E5%B7%B1%E2%80%94%E2%80%942020%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<p>2021年都已经到来9天了，我终于打算写这个年度总结了，主要是南方太冷冻得手受不了。</p><p>正如标题所说，非得用一句话总结我的2020年，那可能就是“小丑竟是我自己”吧。</p><p>当然不是这句话得原意，而是字面意思。小丑总是滑稽可笑的，纵观这一年，除了外部的大环境，我本人的整个经历也是十分滑稽可笑。虽然本意并不是想要哭丧，但是咱也不能因为我现在的心情去掩盖掉当时的状况吧。</p><p>上半年就是一个字“逃”</p><p>首先就是开幕雷击的疫情+网课，这里其实我完成的是真不怎么样。有人说“你们网络直播班平时就是网课，疫情期间会有优势吧”，确实有，网课质量很高，也更适应这种模式。但是缺乏监管……我曾经有想过针对全班的解决方案，比如说钉钉啥的，腾讯会议啥的，强制开摄像头查看学习情况。但是最后还是逃避了这份责任。</p><p>回到学校之后也是很讨厌班上的某几个人，自己也就这样浑浑噩噩过完了高中最后几个月，高考比模拟考排名翻了3倍。其实我高考那两天状态挺好的，可能是吃了数学的亏吧……</p><p>不过我还是没有选择复读，我这个年纪本来就偏大了，再等一年耗不起，自己家里还有妹妹要上学。外公外婆尚且健康，就算是这样，家里除去不动产（也就3线城市两套房）已经是负债状态了。虽不算贫穷，但这个状态也称不上健康，稍微有点意外，可能就要卖房子。可能还有一个原因就是网上贩卖焦虑的太多，自己也被这些焦虑催着走吧。</p><p>高考完了，那所大学只看计算机的话，还是挺不错的归宿。但问题就是，我被分到土木。当时的我还没有意识到这个问题的严重性，大一确实没有什么重要的专业课不假，可后来无论是CPC的组队，还是计算机学习的各种方面的同学朋友（本校），都没有我。当然大学里还经历了种种事情，就不一一说了，总之就是非常小丑。</p><p>坏的东西都说完了，说点其他的吧。</p><p>玩过的游戏，看过的番、小说、书籍都变多了，其中也有许多非常喜欢的作品。</p><p>新年对自己提几点要求：</p><ol><li>健康的生活：很多时候，每到深夜，内心中的黑暗都会占据我的大脑，然后开始疯狂自闭，当然除了睡眠，饮食和锻炼也不能少。</li><li>减少社交依赖：这个意思是多关注我自己，回到我初中那种即使是一个人也能开心的状态，社交虽然有时候令人开心，但是那是建立在健康的自己上的，我现在太深陷社交只会伤害别人，伤害自己。</li><li>不再咕咕：自己定的目标、计划认真完成。能够完成自己定下的目标，就能增长自信，从而走出阴影，也能重回健康的自己吧。</li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>优秀的“宜居星球”——简评《异化之恶》</title>
    <link href="/2020/11/21/%E4%BC%98%E7%A7%80%E7%9A%84%E2%80%9C%E5%AE%9C%E5%B1%85%E6%98%9F%E7%90%83%E2%80%9D%E2%80%94%E2%80%94%E7%AE%80%E8%AF%84%E3%80%8A%E5%BC%82%E5%8C%96%E4%B9%8B%E6%81%B6%E3%80%8B/"/>
    <url>/2020/11/21/%E4%BC%98%E7%A7%80%E7%9A%84%E2%80%9C%E5%AE%9C%E5%B1%85%E6%98%9F%E7%90%83%E2%80%9D%E2%80%94%E2%80%94%E7%AE%80%E8%AF%84%E3%80%8A%E5%BC%82%E5%8C%96%E4%B9%8B%E6%81%B6%E3%80%8B/</url>
    
    <content type="html"><![CDATA[<p>人类是从什么时候开始寻找除了地球之外，适合人类居住的行星呢？或许在殖民朝泛滥的时候，就有野心勃勃的人不满足地球上的七大洲，继而窥伺到地球之外。但随着地球环境压力不断增大，或者是满足人类征服地外行星的野心，就连最寻常的普通人，也开始觊觎地球之外的宜居星球。当然，还有一种心理，就是如果发现了这种可能，人们就会振臂高呼，肆意大胆地破坏地球，蹂躏我们的“母亲”。</p><p>开普勒452b就是这样一颗行星，它距离地球1402光年，游戏中的疗养院也使用着这个名字，院长把希望寄予这个疗养院，希望它能成为异化者的“开普勒452b”，我们能在BE同化之恶中理解他的想法。</p><p>且不论他的做法是否合适，但这无疑是十分理想主义的想法，正常者与异化者之间的壁垒无法逾越，正如1402光年的距离对于人类来说过于遥远。于是我们的卡莉娜（本体）想要将所有人转化成异化者，让这个世界成为异化者的国度。</p><p><img src="http://bubbleioa.top/wp-content/uploads/2020/11/2020-11-21.png"></p><p>本作品非常难能可贵的一点是，作者通过它展示了作者本人希望所有人都幸福，都能够被温柔以待的想法，可依然选择了将现实展现给玩家，让玩家自行体会其中的矛盾与不可调和的感觉。可以说，每个内心温柔善良的人，在接触了社会的阴暗面之后，都会有这样的感觉，这类人往往会陷入对现状无法改变的苦恼，但依然会从行动与言语上尽量让周围的人温暖。</p><blockquote><p>不同立场的人肯定有不同的看法，不过同样立场的不同的人，也会有不同的看法。</p><p>有些人心怀善意，有人则不一样。</p><p>一定会的，她有爱她的人在身边。</p><p>——莫迪</p></blockquote><p>在通关之后的特典里，作者大大也说出了她的看法：</p><blockquote><p>至少在我们现在的世界里，大家可以完全选择更加包容的做法，尽可能地和谐共处而不仅仅是对立~！</p><p>所以，可以更积极地去理解这个游戏想要传达地含义吧！</p><p>——OvO</p></blockquote><p>以上就是关于我对剧情方面的理解啦，整个流程也很快，我有些地方卡关了也才花2个小时，接下来从游戏的其他角度粗略评价下吧！</p><p>首先从美术和音乐来说，真的非常不错。</p><p>美术包含了卡通风格的动画、人物立绘和UI，还有像素风格的游戏场景和cg。这样子的组合能够保证精美的同时节省工作量（像素部分），有一个可以提升的点就是游戏场景可以多做些像素动画（就是不知道引擎支不支持还有工作量估计会增加）。</p><p>音乐部分真的给我惊艳到了，从一楼的温馨到二楼的活力，三楼的不安到4楼的诡异。而且对于这个流程而言配乐数目很多，让我每次剧情推进都是新的体验。可以说这作给我带来的沉浸感，很大一部分来源于配乐的优秀。</p><p>游戏设计可能是整个游戏中<strong>相比其他部分而言</strong>最差的部分了。解密设置很幼稚加上地图的迷惑性导致了有很多时间无意义地浪费了（也许有一部分原因确实是因为引擎要实现起来不好做），这一部分作者在特典里也特意道歉了www，不过不是什么大问题，我就原谅你吧（你自己得意什么啊喂）。</p><p>最后说点吐槽的部分：</p><ol><li><p>8数码（也就是拼图）那里卡我好久，我也是老丈育了233</p></li><li><p>特典真的好棒！好喜欢这里的大家。</p><p><img src="http://bubbleioa.top/wp-content/uploads/2020/11/2020-11-21-16.png"></p></li><li><p>玩到这里的时候，心里想：拜托啦，另一个我！</p><p><img src="http://bubbleioa.top/wp-content/uploads/2020/11/2020-11-21-6.png"></p></li><li><p>这张同人好像小鸟游六花啊（</p><p><img src="http://bubbleioa.top/wp-content/uploads/2020/11/2020-11-21-9.png"></p></li><li><p>TE的结尾之后那是卡莉娜在打破第四面墙吗？有点没看懂</p></li></ol><p>总而言之是一部优秀的作品，也期待作者的新作。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>在同一个世界站起来了，也会站在同一个未来</title>
    <link href="/2020/11/19/%E5%9C%A8%E5%90%8C%E4%B8%80%E4%B8%AA%E4%B8%96%E7%95%8C%E7%AB%99%E8%B5%B7%E6%9D%A5%E4%BA%86%EF%BC%8C%E4%B9%9F%E4%BC%9A%E7%AB%99%E5%9C%A8%E5%90%8C%E4%B8%80%E4%B8%AA%E6%9C%AA%E6%9D%A5/"/>
    <url>/2020/11/19/%E5%9C%A8%E5%90%8C%E4%B8%80%E4%B8%AA%E4%B8%96%E7%95%8C%E7%AB%99%E8%B5%B7%E6%9D%A5%E4%BA%86%EF%BC%8C%E4%B9%9F%E4%BC%9A%E7%AB%99%E5%9C%A8%E5%90%8C%E4%B8%80%E4%B8%AA%E6%9C%AA%E6%9D%A5/</url>
    
    <content type="html"><![CDATA[<p>近闻我们学校终于有专属的信息学竞赛场地了，这可是百年之未有大变局啊！（</p><p>学弟学妹们好，我是你们2020届信息学竞赛学长，冒泡ioa(blog:<a href="http://bubbleioa.top/">bubbleioa.top</a>)</p><p>我的大学其实没什么好讲的，唯一可说的就是前几届CCPC决赛拿了前40名吧，如今我被调剂到土木专业（不过和计算机院的院长谈过了，大一还是修完计算机的课，CPC也可以正常参加，大二就可转过去）</p><p>作为本届最弱省一，我也只有经验丰富可以说了orz，接下来介绍的内容可能对于新生有些云里雾里，学弟学妹们可以先在<a href="https://oi-wiki.org/">OI Wiki</a>上阅读完信息学竞赛介绍部分。</p><p>首先要说的是，信息学竞赛只是计算机科学里面的冰山一角，就我接触的OIer来说，大学里有以下几个方向：</p><ol><li><p>CTF：这方面是往网络安全方向发展，含金量比较高，市场需求也大（详见：<a href="https://ctf-wiki.github.io/ctf-wiki/">CTF wiki</a>）</p></li><li><p>CPC(即ICPC和CCPC)：这是最接近OI的发展方向，虽然赛制不同，但是也是比拼算法设计的。</p></li><li><p>全栈：字面意思，全方位发展，总是是个很头秃的方向（我有一个学长现在就开始研究Linux源码了）</p></li><li><p>人工智能：略</p></li><li><p>计算机图形学：这个方向国内不多，在APIO2019上有一位首都师范大学附中的高二同学展示了他用OpenGL写的一个渲染器，这方向面向影视和游戏方向比较多。</p><p>还有4、5项融合起来的方向，你们看到的什么ai换脸，超分辨率（英伟达的DLSS），光线追踪，都是基于这些方向的研究。</p></li></ol><p><img src="http://bubbleioa.top/wp-content/uploads/2020/11/IMG_20190519_084700.jpg"></p><p>事实上，高中的生活非常精彩（虽然我在高中的时候并没有那么认为），生活充实，好友成群，我在退役的时候写了一篇博客，即使是拿到现在来看，我依然是这么想的：</p><blockquote><p>在这段学习OI的日子里，由最初的认识到OI可以保送的光鲜外表，再到后来慢慢了解到她的真实、她的的残酷，喜欢的心情从未减少。<br>如果再给我一次选择的机会，我还是会选择接触OI，多亏了OI，让我的黑白的高中生活多了些斑斓的色彩。</p></blockquote><p>同样这样想的还有你们的林政学长：</p><blockquote><p>我知道我还是喜欢信息学的，就算它虐我千百遍，我依旧喜欢。</p><p>oi梦就像一颗休眠的种子，埋在我的心里。</p></blockquote><p>所有OIer都做着同一个梦。如成都七中的徐西岭所著<a href="https://zhuanlan.zhihu.com/p/117660874">《整形溢出：信息学竞赛的发展，繁荣与衰退》</a>，用着真诚关切的态度审视了信息学竞赛近年来的发展。还有同样是成都七中的<a href="https://mcfx.us/category/remmmmm/">mcfx</a>，完成了B站AV号与BV号互相转化的<a href="https://www.zhihu.com/question/381784377/answer/1099438784">全网首杀</a>。</p><p>这个梦甚至不局限于OIer，它属于全体竞赛生。南昌一中的天文社（放课后的昴宿星团），在2016年复出后，他们自发地参加CNAO，并且由于学习资料有限，19届社长还为他们社团编写了自己的教材《星空的秩序》（出于）</p><p>至于大学生活，其实刚上几个月课的我还没办法好好总结，不过可以肯定的是，你们将面临非常多的选择，会有很多困惑。苦恼会像洪水般涌来，孤独与无法被理解的心情会爬上心头。但是这不是个例，而且不算是坏事，届时你们将直面自己的内心，正如鲁迅先生在仙台一样，周围人的恶意，自己的孤立，若非怀有一颗赤诚之心，大多数人在大学的成长其实是不如高中的。（比如你们某个学长现在恋爱的苦恼中，哈哈哈）</p><p>而值得庆幸的是，高中参加过竞赛的同学们普遍都有着这种赤诚之心，这是一种对追逐星星的同伴们的惺惺相惜，这是一种能让你alone但是并不lonely的精神，而这种精神在大学的学习中将起到至关重要的作用。我尽管不是奥赛班的学生，但是毕业之后我联系最紧密的伙伴确实一块儿竞赛的伙伴们，希望学弟学妹们也要抱着成为终生益友的心态来交往，这是学OI获得的一生的财富。</p><blockquote><p>The home’s behind, the world’s ahead.</p><p>家乡已在身后，世界就在眼前。</p><p>——《霍比特人》</p><p>“在同一个世界 站起来了”</p><p>“也会站在同一个未来”</p><p>——《Euphoria》第30届IOI国际信息学奥林匹克主题曲</p></blockquote><p>最后选一张图片作为结尾吧，我就选我OI的终点——也是我新的起点，APIO2019的比赛场地的照片。希望学弟学妹们又能够在这场比赛拿奖的呀</p><p><img src="http://bubbleioa.top/wp-content/uploads/2020/11/IMG_20190516_142910.jpg"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>不可解的我的一切</title>
    <link href="/2020/11/15/%E4%B8%8D%E5%8F%AF%E8%A7%A3%E7%9A%84%E6%88%91%E7%9A%84%E4%B8%80%E5%88%87/"/>
    <url>/2020/11/15/%E4%B8%8D%E5%8F%AF%E8%A7%A3%E7%9A%84%E6%88%91%E7%9A%84%E4%B8%80%E5%88%87/</url>
    
    <content type="html"><![CDATA[<p>这标题不是那本伪娘漫画啦！</p><p>而是：</p><p>我失恋了。（单恋）</p><p>很抱歉一上来就开幕雷击，这个抱歉是对多年后看到这篇文章的自己说的，万一你到时候还是单身会不会被气到呢233</p><p>不过，情感方面的东西一向不是我擅长的，所以就让我做一个标题党吧，把你们骗进来然后自说自话。</p><p>为了方便称呼就叫她惠酱吧（虽然好像这个化名和她完全不着边际）</p><blockquote><p>“少女漫画或情歌中的歌词，是那么璀璨耀眼。就算不查字典，也能看懂意思。可却无法属于我。”</p><p>——《终将成为你》</p></blockquote><p>在开始这段单恋之前，我也是这么想的（恰好也是惠酱拒绝我所提到的）</p><p>不，也许并不是，我只是单纯地认为单身是一件“高贵”的事情，总之就是嫌麻烦……</p><p>和她是在高中的一个魔法结社里认识的，我们都是那里的社员，每天研究着某些神秘的魔法回路。</p><blockquote><p> 抱歉我只能这么比喻了，要不然会被stk（其实只是想这样皮一下</p></blockquote><p>我那段时光可是开心得不得了啊！每天都可以研究魔法回路！欸，你问惠酱呢？她当时在我眼里只是一个普通的学习魔法的伙伴，虽然之后了解到我们的魔法相性挺好的，不过也就这样，没有过太多深入交流。要说为啥的话，魔法真的塔诺西！</p><p>后来结束了魔法学习，高考，毕业，各奔东西，完全没有在意惠酱。有人会问：那这么<strong>短时间</strong>你就在网上喜欢上她了？我今天在写这个博客之前也仔细想过，先埋个<strong>刀子</strong>（当然是刀我自己的）</p><p>上了大学之后当然就是按照我的规划来，站稳脚跟，去实现我的理想，弥补我中学因学业未能完成的List的缺憾。首先的肯定就是转专业，但是转专业这件事上导员说的很含糊，是学分还是成绩还是综评前15%？我不知道，虽然说“努力就可转专业了”，但这个过于飘渺，直接导致我大学一开始就是不安的。其次呢，找到一个组织，院团委和学生会二选一，我选了团委，但是意外地没啥事，也没有存在感；社团，动漫社就是打桌游，吉他社也没觉得要培养新人的样子，游戏社居然是一个新社而且社长是个大二的非计算机专业的学长，而且用的还是垃圾抄袭换皮工具<code>&quot;Reworld&quot;</code>，告辞！当时还和社长对线，并不能改变他的想法。所以呢，事实上我没有加入<strong>任何</strong>社团。原先学OI的朋友或者为了ACM，或者为了ctf都在努力地卷，连没有学OI的同学也开始学习语言学习算法，这种想法在我上化学和画法几何的时候尤为强烈。</p><ul><li>“我在这里到底在干什么啊！”</li><li>“不行，认真学习”</li><li>“万一转不了专业怎么办”</li><li>“啊……这里没听懂，万一就差这个分转专业怎么办？”</li></ul><p>无限地陷入这种思想的深渊，压抑到无法呼吸。要我说，这就是我的破防状态。</p><blockquote><p>谁来……救救我……</p></blockquote><p>当时心里真的有这种想法，虽然我知道这不可能，但是心中还是无限次地祈祷，奇迹能够发生，我能有一个光明且清楚的出路。</p><p>在9月初的时候惠酱因为一些事情渐渐和我有了联系，内容从服务器到python到动漫到游戏到日常……</p><p>这个时候怎么说呢，就对她产生了一种<strong>依赖感</strong>吧，每天最开心的就是和她聊天的时候，于是就告白了。当然这不是说喜欢的这份感情是假的，但是这种夹杂着依赖的感情的喜欢是<strong>不纯粹</strong>的（或者换句话说，是自私的）</p><p>我只想着自己这边怎么怎么样，从情书的内容都看得出来，全程装成很理性的样子，说什么结果无所谓，自己做好了准备。确实，我的确做好了失败的准备，但是是争对自己的，我没有考虑惠酱的想法，就这么直球了过去，真的是……自私……</p><p>（中间还省略了变得疏远的过程，就不展开说了）于是乎关系就变得疏远起来，这一周，我都不知道怎么就过去了orz，总之在关系到冰点的时候，我申请了学习的心理咨询。</p><p>结果没想到在咨询前的一个上午我自己解决了问题（至少是一部分），当然不是说剧情突然翻转，然后就GE了。要是我是主角的话，ATRI的那部分ATRI黑化后估计就是BE。那个上午解决的问题是转专业的问题，之前导员说的转专业策略只是学校的，而具体每个专业都有每个专业的文件（我不知道，他也没说），我在学校的教务系统翻到了去年CS的文件，好像我只要<strong>不留级就能转</strong>？！之后的心理辅导就是去和辅导老师唠嗑……</p><p>要是没有这个转机我现在估计已经坏掉了吧233，但是内心依然不轻松。</p><blockquote><p>如果没告白的话，该多好</p></blockquote><p>不止一次这样想，现在这在这样想……而且这种想法似乎追溯到高中，甚至开始想要是我高中怎么怎么样，就好了……</p><p>其实想法真的很多，可能是写出来的10到20倍之多吧，就是无法化为语言。</p><blockquote><p>“喜欢”是具有暴力性的字眼。——《终将成为你》</p></blockquote><p>我确实感受到了。</p><p>如果我是个诗人，我现在可以作诗抒怀；如果我是个歌手，我现在可以放声高歌；如果我是个酒鬼，我现在可以借酒消愁；如果我是个花花公子，我现在可以移情别恋 。但是我现在只能一遍遍将伤口加深刻在心中……不过这也是一种<strong>自我陶醉</strong>吧，通过<strong>惩罚</strong>自己来获得<strong>救赎</strong>。</p><p>今天去烫了个发，这个消费对于我这个双十一只买了一本书的老宅男来说简直冲动，据说2个多月头发就会长成不得不剃的长度。</p><p>最近也比较忙……下周周日数学期中考试，12.12英语4级，英语4级完了就是英语演讲轮到我，放假提早到1.5，期末也提早，所以后两周的课又要放到前面来上……转专业定了下来其实我的学业就稳了，即使心情低落应该我也能调整过来。</p><p>说实话这个寒假我真的想和她和好，但是她会接受吗？就算接受了，我对她又会是怎么看？她对我又怎么看？我会不会还是喜欢着她但是她对我还是没想法结果又重蹈覆辙？？啊啊啊好烦好烦！学习上的问题我可以问厉害的学长，老师；计算机上的问题可以goodle，大部分时候也很好解决，唯独这方面我是真的不知道怎么办QAQ，真的是“<em>不可解的我的一切</em>”啊</p><p>11月17日更新<br>从她朋友的口中得知她可能已经有<strong>喜欢的人</strong>了，是<strong>XX大学</strong>的，只不过还没开始追……<br>这个人好像之前在聊天中有点印象？其实知道了这一点的我释怀了很多，心情有点像暴风雨之前的宁静吧。<br><img src="http://bubbleioa.top/wp-content/uploads/2020/11/IMG_20201116_001256.jpg"><br>然后那天晚上我哭了，哭得很凶，大概是有生以来除了肢体受伤而哭得最厉害的一次…<br>第二天早上向她道了歉，希望和好，她同意了。去找了计算机学院的院长，开始打CPC了。不得不说程序设计竞赛真的塔诺西，找回了高中的感觉，我又恋爱了（<br>但是，晚上才发现，有经验的大佬们已经抱团组队了，只剩下我一个独狼。这种情况铁定拿不了校内第一名……心情又低落下来，真就正弦函数呗。<br>然后今天（凌晨也算今天吧233），她开通了匿名提问箱，本来我也没在意，没想到这个提问箱居然进化到匿名社交的程度了，我在她的关注里找到了一位“猫猫”，在看过他的简介和提问箱之后我确定了，他就是<strong>XX大学</strong>的，她朋友口中她喜欢的人。</p><p>然后我也不知道为啥我就跟他开聊了，感觉告白之后，又是找咱们院院长，又是计算机院院长，又是找CPC大佬，又找这位陌生人……已经没有什么好怕的了呢.jpg</p><p>打完招呼之后他的回答让我吓一跳，原来这个账号也是惠酱注册的吗？还好我还没暴露身份233（虽然确实不是她注册的。</p><p>虽然没有深入交流，但从目前可公开的情报来看，确实是一位十分优秀的人，平心而论，无论从哪方面讲，都比我更适合她。原先看《中二病》的时候就十分同情七宫，没想到时隔多年自己变成了七宫233</p><p>这样，这一切就已经结束了吧……变量少了一个，关于我的不可解的方程，应该也会更好解一些了吧</p><hr>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>为什么我没有女朋友？</title>
    <link href="/2020/11/14/%E4%B8%BA%E4%BB%80%E4%B9%88%E6%88%91%E6%B2%A1%E6%9C%89%E5%A5%B3%E6%9C%8B%E5%8F%8B%EF%BC%9F/"/>
    <url>/2020/11/14/%E4%B8%BA%E4%BB%80%E4%B9%88%E6%88%91%E6%B2%A1%E6%9C%89%E5%A5%B3%E6%9C%8B%E5%8F%8B%EF%BC%9F/</url>
    
    <content type="html"><![CDATA[<p><img src="http://bubbleioa.top/wp-content/uploads/2020/11/QQ%E6%88%AA%E5%9B%BE20201114113613.png"><br>每周一酸(1/1)</p><p>NASA结尾的操作十分精彩，学不来……但是有段话令我在意：</p><blockquote></blockquote><p>运气好，不是指我得救了……而是说我遇到了她，这可是0.00000034%。<br>有一个叫做德雷克公式的，如同妄想一样的公式。这虽然是用于集算宇宙有多少外星生命的方程式，但是有人把它运用了计算与命中注定的人相遇的几率上，那个几率是0.0000034%。<br>虽然实际上那个方程式没什么说服力，所以算出来的也不一定就是正确的数字，但我觉得，没准，还挺准确的。<br>只是感觉我找到了，出生之前就在寻找的东西”</p><p>（纠正下这个公式不是计算多少外星生命，而是计算多少有多少可交流的外星文明）</p><p>在银河系中随便选一个恒星系 能找到的概率是<code>0.00000003%</code>（没错 上面的概率也才是这个的100倍左右233）</p><p>但是这个概率是怎么来的呢？？</p><p>这个概率最早是在一篇名为”Why I don’t have girlfriend”的paper里面提到的，作者通过计算得出，在伦敦的夜晚出去逛，如果</p><ol><li><p>1/20的女性觉得我有吸引力</p></li><li><p>一般的女性单身</p></li><li><p>我能和1/10的女性相处融洽</p></li><li><p>合适的年龄范围</p></li></ol><p>在以上这些限制下，找到那个特殊的人的概率是<code>0.00000034%</code></p><p>当然 这只适合伦敦，剧中NASA肯定不是这个概率啦，而且这个概率就是图一乐，作者在文章里写的都是他的择偶标准，这里把他怎么计算到的说下（事实上可能更低</p><p>$ G=R×F_w×F_L×F_A×F_U×F_B×L $ </p><p>$ G$ =潜在的女友数</p><p>$R$ =本国人口增长(60,975,000)</p><p>$F_w$ =女性比例(0.51)</p><p>$F_L$ =生活在你城市的女性(0.13)</p><p>$F_A$ =年龄范围合适(0.2)</p><p>$F_U$ =年龄范围合适中有大学文凭的(0.26)</p><p>$F_B$ =年龄范围合适中有大学文凭的好看的(0.05)</p><p>$L$ =花多少年 (31，31岁单身，惨 作者 惨)</p><p>作者得到的<code>G=10,510</code>（不乘L的结果）然后后面就是一通乱算算出来的<code>0.00000034%</code>，看完之后又想笑，又想哭，不如就笑哭吧</p><p>paper链接：<a href="https://www.speedmagazine.ph/wp-content/uploads/2018/02/why_i_dont_have_a_girlfriend.pdf">https://www.speedmagazine.ph/wp-content/uploads/2018/02/why_i_dont_have_a_girlfriend.pdf</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>你好！我们又见面了呢~</title>
    <link href="/2020/10/18/%E4%BD%A0%E5%A5%BD%EF%BC%81%E6%88%91%E4%BB%AC%E5%8F%88%E8%A7%81%E9%9D%A2%E4%BA%86%E5%91%A2~/"/>
    <url>/2020/10/18/%E4%BD%A0%E5%A5%BD%EF%BC%81%E6%88%91%E4%BB%AC%E5%8F%88%E8%A7%81%E9%9D%A2%E4%BA%86%E5%91%A2~/</url>
    
    <content type="html"><![CDATA[<p>很久很久很久没更新博客了，不知道诸位有没有想我呢ww，还是面对这突然的更新心理想：“这谁啊！”</p><p>这次的文章想写成类似于一本书的后记的形式呢，我的人生的前半部分已然结束，在看这篇文章的诸位在之前或多或少介入过我的生活，所以作为我人生前半部分的读者，看到这样一篇后记，也才算是真正读完这本书。（其实就是想过把瘾）</p><p>但是直接刻板地去对书的内容做一个总结感想实在不是后记的形式，事实上，大部分书的后记都是说些有的没的和书无关的内容然后感谢一波和读者没啥关系的人呢。我正在读的一部轻小说的作者每次后记都要说自己的猫怎么怎么样，还说自己的猫会说：“饭（日语）”呢，怎么想都不可能吧，真的是一位病入膏肓的猫痴啊XD</p><p>不过说到书的后记，其实还有一部分内容是汇报自己新作的开展情况吧，正好大学生活已经开始一周了，是时候谈谈高中毕业后到大学这段时间的事情了。</p><p>金钱的重要性，在毕业之后愈发凸显。在师傅的介绍下，我在本地的一个教育培训机构开始了助教兼职。</p><p><img src="http://bubbleioa.top/wp-content/uploads/2020/10/IMG_20200815_095227-%E5%89%AF%E6%9C%AC.jpg" alt="" /></p><blockquote><p>刚刚忘记保存，丢了一半多的进度orz</p></blockquote><p>工作了16天，拿了1300+，算成时薪的话大概有18元，工作强度不大，还算是不错的工作……如果没有小学生的话。</p><p>我带了两个班，一个是初中生的，一个是小学生的。初中生的班级还行，小学生班上一个比一个皮，有几个男孩子上课吵个不停，还满口黄段子，简直让我心力憔悴……</p><p>不过呢，这也让我想起了我的小学，不也是这么过来的吗？我的邻居当时还被我们封上“变态淫魔”的“无上称号”，现在不也到了五道口某所大学上学去了。还有就是记得4年级以前，有一位喜欢摸别人生殖器的宋姓同学，简直是一生噩梦。</p><p>在这个暑假期间呢，我还向初中喜欢的女生“告白”了。之所以打上引号，是因为大多数的人告白都是为了发展成恋人关系，结婚生子，白头偕老吧（虽然有人只是想玩玩）虽然我们在同一所高中，但是这三年来也没怎么见过，而且我也知道我们之后并不会走到一块去。不过我仍然打算把这份“喜欢”的心情传达出去，处在一个缺少爱的环境中，尤为知道被爱的幸福。</p><p>兼职完之后，各个同学的升学宴就接踵而至。期间也没发生什么有意思的事情，我在我的升学宴上放了miku的舞蹈，十分满足o(<em>￣︶￣</em>)o</p><p>让我们直接快进到出发吧，中间我在为<a href="https://yuyuko.cc/">@kino</a>做一份礼物，但是还没做完就要出发了，为了保持神秘感就不发图片了XD</p><p><img src="http://bubbleioa.top/wp-content/uploads/2020/10/IMG_20201005_141400-副本.jpg" alt="" /></p><p>家人提前6小时把我通过高速送到昌北，然后快登机的时候肚子饿了 还被机场狠狠宰了一波。第一次坐飞机的体验还是挺好的（指在飞机上，上飞机前和下飞机后够呛）没有身体不适。<img src="http://bubbleioa.top/wp-content/uploads/2020/10/IMG_20201005_175757-副本.jpg" alt="" /></p><p>晚上的飞机总是让人没有实感，从窗外看到的是云海，但是这云仿佛就是一张2D贴图，没有立体可言。其余的时间就是让人无法呼吸的黑暗，我方才意识到人类居住的地方原来是这么小，我们的未来会是驱散这无边黑暗的璀璨光芒吗？</p><p>失去信号的手机，要想知道位置就只能靠着自身的陀螺仪，结合缺德地图，识别的位置还是非常准的，但是高度就离谱，最高处甚至有6000m<img src="http://bubbleioa.top/wp-content/uploads/2020/10/IMG_20201005_204141_1-副本.jpg" alt="" /></p><p>哦对了，虽然是去哈尔滨，但是我选择在上海转机，到上海的时候已经接近10点，但这时候<a href="https://yuyuko.cc/">@kino</a>还是从学校来了上海浦东机场，于是开始了两人愉快的夜晚(✿◡‿◡)（指在星巴克打电动）<img src="http://bubbleioa.top/wp-content/uploads/2020/10/4e999a2b5af9d98d-副本.jpg" alt="" /><img src="http://bubbleioa.top/wp-content/uploads/2020/10/20201018210407.png" alt="" /></p><p>在kino回去之后，繁忙的浦东机场瞬时寂寥无声，24小时营业的星巴克成为了无数旅人歇脚的地方。在星巴克等待的时间里，我碰到了一队母子，通过交谈知道，他们是明天早上的飞机，但是地铁没有那么早，于是来这里通宵候机。他们在玩短视频，但是相机方向怎么都不对，我帮他们重启了手机，解决了。凌晨，我在便利店随便吃了点夜宵，发现这里的消费甚至比昌北低。整个机场里到处都是疲惫的旅人，无论是坐着的，躺着的，还是像我一样乱逛的……</p><p><img src="http://bubbleioa.top/wp-content/uploads/2020/10/IMG_20201005_213213-副本.jpg" alt="" /></p><center>我待的星巴克，拍摄于kino来之前</center><p>那对母子也在躺着的人群中，不过他们躺在了机组职员通道。“这么晚应该不会有航班了吧，应该没事”我是这么想的。但是事实不是如此，大概在凌晨2点，一队洋人走了过来，我忽略了还有国际航班可能会在晚上有，领头的是一位穿着防护服的机场工作人员，他们果不其然遇到了这对母子，不过防护服并没有将他们叫醒，而是把通道的围栏（可移动）向外移动，领队绕过。在机场里休息的人们数不胜数，他们不是要饭的，也不是没钱，但是对机场的治安充满信心。我在这样的氛围里也有几次坦然地离开座位上厕所，行李仍然放在原位。\终于到第二趟飞机登机的时候了，不得不说上海还真的大，本来我以为主楼已经够大了，结果没想到登机的时候还要我去卫星楼，而且是机场专供地铁，在卫星楼里也是走得我脚疼。<img src="http://bubbleioa.top/wp-content/uploads/2020/10/IMG_20201006_045810-副本.jpg" alt="" /><img src="http://bubbleioa.top/wp-content/uploads/2020/10/IMG_20201006_060620-副本.jpg" alt="" /><img src="http://bubbleioa.top/wp-content/uploads/2020/10/IMG_20201006_061224-副本.jpg" alt="" /></p><p>然后就是飞行！这次是白天，而且是大海，于是我激动地！睡着了……没办法，睡叫一晚上没睡了<img src="http://bubbleioa.top/wp-content/uploads/2020/10/IMG_20201006_071057-副本.jpg" alt="" /><img src="http://bubbleioa.top/wp-content/uploads/2020/10/IMG_20201006_082701-副本.jpg" alt="" />中间醒了一次，吃飞机餐，还可以，不止照片里的，还有水和面包。<img src="http://bubbleioa.top/wp-content/uploads/2020/10/IMG_20201006_082854-副本.jpg" alt="" />第一次看到这么大的平原，这种一望无际的感觉很棒<img src="http://bubbleioa.top/wp-content/uploads/2020/10/IMG_20201006_101127-副本.jpg" alt="" /></p><p>在开学前还在哈尔滨玩了会，不得不说这里饮食消费占比高，恩格尔系数肯定不低吧，而且也不和我口味。（学校稍微便宜点，但是更难吃了，大概是高中没改食堂和改了食堂取个平均值）</p><p>还和在哈尔滨的学姐玩了一下午，从中央大街到老道外再到江北，真的是逛了个遍233<img src="http://bubbleioa.top/wp-content/uploads/2020/10/IMG_20201007_195636-副本.jpg" alt="" /></p><p>之后就是报道了，然后就上了一周的课，马上又到第二周了啊！可恶<img src="http://bubbleioa.top/wp-content/uploads/2020/10/IMG_20201009_103503-副本.jpg" alt="" /><img src="http://bubbleioa.top/wp-content/uploads/2020/10/IMG_20201009_150045-副本.jpg" alt="" /><img src="http://bubbleioa.top/wp-content/uploads/2020/10/IMG_20201011_143723-副本.jpg" alt="" /></p><p>熟悉我的人都知道，我聊这么多现实的话题而且还配上实景图片简直不像我，我也这么觉得233，可能几次出去培训的时候有过这样的博文吧。所以现在就聊些网上的还有我个人的东西。</p><p>先是作品</p><p><strong>《信条》</strong>看完了诺兰的新作《信条》，打算写点什么来批判一番按照惯例欲扬先抑一波首先这个画面和音效没得说，十分顶尖，尤其是逆向和正向同时存在的场景，可以看得出来在开拍前做了大量的准备工作，无论是前期还是后期都是统筹一体一气呵成。但是这部电影给人的感觉很奇怪，我真的觉得是不是诺兰哪天突发奇想：“正放和倒放如果同时出现在一个画面里会不会很有趣？”然后他就立项拍这部电影了。怎么这么说呢？首先这是一部典型的“超级英雄”救人类的故事：超级英雄，反派，美人，队友牺牲，倒计时，天降援助………主角就差一个超能力就能进漫威宇宙了。这本来没什么错，但是放到这影片中就很奇怪。拉跨的正是本片的核心元素：科幻。就像之前诺兰的《盗梦空间》一样，本片给人的感觉就是，这是一部“硬科幻”，而不是传统超级英雄电影里面的“软科幻”。尤其是第一次看到逆向子弹的时候，我心中就已经确定它是一个“硬科幻”电影了。它“硬科幻”的第一个问题，就是解释不通。当然，就算是非常优秀的“硬科幻”作品，也会有别扭的地方，但是本片特别突出。比如说逆向转化只需要进一个离心机样的装置？未来人在哪？逆向转化转化时间就算了，咋出来的时候空间也变了？（指到了另一个房间）正向的火烧逆向的人会让人冻僵？那按道理来说正向的火温度不就要升高？然后温度升高导致逆向的人温度降低更快，岂不是套娃？类似的问题还有很多，但这还不是这部电影最主要问题 。它最主要的问题就是作为一部“硬科幻”，主题内涵太浅。随便举几个例子，《流浪地球》从头到尾都在努力淡化大义，而去强调人性。没有谁是真正意义上的英雄。这部影片里的每个人物，他们的每一步选择都不是为了大义，而是为了所爱之人。《火星救援》强调了科学主义、理性主义、乐观精神的重要性，还展现了人类的团结协作精神。而《信条》呢？可以说什么也没有，或者说和一般的超级英雄电影差不多，而且没有它们看得爽。就这点而言，已经足够让我对诺兰失望的了。</p><p><strong>《ATRI》</strong>今天把ATRI打通了，这才是真正的属于理科生的科幻浪漫啊！原先看种种作品留下的遗憾，都在这部作品中得到了补偿。看《信条》时，虽然很科幻，拯救全人类也很宏大，但是缺少人文关怀；看《天气之子》时，总想着拯救大家以及拯救自己喜欢的人全都要；看《刀剑神域》时，觉得将自己的意识同步在网上很酷，但是绝对不是用来NTR、恶心观众的幸福是什么？这个在无数作品里被讨论的问题，放在《ATRI》中，小小的机器人女孩回答是“幸福是未来”。然而这并不是一个很宏大的故事，至少在剧情的进展过程中，是以《知晓天空之蓝的人啊》中平淡的视角来展开。《知晓天空之蓝的人啊》中有一句话我特别喜欢：“井底之蛙，不知大海之宽广，却知晓天空之蓝”但是在《ATRI》的主角中，我却看到了遨游世界的青蛙，硬要说的话就是“知晓大海之宽广，却更爱天空之蓝”这种兼顾人文与科幻的视角，在西方作品中真的非常少见（也有可能是我阅历太浅），在这一个晚上的游戏流程中，我不断地反思自己的人格，去体会游戏中人物的心情，并且重新塑造我为人处世的方式。我随着人物，开始思考自己的理想，自己喜欢什么样的生活，想要成为一个怎样的人。正因有了人文关怀，《ATRI》才能做到这些。（还有就是因为我是“高性能”的嘛~）而它所给出的答案，就是属于咱专属的浪漫——在自己所爱的人，爱自己的人们的帮助下，去完成自己伟大理想的同时，好好守护住这一份小小的幸福（也许最后这两个分句可以稍微调换位置，不确定的原因是我现在还没有达成前两个分句的条件orz）这样的就很对我的电波。还有一点想说的就是关于剧情中的“离别”，有点《朝花夕誓》的味道了呢。所有的离别都是为了新的邂逅……还有再会那么 晚安Zzz…<img src="http://bubbleioa.top/wp-content/uploads/2020/10/atri.png" alt="" /></p><p><strong>《原神》</strong>好玩</p><p><strong>《革命曲途》</strong>演出棒，剧情拉跨</p><p><strong>《仰望半夜的月空》</strong>（正在看）<img src="http://bubbleioa.top/wp-content/uploads/2020/10/IMG_20201015_114701-副本.jpg" alt="" /></p><p>怎么说呢，上面的文字可以说道出了我现在的心声。没有进入计算机专业，其实这重要吗？我觉得不太重要，自己想学的东西还是能学。我现在迷茫的，是如何去抓住这个“未来”。想学Python/C/C++/Unity/Blender……但是呢，自己会的Ae、Pr也并不能做出些什么东西来，原先信誓旦旦地说想做PV/MAD结果打开Ae，啥灵感都没有，眼睁睁看着做MAD地一个个都结了婚😂真就做MAD喜路一条。</p><p>不过最近看了Warma的电台，熟悉了一周的校园，大概也知道自己之后该怎么办了吧，或者说，不该怎样。</p><p>从某种程度上来说，有这么多苦恼说不定是好事？咱这可能是青春的苦恼呢，爷青回！</p><p>再聊下本季度新番吧。</p><p><strong>No.1 《成神之日》</strong>麻枝准+P.A. Works YYDS最喜欢的笑点，最喜欢的OP/ED,舒适的画面，还有必将反转的剧情快进到打棒球</p><p><strong>No.2 《总之就是非常可爱》</strong>原作优秀，改编贫穷。《旋风管家》算是入宅作之一，作者玩梗能力贼强。我也不是不能理解先结婚再恋爱所带来的安全感+青涩感双重up的超级加成，简直是当代恋爱的最佳选择，当然这是理论上。且不论婚姻所带来的法律责任和社会压力（父母）是普通情侣难以接受的，再者还不一定能遇到对的人呢，有几个初恋走到白头的啊（希望我是其中之一😭）</p><p><strong>No.2 《魔女之旅》</strong>改编很棒，突出了女主的可爱。不过第三话这两个故事在原作中就很拉跨，一是没有对世界观进行详细阐释，二是没有对主角形象塑造有多大帮助，三是这两个故事寓意给人感觉知乎抖机灵样的，非常幼稚。</p><p>不过根据原作来看这样的篇幅不多，还是能期待后续的。</p><p><strong>No. 4《你与我最后的战场，亦或是世界起始的圣战》</strong>很尬就是了，我记得原作还不错的哇，算了就当吃个瓜吧。</p><p>点兔、樱与抱月还没看</p><p>另外在主页上还更新了python和日语的学习笔记，尽量每周4更，希望大家监督orz</p><p>那就到这吧，之后也会频繁更新的，总之我又回来了www</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>个人博客终于复活了！！！</title>
    <link href="/2020/07/19/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%BB%88%E4%BA%8E%E5%A4%8D%E6%B4%BB%E4%BA%86%EF%BC%81%EF%BC%81%EF%BC%81/"/>
    <url>/2020/07/19/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%BB%88%E4%BA%8E%E5%A4%8D%E6%B4%BB%E4%BA%86%EF%BC%81%EF%BC%81%EF%BC%81/</url>
    
    <content type="html"><![CDATA[<p>高中生涯终于落幕，爷的青春终于也结束了，感谢大家一路以来的陪伴，新的阶段，新的启航。<br>接下来这个博客可能就不是OI博客了，不过原先写的拙劣题解也会保留，暑假期间估计就是记录一下自己每天做的事然后偶尔发点作品评价之类的。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>【动画观察调色板#1】是什么使得《恋爱小行星》特别</title>
    <link href="/2020/03/28/%E3%80%90%E5%8A%A8%E7%94%BB%E8%A7%82%E5%AF%9F%E8%B0%83%E8%89%B2%E6%9D%BF#1%E3%80%91%E6%98%AF%E4%BB%80%E4%B9%88%E4%BD%BF%E5%BE%97%E3%80%8A%E6%81%8B%E7%88%B1%E5%B0%8F%E8%A1%8C%E6%98%9F%E3%80%8B%E7%89%B9%E5%88%AB/"/>
    <url>/2020/03/28/%E3%80%90%E5%8A%A8%E7%94%BB%E8%A7%82%E5%AF%9F%E8%B0%83%E8%89%B2%E6%9D%BF#1%E3%80%91%E6%98%AF%E4%BB%80%E4%B9%88%E4%BD%BF%E5%BE%97%E3%80%8A%E6%81%8B%E7%88%B1%E5%B0%8F%E8%A1%8C%E6%98%9F%E3%80%8B%E7%89%B9%E5%88%AB/</url>
    
    <content type="html"><![CDATA[<p>系列介绍：<a href="https://bgm.tv/blog/295773">https://bgm.tv/blog/295773</a><br>B站专栏版：<a href="https://www.bilibili.com/read/cv5334057">https://www.bilibili.com/read/cv5334057</a><br>（发布时还在审核）</p><center><img src="https://s1.ax1x.com/2020/03/28/GABa4J.png"  alt="" /></center><p>轻松的氛围，只有可爱美少女的萌萌日常，我们一般会把这一类番剧归类为“轻百合”或者叫做“萌豚番”，而喜欢这一类作品的观众们肯定对“芳文社”这个公司不陌生，因为有大量的“萌豚番”的原作就是在芳文社出版的（具体来说是旗下的Manga Time Kirara月刊），本季度的《恋爱小行星》就是这样一部番剧。再加上动画制作是由制作过《天使降临到我身边》（一迅社）的动画工房来负责，可以说承载着观众们很高的期待。</p><p>可是随着《恋爱小行星》的完结，很多观众会有这样一种感觉——这不“芳文”，或者说《恋爱小行星》有一种特殊的感觉使得它与其他的轻百合番剧略有不同。</p><p>欢迎观看本期“动画观察调色板”，这期我们来探讨下，是什么使得《恋爱小行星》特别？</p><center><img src="https://s1.ax1x.com/2020/03/28/GAB03R.png"  alt="" /></center><p>要理解这个问题，首先要观察芳文社的其他几部有名的作品，例如《请问您今天要来点兔子吗》《黄金拼图》</p><blockquote><p>《请问您今天要来点兔子吗》：为了便于上高中，高中入学新生心爱准备搬来这由石板路、木制房组成的街道。她在寻找寄宿的地点时迷路了，迷茫之中来到了一家名为“rabbit house”的咖啡店门前。看到这间名字都充满小兔风格的可爱咖啡店，心爱忍不住踏进了店门。在店里，她遇见了娇小的少女智乃，以及一只软乎乎的可爱小兔子提比。<br>心爱一边喝着咖啡一边询问路线时，才惊讶的得知这家咖啡店就是自己将要寄宿的地方。因为心爱将要入学的高中有着“学生要在寄宿的家里帮忙做事”的规定，心爱便开始当起了“rabbit house”的店员，并“自称”是智乃的姐姐，一边过起了咖啡店员的生活。</p></blockquote><blockquote><p>《黄金拼图》：曾在英国寄住的忍，归国后开始了高中1年生的生活，然而某一天忍在英国的朋友爱丽丝竟然不远万里跑来日本了，说着“这次轮到我来日本了”的爱丽丝，将忍和同学绫与阳子，以及另一位英国少女九条卡莲卷入了日本和英国美少女之间的休闲百合日常。</p></blockquote><p>可以看得出来，无论是《点兔》还是《黄金拼图》它们都是围绕着角色展开的，而《恋爱小行星》则是将这份关系寄托在了梦想上，而且是共同的梦想，虽然本质上还是在描述角色之间的关系，但是从根本上给予了剧情的驱动力，而不是单纯的日常。</p><p>此外，“不安感”也是《恋爱小行星》区别于其他大多数轻百合的一点（当然只是比起轻百合番剧而言），苍的搬家离去（打算），梦露学姐和苍的落选，上一届的离去与新人的加入（看完京吹我都要得新人PTSD了），以及最终还是未能找到小行星的遗憾，剧情不是朝着最好的方向，未来不可预期，都是“不安感”的体现。</p><p>有明确目标的“方向感”和对未来无法预测的“不安感”是体现角色成长的最有力的工具，但是有些作品里面使用的就不是那么好。比如《辐射4》里面玩家玩了一会根本就想不起来自己是要去找儿子的，这是目标迷失。《Urara迷路帖》到现在还差8层才能找到妈妈，这是原地踏步。《New Game！》里面樱宁宁短时间内地边上大学边学会了C++做游戏，但因为缺少不安感难让人代入（即使这是可能的）。</p><center><img src="https://s1.ax1x.com/2020/03/28/GABBg1.png"  alt="" />樱宁宁</center><p>（顺便一提，个人更喜欢《New Game！！》第二季，很多人诟病气氛压抑，但我觉得恰好适当地体现出了不安感）</p><p>还有使用过头的《宝石之国》，在南极石被带走，磷叶石获得了合金手臂变强之后，仿佛变了一个人格。这样确实能让观众深刻体会到“主角终于变强了”，我在此之前认为“主角自己不努力发挥作用提升自己，只会靠外界让自己变强”的念头也随之烟消云散。但是同时强烈的不安感反而让观众扎心，想寄刀片。</p><p>《恋爱小行星》在这一方便不说做得完美，但是也可以说比较合适。</p><center><img src="https://s1.ax1x.com/2020/03/28/GABwC9.png"  alt="" /></center>虽然说这种萌系作品很少有类似作品，但是《摇曳露营》的氛围渲染绝对是一种不错的方法。《摇曳露营》做到了一点就是将观众带入到露营当中去，虽然大家都是高中生，但是很多时候观众们不会太在意甚至是忘了，而专注与露营这一件事上，看到主人公们在学校的时候巴不得让她们赶紧出去露营。<p>即使题材不一样，《恋爱小行星》在这一点上也同样去刻画了，比如去JAXA参观，去进行观星活动，还有地学竞赛和闪亮星挑战，甚至在日本地学竞赛官网都有联动，参加初赛的选手还可以领取免费的文件袋周边，甚至还有导航语音联动。</p><center><img src="http://bubbleioa.top/wp-content/uploads/2020/08/4c5198cdb6b66e744160aa6074a3209c3429d1a0.png"  alt="" />日本地学官网</center><center><img src="http://bubbleioa.top/wp-content/uploads/2020/08/6f7dcd522b7be1c901f4628ec217c4a07d760069.png"  alt="" />初赛领取文件袋<img src="http://bubbleioa.top/wp-content/uploads/2020/08/3136c09df791a3808a83a23842d07768585ea68d.png"  alt="" />导航语音联动，高德GKD</center><p>在打造沉浸感的同时，去描绘周围人的梦想也是很重要的，如果过于着墨在主角身上会破坏平衡感。在该作品中，米拉和苍追寻小行星，小猪痴迷于地图，梦露前辈想成为宇航员，樱前辈:对于我来说，还没找到具体的目标，所以梦露前辈给了她鼓励。</p><p>苍从离开家人与米拉同居，甚至后面自己独自前往石垣岛，这看似十分莽撞的举动，恰恰是角色成长的证明。</p><p>而本作的OP于ED方面也没有采用之前轻百合番剧常用的活泼欢快的风格，而是由东山奈央演唱OP和铃木实里演唱ED，声音中透露着一份温柔，十分具有抒情感。</p><p>用一张图就能很好概括米拉和苍现在所在做的事：</p><center><img src="https://s1.ax1x.com/2020/03/22/85OjEt.jpg"  alt="" />PID：78733767</center><p>《恋爱小行星》有很多内容属于专业知识，动画组没有选择将其插入进本篇当中，而是选择做成SP的形式放在每一集最后，对于很难接触到丰富多彩高中生活的中国高中生来说做些介绍还是很有必要的，但是B站番剧并没有把它加在每集的末尾，这对观感还是有不小的影响的。<br><a href="https://www.bilibili.com/video/BV1r7411Q7vS">https://www.bilibili.com/video/BV1r7411Q7vS</a></p><p>现在这种轻百合番剧开始慢慢地走向了类似的方向，以清晰的目标为引导加上对未来的不明确带来的不安感来展现剧情和主人公的成长，这很可能是轻百合作品内容同质化所带来的战略性转移。但是像是《摇曳露营》《恋爱小行星》《街角魔族》等新型的轻百合番剧确实给我们带来耳目一新的感觉（街角魔族创新的方向稍有不同），而喜欢传统轻百合的观众还有《点兔》第三季，《黄金拼图》剧场版，《天使降临到我身边》等都可以满足需求，这两者都喜欢的观众可能成为最大赢家。</p><p>感谢收看这期的动画观察调色板，虽然由于时间和经验关系先挑了一个简单的选题来讲，但还是感觉自己有很多不足之处，如有不足之处欢迎在下方评论留言。同时如果你在看《恋爱小行星》或者其他轻百合作品有什么心得的话也欢迎在下方分享。</p><p>下一期估计至少要等到90天以后了，现在我有几个选题：</p><p>扳机社风格的形成不止归功于作画</p><p>什么是优秀的人设</p><p>《天使降临到我身边》中的日向为什么熊但是不招人讨厌？</p><p>另外，从第二期开始我打算把这个系列做成视频（其实本来就是想做成视频的但是由于现在手头工具不够），欢迎大家观看。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>【动画观察调色板#0】系列介绍</title>
    <link href="/2020/03/27/%E3%80%90%E5%8A%A8%E7%94%BB%E8%A7%82%E5%AF%9F%E8%B0%83%E8%89%B2%E6%9D%BF#0%E3%80%91%E7%B3%BB%E5%88%97%E4%BB%8B%E7%BB%8D/"/>
    <url>/2020/03/27/%E3%80%90%E5%8A%A8%E7%94%BB%E8%A7%82%E5%AF%9F%E8%B0%83%E8%89%B2%E6%9D%BF#0%E3%80%91%E7%B3%BB%E5%88%97%E4%BB%8B%E7%BB%8D/</url>
    
    <content type="html"><![CDATA[<center><img src="https://i.loli.net/2020/03/27/cSFuD6QxJoadYAj.png"  alt="" /></center><p>在我的硬盘里现在还躺着我一开始写的关于动画、漫画甚至是小说的评价。作为一个“理科生”，一上来当然是想以理性客观的角度分析作品的，但是显然我早期的评价达不到“客观理性”这一标准。</p><p>于是我开始发现，对我来说最重要的是看完一部作品后的感受，我开始搁置“客观理性”的要求，转而真诚地阐释自己的第一感受。久而久之，不可避免地出现了一个问题——为什么我会有这样的感受？</p><p>一种能够融合“感受”与“理性”的新的评价方式在我的脑海里初具框架，但是如同星云一般不知如何聚拢。</p><p>彼时的我发现了一个系列的节目，叫做《游戏制作工具箱》，其视频特点就是分析这个游戏为什么要这样做，比如有一期是讲“《蔚蓝》的手感为何如此迷人”。同时，作者还把自己制作该节目的心得分享到了<a href="https://www.bilibili.com/read/cv516452">这篇文章</a>中，看完之后对我大有裨益。</p><p>概括地来说，我们每个人看完一个优秀的作品的时候都会有种特殊的感觉，甚至可以把“优秀”这个限定去掉，每个作品都有自己的独到之处。而通过追问“为什么”可以引出对该作品或者某一类作品/元素的理性思考，将这一结果表达给读者就是本系列的核心目的。</p><p>我未必能从一开始就做得好，但是我会尽量努力使得内容更加完善。由于该系列出发点是寻找积极的元素，所以批评的内容占比很少，而且在说道这部作品怎么样的时候会提到另一部作品又是怎么样，但绝非抹黑这两部作品，只是做一个客观的对比而已。</p><p>（第一期咕咕中，logo中隐藏着预告）</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>然后，下一曲开始了！</title>
    <link href="/2020/03/16/%E7%84%B6%E5%90%8E%EF%BC%8C%E4%B8%8B%E4%B8%80%E6%9B%B2%E5%BC%80%E5%A7%8B%E4%BA%86%EF%BC%81/"/>
    <url>/2020/03/16/%E7%84%B6%E5%90%8E%EF%BC%8C%E4%B8%8B%E4%B8%80%E6%9B%B2%E5%BC%80%E5%A7%8B%E4%BA%86%EF%BC%81/</url>
    
    <content type="html"><![CDATA[<center><font size=4><b>然后，下一曲开始了！</b></font><p>《 吹响！悠风号》观后感（仅动画）</p><p><font color="red">⚠剧透警告⚠</font></p></center><h2 id="Part-1-观看背景"><a href="#Part-1-观看背景" class="headerlink" title="Part.1 观看背景"></a>Part.1 观看背景</h2><p>还依稀记得第一季连载的时候，感叹着“这个世界上还有制作如此精良的动画”的我的样貌。但后来不知道什么原因，阴差阳错地没有继续看下去。</p><p>后来在完全懵逼的情况下在高铁上看完了《莉兹与青鸟》，真的除了感叹制作精良之外就没有什么想法了。</p><p>然而当我时隔多年重新观看的时候，我突然意识到，下一曲开始了！</p><h2 id="Part-2-剧情梗概"><a href="#Part-2-剧情梗概" class="headerlink" title="Part.2 剧情梗概"></a>Part.2 剧情梗概</h2><p>如同该作名称一样，故事主要讲述了北宇治高中吹奏部参加全国大赛的故事，而我们的主角黄前久美子在社团中担当的就是上低音号演奏者。</p><blockquote><p>北宇治高中吹奏部直到5年前还是关西大会的常客，并且过去还是全国大会出场过的强校代表，然而自从顾问换了之后，该吹奏部就再也没有挺进过关西大会。之后以新顾问的赴任为契机，怀揣着高远目标的部员们挥洒着奋斗的青春，过着波澜万丈的每一天。终于，比赛的日子也即将到来……</p></blockquote><p>如同很多为高中生举办的比赛一样，日本的中学生吹奏大赛也是一年举行一次，要参加全国赛，必须在地区赛中取得名额（剧中是关西大赛），要想参加地区赛，必须在府赛中取得名额（剧中为京都府），在此之前，还有本地举办的Sunrise Festival的活动。</p><center><img src="https://s1.ax1x.com/2020/03/16/8YNqdP.png"  alt="" /></center><p>但是作为一个55人参加的团体比赛，团队内部的和谐和凝聚力也是十分重要的，团队内部的矛盾不可能没有，而我们的主角久美子，随着时间的推移，也从一个旁观者变成了勇于冲进漩涡中心的调解员。而每一次解开部员之间的矛盾，都使得这个团队更加团结……</p><h2 id="Part-3-主题与人物"><a href="#Part-3-主题与人物" class="headerlink" title="Part.3 主题与人物"></a>Part.3 主题与人物</h2><blockquote><p>京吹1期很有青春的感觉，因为它唤醒了6、7年前的一些乐团的记忆。下面把京吹的一些情节和我当年的经历对比一下，简直神还原。京阿尼的片很多表面上是日常，实际上带有很浓郁青春的味道，比如轻音、比如冰菓，比如京吹。如果说京吹1给普通观众的“青春感”是10分，那么对于混过乐团的人来说就是20分。因为它总是有意无意地还原一些细节。<br>——引用自<a href="https://bgm.tv/blog/289327">锐ちゃん的日志</a></p></blockquote><p>说到青春，其实这是一个很大的范围，我甚至觉得它囊括了该作所有主题：奋斗、团结、友情、爱情、成长……</p><p>有一部我很喜欢的漫画，主题也是青春的《星野，闭上眼》，其中汉化组组长的一段话让我印象深刻</p><blockquote><p>不知从哪里听说过，青春总是残酷的。<br>…………<br>但是青春不就是这个样子的吗？<br>路还长，我们还年轻。<br>青春永远在途中，无需完美的句号。<br>——暗夜黑猫</p></blockquote><p>（我省略了很多，原文很长但是真的非常有文采！佩服！）</p><center><img src="https://s1.ax1x.com/2020/03/16/8YwmQg.png"  alt="" /></center><p>但是“京吹”的青春很不同，或者说，表现方式很不同。上面所提到的《星野，闭上眼》以及很多其他“青春”题材的作品，都很戏剧性，人物的行为动机都很随机，是一种常用的“商业手段”。而“京吹”如同锐ちゃん所说，是一种“日常的青春”，戏剧性拉到最低以至于有人会做出“主线过于平淡”的评价。</p><p>我们总是站在上帝视角，来评判一个人的行动，来赞颂某部作品里所谓的“青春”。但是真正的青春难道更多的不是心灵上的感受吗？而京都动画将这些细腻的情感跃然于画面之上，“细腻的情感流露”也是该作能变现出“真实感”的原因之一。</p><center>我一直认为，青春总是充满挫折的久美子避开初中同学，选择北宇治高中丽奈暗恋泷升老师，但却无法得到回应明日香面对家长压力，被迫放弃社团活动香织拥有强劲实力，因制度无缘独奏夏纪经历退部风波，练习逐渐浑水摸鱼麻美子放弃自我所好，等到大学后悔无比美玲不善表达情感，入部之后自我孤立<p>很多人看番喜欢带入角色<br>我们都以为自己是久美子，其实我们只是我们自己<br>没有久美子的真挚宽容<br>没有丽奈的争强好胜<br>没有明日香的圆滑大方<br>没有香织的人缘宽广<br>没有夏纪的不耻下问<br>没有麻美子的自我醒悟<br>没有美玲的过硬技术<br>我们经常憧憬着优秀的人，但只和自己相当的人交流<br>在网络上数落他人甚至是虚构人物的言行，但自己完全做不到<br>想要变得优秀，但又怕努力了没有成果<br>默默搞着自己的兴趣，却不被别人认可<br>身边的朋友总是像在往前走，自己总感觉在原地踏步<br>每天活在焦虑之中，通过沙雕视频慰藉心灵<br>哈哈一笑之后，又陷入自我责备的循环<br>被消费主义冲昏了头脑，买来一时的快感</p><p>即便是青春中最甜蜜的爱情<br>大多数也无法修成正果</p><p>不知从哪里听说<br>青春是场垃圾游戏<br>是给那些已经赢在起跑线上的人的狂欢<br>而我们如同大多数人一样<br>在名为青春的漩涡里抱头鼠窜，找不到方向</p><p>难道我们所讴歌的青春<br>真的是场垃圾游戏？真的是给胜利者的狂欢？</p><p>新月之舞缓缓落幕，春的脚步处处生息<br>人们之所以将年少冠以青春之名，<br>正是因为青春是成长的时期</p><p>久美子帮助社团解决矛盾<br>丽奈向老师射出爱之箭矢<br>明日香取得成绩参加大赛<br>香织面对机会主动让位<br>夏纪受到感染努力练习<br>麻美子不顾反对坚持理想<br>美玲走出封闭敞开心扉</p><p>尽管第一次只拿到了铜奖<br>就算第二次连全国大赛也没能参加<br>但这些重要吗？</p><p>不是每个努力都必须要有结果，<br>过程和感悟或许更加珍贵<br>不是每个问题都必须要有答案，<br>苦恼和思索有时更加重要</p><p>我们每个人都把青春想的太功利化<br>得到什么，失去什么的心情挥之不去<br>可青春正是最不用考虑得失的时候<br>无所顾虑地向前无视前方的艰难险阻</p><p>“京吹”也是如此<br>吹奏比赛没能拿到理想的成绩<br>丽奈也没法得到老师的回应<br>秀一与久美子还没能在一起</p><p>但是这就是青春，<br>无需完美的结局，<br>去将当下所有美好的事物谱写，<br>形成绝妙的乐章，<br>这，正是青春的特权</p></center><h2 id="Part-4-吐槽"><a href="#Part-4-吐槽" class="headerlink" title="Part.4 吐槽"></a>Part.4 吐槽</h2><p>先说一句：我忍你们这些在“京吹”底下用政治口气讲话的人很久了！！</p><p>啊，写起来真的是没完没了，真的好想把自己的感情原封不动地搬到文章里啊！<br>高中虽然没有参加过团体竞赛，但好歹也参加过团体和竞赛XD</p><p>团体是指团委，竞赛是指奥赛，关于奥赛还有一篇黑历史在我的第一篇日志里，当时真的有点气愤吧，有点像希美当时退部的时候的感情？但看来我还是坚持了下来呢。</p><p>我在团委里也算是一个夏纪一样的人物吧，就是提不起劲的那种，有什么任务安排到我头上了我才会做的那种（真的很抱歉QAQ）<br>不过和剧中有所不同，我们这一届团委应该是由于做的很好我才能这么悠闲？<br>但是到了下一届招新的时候真的是惨不忍睹233，下一届他们自己内部的问题很大，还有几个“久石奏”和“美玲”在里面，真的非~常难处理<br>但是由于团委只同时有两届工作，加起来大概25人左右，所以冲突也不是那么明显（当然想解决也因为时间有限也很难）</p><p>要说到团体里的冲突的话感觉问题最大的就是我现在所在的班级吧，虽然快毕业了但是回想起来我还是有很大一部分责任的。当时当班长却有一段时间为了奥赛停课而导致的班上氛围变化。作为一个团队的Leader我其实很憧憬久美子，十分欣赏她的性格。</p><p>我认为只有京都动画能够做到这么忠实于日常的同时做到如此丰实的内容，虽然连着看不免陷入一种单元剧推动主线的感觉，但是比起其他作品来说这种感觉要好很多。</p><p>另一条线就是久美子和秀一的爱情线，据说原作小说得了一个什么恋爱小说奖？这是真的吗我怎么一点也看不出来？虽然还是很甜就是了，尤其是久美子把礼物还回去的时候，有些人可能觉得“惨 秀一 惨”，但我反而觉得是那种“老夫老妻”的安心感，像是已经约定好了的夫妻。能为了自己的理想而暂时放下爱情的两人，不可谓不成熟。原来之前青涩的感觉都是假的， 都已经发展到这一步了吗www</p><p>还有配音要好好夸夸，这种感觉，我记得上次还是在古力特里面感受到过，这种不加修饰的纯正的声音，为这部番增色不少。</p><p>虽然感觉说这么点有点不够的样子，心中还有很多想要诉说的东西。<br>但是写了这么多，我发现我也要好好努力了呢，在这所剩不多的青春里。<br>期待第三季！</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>我们所经历的每个平凡的日常，也许就是连续发生的奇迹。</title>
    <link href="/2020/03/07/%E6%88%91%E4%BB%AC%E6%89%80%E7%BB%8F%E5%8E%86%E7%9A%84%E6%AF%8F%E4%B8%AA%E5%B9%B3%E5%87%A1%E7%9A%84%E6%97%A5%E5%B8%B8%EF%BC%8C%E4%B9%9F%E8%AE%B8%E5%B0%B1%E6%98%AF%E8%BF%9E%E7%BB%AD%E5%8F%91%E7%94%9F%E7%9A%84%E5%A5%87%E8%BF%B9%E3%80%82/"/>
    <url>/2020/03/07/%E6%88%91%E4%BB%AC%E6%89%80%E7%BB%8F%E5%8E%86%E7%9A%84%E6%AF%8F%E4%B8%AA%E5%B9%B3%E5%87%A1%E7%9A%84%E6%97%A5%E5%B8%B8%EF%BC%8C%E4%B9%9F%E8%AE%B8%E5%B0%B1%E6%98%AF%E8%BF%9E%E7%BB%AD%E5%8F%91%E7%94%9F%E7%9A%84%E5%A5%87%E8%BF%B9%E3%80%82/</url>
    
    <content type="html"><![CDATA[<p>一个2011年的搞笑动画，我2020年看有必要吗？有必要吗？</p><p>…………</p><p>真香！</p><p>《日常》这部作品影响力之大，直到今天都经常能看到它的身影，我QQ好友里还有人用它里面人物的头像，每次看伊朗物理作死专家B站更新，都能看到那美绪奔跑的动图。</p><p>还有之后的男高女高，都一定程度上致敬了《日常》，和女高的主角团座位一致，人设类似。</p><center><img src="https://s2.ax1x.com/2020/03/07/3XhKTe.png"  alt="" /><p>《女高中生的虚度日常》</p><img src="https://s2.ax1x.com/2020/03/07/3XhuwD.png"  alt="" /><p>《日常》</p></center><p>但其实看前几集的时候，没有对上电波，心中唯一的想法就是：“这哪是《日常》？这明明是《今日一点也不正常》吧！”</p><p>有这个想法再正常不过了，维基上给《日常》的一个tag是“后现代搞笑”</p><blockquote><p>后现代主义（英语：Postmodernism），是一个从理论上难以精准下定论的一种概念，因为后现代主要理论家，均反对以各种约定俗成的形式，来界定或者规范其主义。</p></blockquote><p>而前几集就是打破我心中约定俗成的规则，等到我接受了新的规则，我就已经和剧中的人物一样放飞自我了！</p><p>从《日常》到《龙女仆》，京都动画描绘这种日常氛围的功底可见一斑。</p><p>在相对“粗犷”的画风下做到了精细，对每一个细节的一丝不苟，这些工作虽然不是画面主题，但是能够提供给观众一个非常舒适的观感，在缺乏跌宕起伏的剧情和燃破天际的打斗下，良好的观感才能够维持观众的兴趣，而这一点，《日常》做到了，不是以2011年的眼光来看，而是从2020年的眼光。</p><p>原作的优秀是这部作品搞笑的核心，纸牌游戏部分可谓一绝，评论区里面也有大神分析了大家可以去看。此外，激烈的矛盾冲突和解决冲突的过程中产生的摩擦也是搞笑的来源。而这些矛盾往往来源于日常，解决过程十分荒诞，最后又归于日常。日常-&gt;日常是经历（我们所经历的每个平凡的日常），而解决过程的荒诞其实是奇迹（也许就是连续发生的奇迹）个人解读</p><p>例如美绪看到美里与幸治郎在一起后（25话）：</p><center><img src="https://s2.ax1x.com/2020/03/07/3XHfrn.png"  alt="" /><p>发现美里与幸治郎在一起，美绪狂奔，这里祐子必须跟着她，来突出荒诞的主体</p><img src="https://s2.ax1x.com/2020/03/07/3XHs58.png"  alt="" /><p>美绪破窗而逃</p><img src="https://s2.ax1x.com/2020/03/07/3XHrUf.png"  alt="" /><p>美绪在操场上狂奔</p><img src="https://s2.ax1x.com/2020/03/07/3XHDVP.png"  alt="" /><p>美绪单杠，这里之前有铺垫</p><img src="https://s2.ax1x.com/2020/03/07/3XHwDI.png"  alt="" /><p>美绪打拳</p><img src="https://s2.ax1x.com/2020/03/07/3XbaJU.png"  alt="" /><p>中之条父亲头发</p><img src="https://s2.ax1x.com/2020/03/07/3XH0bt.png"  alt="" /><p>背老奶奶</p><img src="https://s2.ax1x.com/2020/03/07/3XHdKA.png"  alt="" /><p>铁轨上奔跑</p><img src="https://s2.ax1x.com/2020/03/07/3XHYCD.png"  alt="" /><p>夹缝中生存</p><p>此处省略多个场景（都是荒诞的）</p><img src="https://s2.ax1x.com/2020/03/07/3XbdWF.png"  alt="" /><p>美绪救人，矛盾缓和</p></center><blockquote><p>我们所经历的每个平凡的日常，也许就是连续发生的奇迹。</p></blockquote><p>人类是健忘的，但互联网有记忆，最近翻了翻之前的邮件、说说、博客之类的保留记忆的内容，现在看来当时也是十分搞笑（都是黑历史），大家也可以翻翻自己的黑历史，说不定会对这句话有更深的理解？？当然认真观察生活也是必要的！</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Wuppo——可爱而又不失可玩性的冒险游戏</title>
    <link href="/2020/03/07/Wuppo%E2%80%94%E2%80%94%E5%8F%AF%E7%88%B1%E8%80%8C%E5%8F%88%E4%B8%8D%E5%A4%B1%E5%8F%AF%E7%8E%A9%E6%80%A7%E7%9A%84%E5%86%92%E9%99%A9%E6%B8%B8%E6%88%8F/"/>
    <url>/2020/03/07/Wuppo%E2%80%94%E2%80%94%E5%8F%AF%E7%88%B1%E8%80%8C%E5%8F%88%E4%B8%8D%E5%A4%B1%E5%8F%AF%E7%8E%A9%E6%80%A7%E7%9A%84%E5%86%92%E9%99%A9%E6%B8%B8%E6%88%8F/</url>
    
    <content type="html"><![CDATA[<p>一周目通关，游戏时长6小时。有剧透，谨慎观看。</p><p>最开始我是被Wuppo的宣传片的BGM和5元的价格吸引的，结果到游戏最后都没有出现那个BGM，但是其优秀的音乐和美术风格绝对与宣传片相匹。音乐风格建议参考宣传片，美术风格可以通过下面的图片了解。</p><center><img src="https://s2.ax1x.com/2020/03/07/3X33xf.png"  alt="波波城中心雕像" /></center>故事讲述了在一个奇幻的世界，本来主要有4大种族在此居住生活，其中最弱小的乌姆，却靠着最聪明的大脑“征服“了这个世界。（长相如上图，一个团子加四条腿www）<center><img src="https://s2.ax1x.com/2020/03/07/3XY07F.jpg"  alt="团子大家族" /><img src="https://s2.ax1x.com/2020/03/07/3XDxEt.jpg"  alt="四大种族" /></center>而我们的主角，本来是一只因为吞了电视机而非常大的平平无奇的乌姆（后来吐掉了），在名为乌姆之家的地方安逸地生活着，直到他吃冰淇淋把乌姆之家搞得脏兮兮之后，被管理员强制逐出。<center><img src="https://s2.ax1x.com/2020/03/07/3XYw0U.jpg"  alt="宅宅乌姆" /></center>于是我们的小乌姆就开始了属于他的冒险，到过生机勃勃的花园，去过大城市给黑心老板当杂工，在有限的时间内发报纸，参与城市议会的讨论，帮助囚犯从牢中逃脱……甚至去过里世界，还拯救了世界。<center><img src="https://s2.ax1x.com/2020/03/07/3X0ORe.jpg"  alt="乌姆之家地图" /></center>游戏以探索为主，有深度和难度的探索内容，让这个游戏的道具收集变得极富挑战性。而在探索的过程中，你会遇见许多性格各异的乌姆，并且在与他们的聊天中获得来自他们的认可；也会来到其他乌姆去不到的地方收集四处散落的幻灯片，在播放它们的时候听幻灯片的讲解者们述说关于世界和种族的故事。内容很多很丰富，我6个小时的体验几乎上连游戏的70%的探索内容都没达到，随着游戏的进行，你会发现管理员对你离开的不舍，在解决完乌姆之家厨房的麻烦之后，你会听到厨师们说，它们这样做是想给一个乌姆巨大冰淇淋，这样它就不会经常下来拿搞得到处都是了。<p>值得一提的是Wuppo中角色对话十分多，选项也多，你通过对话来了解这个世界。同时，提升血量这个为数不多的能增强主角的途径也需要通过对话达成，使别人感到幸福，才能获得幸福度，从而提升血量。</p><p>而游戏的重要环节则是BOSS战。BOSS战也是该游戏创新、好玩之处。</p><p>游戏中的BOSS共有19个，除一部分BOSS是剧情需要一定会战斗的外，其余的BOSS则都可以通过不同的方式避免战斗。</p><p>如果不在海底制造声音，第一个BOSS绿色的鱼就不会出来攻击你；</p><p>如果不杀狮子王的子民，狮子王就不会作为BOSS出现；</p><p>如果不在信号灯下不停切换道具，信号灯就不会选择与你战斗……</p><p>在我看来，这种设定带来的，是这些BOSS在凶狠的外表下，一颗人性化的心。你会与很多BOSS有互动，比如狮子王会帮你打下一个BOSS（也许是我们在帮他？），打完深海BOSS我们还要把它带到主人那完成阔别已久的重逢。<br>每个BOSS都十分有特色，比如信号灯：</p><center><img src="https://s2.ax1x.com/2020/03/07/3X1IbQ.png"  alt="" /></center>要是在红灯的情况下你动了，它会狠狠揍你，在此情况下，你甚至近身都做不到，子弹也会被格挡，只有到绿灯时，你走到它附近，它会换边，途中会平地摔一会，这时候就是你出手的时候啦！<p>Wuppo还有一点做的非常棒的就是陪伴感，在游戏过程中你总共会碰到4个伙伴，很多个可对话的NPC，还有无数的平凡的NPC，这些NPC会到处跑，会购物，会使用东西，会通勤，会住旅馆……而且这个世界的两个交通工具也是严格按照时刻表来运行的，你要搭乘？必须等！</p><center><img src="https://s2.ax1x.com/2020/03/07/3XdRoT.jpg"  alt="交通工具之一——有轨电车" /></center>此外，该游戏的解密做的也相当可以。解密的关键点在于与场景的交互，最普通的交互方式就是移动，我们的主角能二段跳，然后就是胶胶枪攻击刺球来破坏场景，之后还能获得水桶，波波帽（夹子），音乐盒……<p>其中最神的就是波波帽，它不是过程中给你的，而是之前那个可选任务，帮助囚犯逃脱的时候需要购买的道具，同时也交给你使用方法，然后在之后的解密中大展身手。</p><center><img src="https://s2.ax1x.com/2020/03/07/3X0vMd.png"  alt="贩卖波波帽的波波城（中心）地图" /></center>此外，在该游戏的最新版本中，加入了本地双人模式，一个人控制主角，一个人控制伙伴，但是该版本的汉化不完全，英语苦手者建议先玩老版本。<center><img src="https://s2.ax1x.com/2020/03/07/3XspZR.jpg"  alt="合作模式" /></center>难度方面很友好，给了4个难度，我选的普通，感觉打起来没什么技巧可言。最困难的基本上挨3次BOSS攻击就会死。<p>但是，只有12%的用户通过了一周目说明了一个很严重的问题——缺乏核心游戏性。该作几乎所有战斗都发生在BOSS战，作为一款steam上的“角色扮演”游戏，bgm上写的ARPG游戏，它并没有RPG该有的角色属性或是战斗能力成长。血上限的增加十分稀缺，我一周目开始100血，结束110血。能升级的装备只有武器，而且升级代价低，效益高，并且是没有梯度的（要么升了，要么没升），我一把基础武器花点钱升级后，DPS翻了3~4倍。其他能保证打架的，就只有屯恢复药品。所以说，比起把它归类到RPG，我更倾向把它和PIKUNIKU类比（一款AVG游戏），那些RPG玩家，期待主角成长的玩家可能要失望了。</p><p>总结：Wuppo是一个拥有完整世界观的可爱风格的冒险类游戏，其独特的美术风格和出彩的音乐（甚至有OST的DLC）使得它在同类型游戏中脱颖而出。它同时描绘了一个生机勃勃而且充满温暖的世界，一个个细节会使你感到无比“暖心”。但缺乏主线的剧情和几乎不成长的主角使得它作为一个角色扮演游戏缺乏核心游戏性。新加入的多人合作模式能在与伙伴一起游玩的同时，体验完整的游戏世界。（有些游戏的多人合作是新的独立关卡，比如上面那款）非常适合与喜欢这类游戏的女朋友一起游玩。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>追逐着梦想，将未来交汇</title>
    <link href="/2020/03/02/%E8%BF%BD%E9%80%90%E7%9D%80%E6%A2%A6%E6%83%B3%EF%BC%8C%E5%B0%86%E6%9C%AA%E6%9D%A5%E4%BA%A4%E6%B1%87/"/>
    <url>/2020/03/02/%E8%BF%BD%E9%80%90%E7%9D%80%E6%A2%A6%E6%83%B3%EF%BC%8C%E5%B0%86%E6%9C%AA%E6%9D%A5%E4%BA%A4%E6%B1%87/</url>
    
    <content type="html"><![CDATA[<center>追逐着梦想，将未来交汇<p><b>An Uplifting Story</b></p><p><font color="red">剧透警告⚠</font></p></center><p>先来说说自己的感想，然后再来吐槽和批评。<br>团结、励志、爱情……这些使这部漫画的主题。我在看这部漫画之前对于akb48一点了解都没有（虽然看后也没有了解），但其实并不妨碍作品本身的发挥，这里你可以清楚地感觉到主角们经历的成长和蜕变。<br>浦川实乃梨（浦山实）从一开始的只是想让宽子成为center到后来自己发现做偶像十分有趣，与宽子正面交锋。</p><p>吉永宽子从一开始内向胆小，到进入AKB后的站在小实的背后，再到后来想要靠自己的力量成为center。从一开始因为家庭压力想要退出到后来坚定自己的梦想。<br>冈部爱有着过人实力，但被复仇阴霾笼罩，最终也解开了对母亲的心结。<br>有栖莉空年小失聪，但重燃偶像梦想，焕发活力。<br>我们很多人喜欢把自己带入男主的视角思考，但实际上我们只是奥平老师。<br>但是，正是有了奥平老师一样的“旁观者”才促成了主角的成长。<br>奥平老师用自己的薪水，免费派发门票<br>樱小姐从AKB初期一直工作，保障舞台万无一失</p><p>瑶佳小姐在”GEKOKU嬢”出道初期提供活动支持，之后担任了NUMBER8的制作人<br>这一点在最后一话作者用方格框告诉了我们：</p><blockquote><p>﻿这之后AKB会变成什么样……谁都不知道，可能会变成超级巨星，亦或是数年后就解散了也说不定——但是一定没问题！只要有着比谁都热爱“偶像”这个职业的少女和最喜欢那位偶像的饭存在的话。</p></blockquote><p>副标题我一开始写的是“An Uplifting Story about Idol”，但其实这并不仅仅是偶像的逐梦故事，也是这一个偶像圈里面所有人的奋斗故事。<br>我很喜欢这部作品里面塑造的许多角色，他们都有自己的梦想去追寻，都有自己为了他人的执念。<br>这部作品角色们很多时候是被利他的行为驱动的，这一点的结果就是将自己的未来与他人的未来交汇，让自己与他人一同前行。<br>这其实是很令人羡慕的，有人说，”(男主)就像做了一场4年的黄粱梦，收获了什么只有男主自己知道。”<br>在结尾主角确实失去了浦川实乃梨的身份，但是宽子已经成为center，而且他所构建的，与AKB48其他成员交汇的未来并没有因为男生身份暴露这件事情而被破坏。<br>他所得到的，就是连同众人一起成长的未来。</p><p>浦山实对宽子到底喜欢到何种程度以至于能够付出4年时间，默默支持她的梦想？我认为这份感情是在这4年间不断加深的，在一起训练、成为偶像的路上愈发地喜欢上宽子的。<br>而宽子没想到的是，作为同学喜欢的浦山实，作为闺蜜喜欢的浦川实乃梨，以及作为恋人喜欢的“黑神”，居然是同一个人。<br>这是什么神仙爱情，直接去民政局把结婚证领了吧，结尾作者也是老狡猾了，不直接发糖而是藏起来了：</p><blockquote><p>﻿主持人：AKB48 Happy Mart电视台！！主题是“最近发生的开心的事”……怎么样 宽子？<br>宽子：说起来，我家里有个洗衣机……那个洗衣机在耳边，发出很吵的声音，有时候会吵得睡不着——但是最近洗衣机非常地安静，它的颜色很可爱所以很开心，感觉看起来是红色和茶色的混合色啊……</p></blockquote><p>然后这是这一话的封面：</p><center><img src="https://s2.ax1x.com/2020/03/02/3RhBhn.png"  alt="" /></center><p>虽然我觉得要是表现地更露骨一点会比较好呢www</p><p>260多话的作品我三言两语也说不完，所以大家还是自己去看看吧，下面我就开始瞎吐槽和批评了。</p><blockquote><p>看完前感想：<br>在DMZJ上一直处在显眼的地位，但是一直没有点进去看，昨天看了宮島礼吏一天工作生活的跟拍，加上对《租借女友》画工的印象很深，就看了。不得不感叹这几年宮島礼吏的画工进步真的很大，看第一话的时候完全不相信是《租借女友》的作者画的，200+话的时候就很精美了。</p></blockquote><p>确实，这部作品在画工上的成长是肉眼可见的，也为《租借女友》的爆火埋下了伏笔，而且作为一部热血漫，演出效果也是一级棒，比如总选举的地方：</p><center><img src="https://s2.ax1x.com/2020/03/02/3R0ORH.png"  alt="" /></center><center><img src="https://s2.ax1x.com/2020/03/02/3R0LJe.png"  alt="" /></center>但是在看完同类型题材《偶像之王》后就没有那么震撼了，那部作品的表现力是真的强。主角虽然是伪娘但作者没有特意地画的比真女生可爱（这已经成为趋势了233）但是怎么都不暴露的设定还有对于某些人一下就暴露的设定都很戏剧性。<center><img src="https://s2.ax1x.com/2020/03/02/3R0Eb6.png"  alt="" /></center>说实话，我看完了还认不全<center><img src="https://s2.ax1x.com/2020/03/02/3R0kK1.png"  alt="" /></center>当偶像不如高考（<center><img src="https://s2.ax1x.com/2020/03/02/3R0ADx.png"  alt="" /></center>你才是男的！<center><img src="https://s2.ax1x.com/2020/03/02/3R0ZVK.png"  alt="" /></center>说实话，突然虐莉空真的受不了，这样子导致莉空如果最后没有和主角在一起的话真的很背德，虽然没有人道德绑架我但是真的就感觉自己把自己绑架了，非常难受。这种胃疼感不是来自于谁又绿了谁，而是来自于恋爱情感之上的重压，这一点在作者新作《租借女友》中体现更为强烈。<p>而且说实话，我觉得这部作品很多地方都是在凑连载话数，有很多重复部分，剧情模板化套路化。<br>具体来说主线就是：一万元公演，GEKOKU娘，全兼任（SKE，NMB），HKT，总选举，后期就放飞自我了<br>每一个剧情都是：<br>好像是机会，很棒！<br>反派来了，设坎！<br>主角团有危机，谋策！<br>单元剧形式，逐个解决！<br>这么做在连载的时候倒无所谓，但是一口气看完的话就会觉得有点枯燥，后一百话我是一口气看完的，有些地方就不愿意看仔细了。<br>总的来说还是一部略有遗憾的作品，在剧情方面有很大提升空间，尤其是爱情线，最有执念的爱情却表现得最含蓄，青涩，这又不是什么100天恋爱，付出了4年，本因该开出绚烂的花朵，结出丰硕的果实的，结果给我们看了一个茁壮成长的小树苗，虽然也是“希望”，也可以看到美好的未来，但是已经4年了啊，读者也看了这么久，给颗糖不行吗？就算现在是偶像，你写个什么“三年后”然后发个糖不行吗。</p><p>补充一点，有miku登场好评</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>《女高》真的有升华吗？它有的只不过是日常罢了！</title>
    <link href="/2020/02/15/%E3%80%8A%E5%A5%B3%E9%AB%98%E3%80%8B%E7%9C%9F%E7%9A%84%E6%9C%89%E5%8D%87%E5%8D%8E%E5%90%97%EF%BC%9F%E5%AE%83%E6%9C%89%E7%9A%84%E5%8F%AA%E4%B8%8D%E8%BF%87%E6%98%AF%E6%97%A5%E5%B8%B8%E7%BD%A2%E4%BA%86%EF%BC%81/"/>
    <url>/2020/02/15/%E3%80%8A%E5%A5%B3%E9%AB%98%E3%80%8B%E7%9C%9F%E7%9A%84%E6%9C%89%E5%8D%87%E5%8D%8E%E5%90%97%EF%BC%9F%E5%AE%83%E6%9C%89%E7%9A%84%E5%8F%AA%E4%B8%8D%E8%BF%87%E6%98%AF%E6%97%A5%E5%B8%B8%E7%BD%A2%E4%BA%86%EF%BC%81/</url>
    
    <content type="html"><![CDATA[<p>剧透！</p><p>从外在角度来说制作精良，更何况作为日常番，已经没有什么可以挑剔的部分了。<br>从内容来讲，这部作品真的是超出我的预期。本以为就是日常搞笑类型的作品，没有想到还有这样的升华。<br>但是仔细想想……它、真的有升华吗？<br>我们觉得《女高》很日常，是因为它描述的是普通人的日常的生活，没有架空的背景，没有一波三折的剧情，有的只是各种“怪人”的搞怪。<br>死宅是一个典型的阿宅形象，成绩平平，喜欢BL，喜欢V家，想当漫画家（这点可以抽象为“想为喜欢的事物创作”，bgm上大家的感想也算哦），但是很咸鱼，经常颓。弹幕里经常飘过“真实”“是我”，可以看得出来死宅真的就是一个普普通通的女子高中生。<br>而说“升华”，是指死宅为自己喜欢的P主唱了首翻唱，然后在展会上发现是自己的班主任。这段剧情在这部作品里算是一个情感的高潮，大概可以提取出来的要素就是：“作者与粉丝的关系”。<br>作者给出的答案是粉丝喜欢作者-&gt;支持作者（这里是翻唱）-&gt;作者回应粉丝情感<br>这也很日常，大家都有喜欢的作者，也都有想要表达喜欢感谢的心情，然后得到作者的回应。这其实是非常良性的互动。我不知道B站上那些投翻唱，二创的粉丝们有没有得到作者的回应，但是我其实是有几次体会的，比如在推特上用三脚猫英语表示喜爱，并问wisp X来不来中国平台投稿，他很热情地回答了我，过了几个月就在网易云上投稿了（貌似他本来就有这个计划）<br>还有初中的时候很喜欢MAD、PV，就写了消息给现Alice映画的掌门<a href="https://space.bilibili.com/294227/" title="千枼草_阑小逝">千枼草_阑小逝</a>，表达了喜欢她们的作品并问以后有没有机会合作。她也很耐心地回了我（记得比我发的还多？），并期待着能有那一天。（虽然我现在还远远没那个实力罢了qaq）<br>现在每看完一部连载漫画也都会向汉化组写一份感谢信，这个回的就比较少了QAQ<br>其实呢，这就是《女高》，也是我们每个人都在经历的日常。</p><p>再说一些无关的。</p><p>可能有些人会觉得这部作品里面的人在现实中部分很不讨喜，但是在作品里却被温柔以待，这点我无法否认。但这是否没意义？是否需要排斥这种“虚构的美好”？</p><p>The reality is broken.</p><p>“逃避现实”,“虚构世界中的美好”<br>这些东西看似是在说这些虚构世界是一个陷阱，裹着糖果外皮的陷阱，让人无法面对现实的残酷。<br>从某种意义上来说这是正确的，虚构世界中的美好仿佛就像是理想主义者开出的玩笑……在如今这个现实主义风靡的社会，这种美好被很多人轻视。就算有人欣赏，也会认为“这是虚构的”、“仅仅是理想罢了”<br>但是现实主义者仍然是可以去追寻这种“虚构的美好”，因为它是客观存在的。<br>这里我个人认为罗翔老师在论证“正义是否客观存在”的这段视频是很好的例子（<a href="https://www.bilibili.com/video/av85716082" title="视频链接">视频链接</a>）<br>他最后给出的答案是：正义是客观存在的，我们无法达到绝对的正义，但是既然正义是客观存在的，我们就可以去追求，去朝这个方向努力。</p><p>相信在看这篇日志的各位都认同，比起外在，一个人的内心更加重要。而我认为，这种向往美好的情感是最纯粹的，积极的。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>魔女之泉2——一款优秀的子供向作品</title>
    <link href="/2020/02/07/%E9%AD%94%E5%A5%B3%E4%B9%8B%E6%B3%892%E2%80%94%E2%80%94%E4%B8%80%E6%AC%BE%E4%BC%98%E7%A7%80%E7%9A%84%E5%AD%90%E4%BE%9B%E5%90%91%E4%BD%9C%E5%93%81/"/>
    <url>/2020/02/07/%E9%AD%94%E5%A5%B3%E4%B9%8B%E6%B3%892%E2%80%94%E2%80%94%E4%B8%80%E6%AC%BE%E4%BC%98%E7%A7%80%E7%9A%84%E5%AD%90%E4%BE%9B%E5%90%91%E4%BD%9C%E5%93%81/</url>
    
    <content type="html"><![CDATA[<center><img src="http://bubbleioa.top/wp-content/uploads/2020/08/WS2.jpg"  alt="" /></center><p>其实魔女之泉系列很早之前就想玩，阴差阳错的到现在才开始玩，2是我玩的第一部，选它主要是它在bgm上评分最高。<br>后来发现，从各方面来讲还是不咋地，可能是因为年龄的原因。<br>如果从10~14岁的儿童来讲，这会是一部优秀的作品。下面就说下优缺点。</p><ol><li>小体积，低配置（不到300MB的安装包，2014年的手机依然能流畅运行），但这也导致了游戏的画面表现欠佳（以16年的角度来看）</li><li>BGM好听，但是每一首时长太短，总有点意犹未尽的感觉。</li><li>UI设计有问题，很多时候常用的操作使用起来很麻烦（比如换宠物）。</li><li>游戏性一般，不断地叠数据（好在不是太肝），后期非常轻松（除去后日谈）</li><li>立绘不错，CG不行（立绘和CG简直是两个画风啊喂！）</li></ol><p>其实上面说的这些优缺点都无足轻重，因为剧情和人物实在是硬伤。（以下内容存在剧透）<br>我主线的结局是rank A，没和罗宾在一起的结局。<br>说到罗宾我就火大！</p><center><img src="https://s2.ax1x.com/2020/02/07/1gFblR.png"  alt="" /></center><center><img src="https://s2.ax1x.com/2020/02/07/1gFq61.png"  alt="" /></center><p>把咱女儿弄成这样你丫还想和咱女儿好上？！留你条小命就不错了！<br>就像之前有位先生/女士@幻影Locus说的，这部作品“人物比较浅显，哪些忠装反哪些反跳忠基本一眼能猜出来”，从一开始就猜到要给青梅竹马洗白，知道“黄金铠甲勇士”要跳反。<br>还有就是明明Luna都黑化了，剧情交代了魔女受迫害，Luna被背叛，还要引导玩家做好事，真的是为孩子树立正确价值观呢（具体方法就是坏事低回报，好事高回报）<br>煽情的地方也是非常唐突，母子重逢，青梅竹马重逢。剧情铺展不到位，个人感觉结局的剧情长度都有结局之前所有剧情长度的和了……<br>封面上有三个人在主线里面基本上没有什么交集。<br>空洞的人物加上支离的剧情导致这个自由度不怎么高的游戏玩起来像沙盒游戏一样。其实就算这个故事和角色形象很套路，但只要认真讲好故事，丰富形象也不失为上策。但是魔女之泉2的角色形象的饱满度和剧情的充实度实在是硬伤，导致玩起来十分膈应。<br>（以上评论仅针对主线剧情，后日谈部分也是游戏的一个亮点，但不在评论范围内）</p><p>最后祝Luna和Pieberry百年好合！</p><center><img src="https://s2.ax1x.com/2020/02/07/1gkzD0.jpg"  alt="" /></center>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>我想要知道“爱”的含义（无剧透）</title>
    <link href="/2020/01/11/%E6%88%91%E6%83%B3%E8%A6%81%E7%9F%A5%E9%81%93%E2%80%9C%E7%88%B1%E2%80%9D%E7%9A%84%E5%90%AB%E4%B9%89%EF%BC%88%E6%97%A0%E5%89%A7%E9%80%8F%EF%BC%89/"/>
    <url>/2020/01/11/%E6%88%91%E6%83%B3%E8%A6%81%E7%9F%A5%E9%81%93%E2%80%9C%E7%88%B1%E2%80%9D%E7%9A%84%E5%90%AB%E4%B9%89%EF%BC%88%E6%97%A0%E5%89%A7%E9%80%8F%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<blockquote><p>我想要知道“爱”的含义。   ——薇尔莉特·伊芙加登</p></blockquote><p>北京时间1月11日12点10分，今天老师意外的没有拖堂。</p><p>“下课，同学们再见。”听到这段话的时候我早已在教室外面，要问为什么我这么急的话，距离我订的电影开始还有40分钟，而我距离影院4.5公里。</p><p>室外温度大约6~7℃的样子，摩托车载着我在金属的河流中穿梭奔驰。尽管如此，我的手还在口袋外，操作着手机，希望能够在到达后节省一部分时间。</p><p>“没有任何一个乘客是没有必要送达的。”这是我看完电影后的想法。</p><p>扫码、打票、取票、验票、上厕所、坐好。一套动作刚刚做完，电影正好开始，没有看广告，整个影院里只有我和我的朋友，这是我人生中第一次“包场”看电影。</p><p>我之所以能这么快速地完成这些步骤，其中离不开信息的交流，可能在今天，其载体更多的是手机等电子设备。但这些东西，都是客观的，死板的数据，不值得被纪念，甚至是不值得被记录的（从个体角度）。</p><p>而《紫罗兰永恒花园外传 - 永恒与自动手记人偶》（以下简称《紫罗兰外传》）中则以“信”为载体，传达“爱”的信息。</p><p>要以商业电影的角度来看的话，《紫罗兰外传》无疑是不成功的。它缺少商业电影惯用的手段（比如说“英雄之旅”），感人的核心要点过于复杂，情感表达过于细腻收敛（前半段）。倘若将《CLANNAD》做出一部剧场版来，也很难像TV版那般煽人泪下。（个人觉得《紫罗兰（TV版）》能做成24集就好了）</p><blockquote><p>“伟大的动画，就是抹去了时间的刻度，跨越了空间的距离，始终完成了陪伴这两个字。”  ——CCTV6对本作品的评价</p></blockquote><p>是的，正是因为它不的这些特质，从而使它能被反复品味，陪伴于我们身边。在现实中能有几个人，几次机会像帆高那样率真热情地挥洒青春呢？但是我们身边却无时不刻都有他人，他人有着他人的情感，我们自己有着我们自己的情感，受限于种种原因，我们经常不能将自己的真情实感传达给别人，也就是“届不到”，所以去仔细地品味《紫罗兰外传》所想要传达给我们的关于人与人之间情感的传达方式，是很重要的。</p><p>前段时间我们语文老师说他们那个时代的人们都很浮躁，我们这个时代又何尝不是呢？功利化的价值观从一定程度上推进了社会的发展，但处于这个时代更难能稀缺的恰恰是“爱”。这种“爱”不单止爱情，它可以是“兼爱非攻”中的爱，也可以是“老吾老，以及人之老；幼吾幼，以及人之幼。”中的爱。</p><p>在本片中，我觉得艾米对于泰勒的爱就偏向于后一种。明明没有血缘关系的姐妹，却在战争中联系到了一起，最终形成了血浓于水的亲情。这一点我在以前很多观后感中都提到过，是类似于《小王子》中所说的“驯养”的关系。</p><p>刚刚也说这部作品的情感很复杂，而且很多需要自己体会的地方，请务必亲自体会！（其实是我太菜了表达不出来）</p><blockquote><p>没有一封信是不需要被送达的。 ——贝内迪克特·布卢</p></blockquote><p>在信息技术如此发达的今天，我也写过信，虽然最终因成本太高放弃了（10元/封，虽然可以寄1kg），但我相信我在信中所传达到的情感对方肯定收到了。</p><p>薇尔莉特在本作中其实不算是特别核心的人物（所以叫做外传），故事的主线也不是她，但当我看到结尾被问到 “你的幸福道路是什么？” 而回答不上来的薇尔莉特，我想到了TV版中一开始她对社长的话 “我想知道‘爱’的含义。”她是否寻找到了，其实没有那么重要，关键是她承认了自己不知道，并且在寻找。我们又是否真的了解爱呢？还是不懂装懂呢？其实这比不知道更加不妙吧（笑）</p><p><strong>总结</strong></p><p>今天考试的时候读到了铁凝的《在人民的创造中实现文学的创造》，颇有启发。</p><p>《紫罗兰外传》这部作品本身绝不是那些给人“爽”的电影，也不是为了赚眼泪的“泪腺战士”。观看时其实包含了理性于情感的复杂的认识过程。看小说、电影就是“了解各种人，熟悉各种人，了解各种事情，熟悉各种事情”的过程。而“了解”和“熟悉”不仅仅是听到新鲜的故事、掌握表象的细节，而是与人们发生思想感情的深入交流。。对文学来说，其所想表达的主题、想要传达给读者观众们的情感不止是存在于概念和观念之中，这样只是停留在了作品本身，而读者观众们自身却没有收获，其真正存在于人们之间的关系中，在我们面对“各种人们的脸”敞开心扉的时刻被蓦然照亮。</p><p>因此我还是希望大家真的仔细品味每一部温柔的作品，在这个时代，它们的存在就是一盏明灯</p><p><strong>小吐槽</strong></p><ol><li>好像我每次观后感的风格都不一样？</li><li>档期这么靠近春节好评，CCTV6吹爆好评。</li><li>薇尔莉特双马尾suki</li><li>“新时代”来了，薇尔莉特她们的生意虽然会受到打击，但我相信不会消失。（毕竟快递还是要人送的ww）、</li><li>BGM好多是TV版OST里面的老东西，由于之前经常在听所以觉得用在这里不是特别恰当。</li><li>这次写得比较急，欢迎大家来讨论~</li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>生命的联系——《我想吃掉你的胰脏》观后感</title>
    <link href="/2019/08/22/%E7%94%9F%E5%91%BD%E7%9A%84%E8%81%94%E7%B3%BB%E2%80%94%E2%80%94%E3%80%8A%E6%88%91%E6%83%B3%E5%90%83%E6%8E%89%E4%BD%A0%E7%9A%84%E8%83%B0%E8%84%8F%E3%80%8B%E8%A7%82%E5%90%8E%E6%84%9F/"/>
    <url>/2019/08/22/%E7%94%9F%E5%91%BD%E7%9A%84%E8%81%94%E7%B3%BB%E2%80%94%E2%80%94%E3%80%8A%E6%88%91%E6%83%B3%E5%90%83%E6%8E%89%E4%BD%A0%E7%9A%84%E8%83%B0%E8%84%8F%E3%80%8B%E8%A7%82%E5%90%8E%E6%84%9F/</url>
    
    <content type="html"><![CDATA[<blockquote><p>内涵剧透</p></blockquote><h1 id="评论部分"><a href="#评论部分" class="headerlink" title="评论部分"></a>评论部分</h1><p>以下内容是我看到mal上面的一个评论，我觉得和我想法很像就翻译了一下（渣翻<br>翻译自：<a href="https://myanimelist.net/reviews.php?id=299818">https://myanimelist.net/reviews.php?id=299818</a></p><p>《胰脏》有两个主题。第一个主题由该片女主角樱良的日记(原文是dairy，我怀疑他拼错了)阐释，“向死尤生(Living with Dying)”。樱良身患胰脏病并且会最终导致寿命变短。正如所有人都会预料到的一样，她非常害怕。她努力地与她的情况妥协并且像她以前一样做个无忧无虑的女孩来度过余生。生命总有尽头，不幸的是，樱良的寿命会比大多数人的短。尽管没有人知道她何时会死——就连她自己也是。在病魔夺走樱良的生命之前，17岁的她在街上遇刺身亡。该片无疑是将樱良设定成突然死亡，这个事件甚至让我有点儿防不胜防。该片的第一个场景就是樱良的葬礼，因此，如同樱良一样，观众们本应在进入故事的时候接受她的死，但是，如同樱良一样，我们在努力抗争死亡。无论如何，死亡总是突然的，令人恐惧的，悲伤的。该片处理樱良死亡的方式对观众来说，应该是显而易见且容易理解的，但当你看到它的到来，它任然会以某种形式然你防不胜防，如同樱良一样。《胰脏》这部影片将樱良的情感编排进观感中并且使观众与她的情况产生共鸣。如果电影做到了这一点，观众们在结尾会和春树一样抽泣。</p><p>没有春树，《胰脏》这部影片会变成一次空洞的体验。樱良的故事情感也许很强烈，但是正是春树的故事才真正感人。在遇到樱良之前，春树一直活在壳里。他没有个性，没有情感，他将自己与外面的世界隔离。樱良是第一个向他胜出橄榄枝的人，在春树于樱良相处的过程中，尽管有些不情愿，他慢慢地开始向她打开心扉。这是他人生中第一次，与其他人产生联系。春树知道樱良不会长久地在他身边，但是就像其他人一样，他无法应对樱良地离去。在她死之后，春树又开始封闭自己，但是他不再是遇到樱良之前地那个他了。春树开始意识到独自一人是多么困难并开始追寻其他人际关系。尽管樱良走了，她在周围人身上留下的影响会一直留存，尤其是对春树来说。春树就像一个代替观众的角色，因为他在电影开始时十分朴素，无特点，观众也容易带入到他的角色中。在该片的高潮部分，春树在观众旁痛哭流涕，加强了他于观众的共同情感，使得“人与人之间的联系的重要性”这一主题深入人心。</p><p>以下内容为原创</p><p>“每一天的价值都一样，不管做了什么，今天的价值都不会变，这种日常的点滴对我来说就特别开心”——樱良<br>正如前面所说，樱良并没有克服对死亡的恐惧，但她找到了缓解的方法——过好每一天，享受日常的点滴。这种简单的想法就是主导她与病魔作斗争的原因，在很多情况下，我们会忽略甚至是舍去这点。<br>《小王子》中曾提到“如果你对大人说，我看到一栋用玫瑰色的砖盖成的漂亮的房子，它的窗户上有天竺葵，屋顶上还有鸽子，他们怎么也想象不出这种房子有多好。必须对他们说，我看见了一栋价值十万法郎的房子，那么他们就惊叫道：‘啊！多么漂亮的房子啊！’”<br>所谓真的生命，就是像樱良这样，或者像《小王子》中提到的这样去享受日常的点滴。人们总是在年轻的时候认为时间很多，大肆挥霍，而到了老年又认为自己时间很少，做不成什么。<br>樱良的这种生活方式，正是她人格魅力的所在。</p><p><img src="http://bubbleioa.top/wp-content/uploads/2019/08/xwz.png"><br><img src="http://bubbleioa.top/wp-content/uploads/2019/08/xwz2.png"><br><img src="http://bubbleioa.top/wp-content/uploads/2019/08/DPlayer-4.png"><img src="http://bubbleioa.top/wp-content/uploads/2019/08/DPlayer-3.png"><img src="http://bubbleioa.top/wp-content/uploads/2019/08/DPlayer-2.png"><br>在读樱良遗书的这段演出中，内容无疑是致敬了《小王子》，因此当樱良说到“但是我们的关系并不是恋爱和友情这种如此简单的东西”的时候，我自然想到了小王子与狐狸，他们之间关系就是“驯养”，所谓“驯养”，就是创造关系。</p><p>“对我来说，你无非就是个男孩，和其他千千万万个男孩没有什么区别，对你来说，我也只不过是只狐狸，和其他千千万万只狐狸一个样，但如果你驯养了我，我们就会彼此需要，你对我来说，将是独一无二的，我对你来说，也是独一无二的。”——狐狸</p><p>对于樱良和春树来说，他们的关系也是如此。樱良教会了春树如何与他人创造关系，而春树陪樱良平凡地度过了余生，他们彼此是独一无二的。</p><h1 id="吐槽部分"><a href="#吐槽部分" class="headerlink" title="吐槽部分"></a>吐槽部分</h1><p>mal评分：8.43<br>bgm评分：7.0<br>看来国内并不怎么习惯这个故事的样子，也许是文化背景的不同吧。但是看差评大多数是被剧透了的（包括我在百度上搜该片，在联想搜索上就剧透除了一个伏笔orz）</p><p>《胰脏》的音乐表现算是及格水平，并没有《前前前世》或者《打上花火》那样的传唱曲，但是在剧情方面很能扣人心弦，伏笔埋得很多（有长有短），像是主角的名字啦，还有樱良包里的药。</p><p>角色成长也很明显，尤其是春树，从一开始的封闭到最后的主动与他人交流，在这个悲伤的故事中也微微闪耀着光芒。</p><p>下面说说问题</p><ol><li>其实该做的角色出奇的少，基本上就是男女主之间的互动，但并不枯燥。</li><li>观感上时而露骨时而含蓄。樱良前男友突然出现，樱良突然被刺死。并不是这样做不好，但是并不是所有观众都能接受。</li><li>死亡原因不是很能接受，也许突然死亡能够凸显出作品主题，但是哪怕是被车撞死也好啊，因为刺死这种有主观恶意的东西突然发生在这么美好的女主身上我真的很不忍心。</li><li>不知道50多分中的那段让人dokidoki的场面电影院有没有，有的话就是我亏了QAQ（话说这是问题吗www</li><li>我对突兀的死亡原因的理解是：因为遇刺是每个人都可能发生的，所以每天都可能是最后一天，像樱良这样的乐观去活出每一天才是对生命的享受，每个人都要像樱良这样，而不是因为她时日不多（与kino交流的时候想到的）</li></ol><p>有机会的话准备二刷，多谢款待！</p><p>主观综合评分：8.0/10（强烈推荐）</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>2020届理网假期作业</title>
    <link href="/2019/07/26/2020%E5%B1%8A%E7%90%86%E7%BD%91%E5%81%87%E6%9C%9F%E4%BD%9C%E4%B8%9A/"/>
    <url>/2019/07/26/2020%E5%B1%8A%E7%90%86%E7%BD%91%E5%81%87%E6%9C%9F%E4%BD%9C%E4%B8%9A/</url>
    
    <content type="html"><![CDATA[<p>[pdf-embedder url=”<a href="http://bubbleioa.top/wp-content/uploads/2019/07/FakeHoliday.pdf&quot;]">http://bubbleioa.top/wp-content/uploads/2019/07/FakeHoliday.pdf&quot;]</a><br>7.27 第3次修订<br>最新修订部分：生物作业</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>我的人生时方向不明的迷途——《十字路口》书评</title>
    <link href="/2019/06/15/%E6%88%91%E7%9A%84%E4%BA%BA%E7%94%9F%E6%97%B6%E6%96%B9%E5%90%91%E4%B8%8D%E6%98%8E%E7%9A%84%E8%BF%B7%E9%80%94%E2%80%94%E2%80%94%E3%80%8A%E5%8D%81%E5%AD%97%E8%B7%AF%E5%8F%A3%E3%80%8B%E4%B9%A6%E8%AF%84/"/>
    <url>/2019/06/15/%E6%88%91%E7%9A%84%E4%BA%BA%E7%94%9F%E6%97%B6%E6%96%B9%E5%90%91%E4%B8%8D%E6%98%8E%E7%9A%84%E8%BF%B7%E9%80%94%E2%80%94%E2%80%94%E3%80%8A%E5%8D%81%E5%AD%97%E8%B7%AF%E5%8F%A3%E3%80%8B%E4%B9%A6%E8%AF%84/</url>
    
    <content type="html"><![CDATA[<h1 id="原作CM"><a href="#原作CM" class="headerlink" title="原作CM"></a>原作CM</h1><center><iframe src="//player.bilibili.com/player.html?aid=4425433&cid=7169218&page=1" width=745 height=545 scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe></center><h1 id="插曲"><a href="#插曲" class="headerlink" title="插曲"></a>插曲</h1><p>[audio flac=”<a href="http://bubbleioa.top/wp-content/uploads/2019/06/03.-%E3%82%AF%E3%83%AD%E3%82%B9%E3%83%AD%E3%83%BC%E3%83%89.flac&quot;/]">http://bubbleioa.top/wp-content/uploads/2019/06/03.-クロスロード.flac&quot;\]</a></p><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><h2 id="由来"><a href="#由来" class="headerlink" title="由来"></a>由来</h2><p>《十字路口》是由人气动画导演新海诚与日本教育机构Z会合作，制作的一部应援日本国立大学前期考试的考生们的广告动画。<br>而同名小说《十字路口》则是由桐山成人根据此改编的。</p><p>官方网站:<a href="https://www.zkai.co.jp/home/crossroad/">https://www.zkai.co.jp/home/crossroad/</a></p><h2 id="网络评价"><a href="#网络评价" class="headerlink" title="网络评价"></a>网络评价</h2><p><a href="https://movie.douban.com/subject/25834500/">豆瓣（原作）</a>：8.0/10.0<br><a href="https://bangumi.tv/subject/97477">Bangumi（原作）</a>：7.2/10.0<br><a href="https://bangumi.tv/subject/114209">Bangumi（小说）</a>：7.5/10.0<br><a href="https://www.imdb.com/title/tt7386590/">IMDb（原作）</a>：7.5/10.0</p><h2 id="一言"><a href="#一言" class="headerlink" title="一言"></a>一言</h2><blockquote><p>我既不期望获得幸福，也不需要什么信誓旦旦的约定。<br>我自由其他期许，希望有朝一日能够远行。<br>奔赴更加飘渺的远方。</p></blockquote><h2 id="剧情简介"><a href="#剧情简介" class="headerlink" title="剧情简介"></a>剧情简介</h2><p>“也不是为了活的幸福，也并非想要明确的约定。比起那个来说，遥远地方的某处，是我们向往前去的地方。”无论身处关东还是关西，无论是喧嚣的繁华都市还是僻静的海港小镇，都有着普普通通的少女，为了各自心中的理想而努力。女孩海帆和男孩翔太从未忘却心头的理想，也知晓前路的曲折与艰辛。他们通过Z-KAI的通信教育在知识的海洋中破浪前行，享受着每一次好成绩取得时所带来的喜悦，惴惴地等待着最终考验的到来，又沉着专注地和万千学子们投入命运的战斗中去。十字路口，他们没有彷徨和失落，因为前方的灯塔早已照亮人生的方向…… </p><hr><blockquote><p><strong>！以下内容含有轻度剧透！</strong><br>为了叙述方便，下将“日本国立大学前期考试”和“日本国立大学考试”统称为“日本高考”</p></blockquote><h1 id="人物"><a href="#人物" class="headerlink" title="人物"></a>人物</h1><blockquote><p>由于没有比较完备的中文百科，人物名字可能会省略或者用关系代替（其实还是懒不想从原文找）</p></blockquote><table><thead><tr><th>人物</th><th>图片</th><th>评论</th></tr></thead><tbody><tr><td>翔太</td><td><img src="http://bubbleioa.top/wp-content/uploads/2019/06/%E7%BF%94%E5%A4%AA.png"></td><td>一名生活在东京的普通男高中生，生活在单亲家庭中。因不想让母亲太累而坚持周末兼职，为人和善深受学弟学妹的喜爱。</td></tr><tr><td>海帆</td><td><img src="http://bubbleioa.top/wp-content/uploads/2019/06/%E6%B5%B7%E5%B8%86.png"></td><td>一名生活在姬座五岛（虚构）的普通女高中生，在高三下学期开始前偶然确定了自己的方向——东京大学，为人认真，常被叫做“认真四眼”。</td></tr><tr><td>海帆父亲</td><td>暂无</td><td>一名普通的父亲，在本作中主要体现“笨拙的父爱”。</td></tr><tr><td>翔太母亲</td><td>暂无</td><td>单亲家庭的母亲，因为压力大经常酗酒，但自从让儿子辞去兼职后变得更加成熟。</td></tr></tbody></table><h1 id="核心价值-amp-个人影响"><a href="#核心价值-amp-个人影响" class="headerlink" title="核心价值&amp;个人影响"></a>核心价值&amp;个人影响</h1><p>本书分两条线主要讲述了两名日本高中生在高三下学期的努力备考的故事，虽然是写日本高考的内容，但作者却把笔墨跟多地放在了学习生活过程中所面临的种种问题。</p><p>由于书中描绘地是主人公高三下学期地学习生活，其实对于我这个“准高三”的学生来说还是很有感触的。它不是那种励志小说。比描写如何努力学习考上好大学，它所讨论的更多的是人生道路的选择以及这个选择对于人与人之间关系的影响。它的结局甚至是开放的，并没有讲明考试结果。这种核心反而使得本书比那些励志鸡汤高了一个层次，对于正在迷途的十字路口的“准高三们”，有更大的指导意义。</p><p>我曾经以为“日本高中生”都很闲,有各种各样的高中生活。<br>但我可能见识太少了。在读此书的时候，由于翻译得十分地道，我有时甚至会忘记自己在看一个讲述“日本高考”的小说。<br>看到诸如“文言文很难。”、“英语阅读靠语感，要多做题。”之类的话，总能会心一笑，心想——原来即使国家不同，所奋斗过的青春是一样的啊。</p><blockquote><pre><code>目光突然停留在某个答题栏上。我重新检查起答题纸。阅读理解的最后一问，英译日。需要翻译的句子被下划线标注了出来，只是文章的后半段的某句话，应该体现了文中的中心思想。My life is at a crossroads.我的译文是“我的人生是方向不明的迷途”。阅卷老师给我打了个叉。之不是重点，重点是他还用红笔在旁边批注道：**“翻译得很美，不过意思错了。这种情况下crossroads的翻译应该参考上下文的语境……”**我又用目光扫过原文，一个字一个字地咀嚼划线地英文，然后再看向写有批注地答题栏。……翻译得很美。我又重复了一遍刚才的举动，从原文看到答题栏。……翻译得很美。我又看了第三遍，第四遍，直到千帆来叫我吃晚饭。他还是没敲门就进来了，可奇怪的是我这次没有发脾气。……他说我翻译得，很美呢。</code></pre></blockquote><p>这个片段可以说是我对这本销售印象最深刻地部分，当时看的时候曾几次放下书，激动地用脚踢被子。读完后躺在床上，竟久久不能入睡。我当时在想，一个陌生人（上文中的卷子是寄给教育季候批改的）的无意的话语，居然能如此深刻地影响到别人。海帆之后的备考道路上，有很大一部分的动力是靠这短小的话语支撑的。主人公开始相信自己有学英语的天赋并为之努力，即使失意一时也能迅速恢复过来。</p><p>但仔细想想，其实我的身边也有很多类似的话语。记得我上初中的时候，我们英语老师要我在全班面前朗读课文，当时我早有准备，就这样读了下来，老师当着全班同学的面说：“hzy同学发音很好听，以后能去当播音员。”</p><p>她说我发音很好听呢qwq，在之后的学习英语的道路上，我也很自信地去读课文，并且给了我能学好英语很大的自信。</p><p>还有一点很打动我的是，日本高考也是牵动全家的，这一点无疑是和我们国家十分相似的。<br>在海帆决定要考东京大学的时候，家人表面上都很支持，但谁的心中都明白，如果考上了，就意味着家人要彼此分离。但这份感情，只有海帆的妹妹——在读二年级的千帆表达了出来。<br>而翔太这边，由于是单亲家庭，为了为母亲缓解经济上的压力，即使到了高三还坚持去兼职。母亲为了自己孩子的前程也不断地透支着自己的健康努力工作。直到翔太打工的店长说：“我觉得你关心母亲的方式有点不太对。”这背后的意思其实很简单，作为高三的学生，马上就要上大学走向社会，能陪在家人旁边的时间已经不多了，对于母亲来说，此刻最想要的其实是儿子的陪伴和专心地学习吧。</p><p>其实我对这部作品感触这么深还有一点原因就是有各种既视感吧，上面提到的的英语是一部分。<br>还有一些比如说翔太高中棒球生涯的退役典礼，我也想和其他OIer一起这样搞一个退役典礼啊！各种什么“I AK IOI”之类的233<br>还有就是海帆独自前往东京考试的时候，那心里活动简直和我去参加APIO的时候一模一样啊qwq，唯一的区别是我借助智能手机避免了很多不必要的麻烦，比如没有迷路，吃外卖，移动支付等等。心疼海帆QAQ</p><p>由于时间不够就写到这里，其实还有很多想写的。而且文章组织地有点乱，见谅啦~<br>向着我的高三，出发！</p><h1 id="吐槽"><a href="#吐槽" class="headerlink" title="吐槽"></a>吐槽</h1><ol><li>Z-Kai有没有中国高考的服务啊qwq，我想报名xd</li><li>为什么这种小说都有人把它当成爱情小说来看啊！</li><li>感觉自己好不懂事啊。</li></ol><h1 id="主观评分"><a href="#主观评分" class="headerlink" title="主观评分"></a>主观评分</h1><ul><li>真挚的感情和内涵 </li><li>后期配角的成长没有体现略显遗憾</li><li>篇幅较短很多转变无法详细叙述</li></ul><p>个人主管评分：8.2/10.0（强烈推荐）</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>为什么我 退 役 了 还 要 被 迫 害 啊！！</title>
    <link href="/2019/06/01/%E4%B8%BA%E4%BB%80%E4%B9%88%E6%88%91%20%E9%80%80%20%E5%BD%B9%20%E4%BA%86%20%E8%BF%98%20%E8%A6%81%20%E8%A2%AB%20%E8%BF%AB%20%E5%AE%B3%20%E5%95%8A%EF%BC%81%EF%BC%81/"/>
    <url>/2019/06/01/%E4%B8%BA%E4%BB%80%E4%B9%88%E6%88%91%20%E9%80%80%20%E5%BD%B9%20%E4%BA%86%20%E8%BF%98%20%E8%A6%81%20%E8%A2%AB%20%E8%BF%AB%20%E5%AE%B3%20%E5%95%8A%EF%BC%81%EF%BC%81/</url>
    
    <content type="html"><![CDATA[<p>本来别人都有两天假，我上午下午都在教室自习。<br>晚上终于有时间来解决VPS被ban的问题，然后还要被家长说：“都不学奥赛了还玩什么电脑。”（咱语气轻了点，实际上……自己脑补）<br>咱肥宅其实也不追求什么，只是希望能和有共同兴趣的人在一起，为之做点什么或者一起做点什么，聊下天，就已经心满意足了。<br>其实要是咱和大家@GoldenPotato@HigHwind@q234rty @void *swk = Kino.NvZhuang(); @Rye_Catcher @Traceback  在同一个班，咱再有个女朋友，还要什么智能设备？</p><p>但咱也知道这是不现实的，所以用QQ（或其他方式）来联系到一起，用猛男番和galgame来补充moe能量。<br>若是这点小小的愿望都无法满足的话，咱真的要怀疑这个世界了。别人放假比你多，学习比你强，精神生活上比你丰富，以后走到社会上比你优秀……（没错，就是指CDQZ的dalao）</p><p>咱其实不赞同“为了以后的美好而牺牲中学时代的一切”。<br>这和搞科技和实体经济是一个道理，你能说我们国家为了未来的经济更加繁荣，所以现在大力搞科研，而对实体经济不闻不问吗？</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>2019届网络直播班毕业交流</title>
    <link href="/2019/05/28/2019%E5%B1%8A%E7%BD%91%E7%BB%9C%E7%9B%B4%E6%92%AD%E7%8F%AD%E6%AF%95%E4%B8%9A%E4%BA%A4%E6%B5%81/"/>
    <url>/2019/05/28/2019%E5%B1%8A%E7%BD%91%E7%BB%9C%E7%9B%B4%E6%92%AD%E7%8F%AD%E6%AF%95%E4%B8%9A%E4%BA%A4%E6%B5%81/</url>
    
    <content type="html"><![CDATA[<blockquote><p>由于二维码不是直接跳转至此页面，请保存此链接</p></blockquote><p><strong>交流贴使用指北</strong><br><a href="http://bubbleioa.top/wp-content/uploads/2019/05/%E4%BA%A4%E6%B5%81%E8%B4%B4%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8C%97.doc">点击查看</a></p><p><strong>如何更改头像？</strong><br>访问<a href="http://cn.gravatar.com/">Gravatar官网</a><br>使用邮箱注册账号并上传你的头像，之后在发表评论时填入相应邮箱地址即可。</p><p><strong>如何发表图片？</strong><br>访问<a href="https://sm.ms/">sm.ms</a><br>上传你的图片后你会得到一个链接，该链接即为你要发布的图片。<br>发布评论时只需如此调用<code>![](图片链接)</code></p><p><strong>更多操作</strong><br>评论支持<a href="https://www.runoob.com/markdown/md-tutorial.html">MarkDown语法</a>，这里有一份稍微<a href="https://www.jianshu.com/p/191d1e21f7ed">简化的教程</a>。如果你不确定评论发出来会是怎么样的，这里有款<a href="https://www.mdeditor.com/">在线的MarkDown编辑器</a>可以预览你的效果。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>来自多彩世界的OI</title>
    <link href="/2019/05/22/%E6%9D%A5%E8%87%AA%E5%A4%9A%E5%BD%A9%E4%B8%96%E7%95%8C%E7%9A%84OI/"/>
    <url>/2019/05/22/%E6%9D%A5%E8%87%AA%E5%A4%9A%E5%BD%A9%E4%B8%96%E7%95%8C%E7%9A%84OI/</url>
    
    <content type="html"><![CDATA[<h1 id="涟漪"><a href="#涟漪" class="headerlink" title="涟漪"></a>涟漪</h1><p>2015年5月21日（现在不可以查了，还好我记得这个日子），我注册了一个B站账号，是被拜年祭吸引过来的，这也注定了我是对睿站的（当时应该还是逸站）MAD是最感兴趣的，后面慢慢了解到有个公司叫做Adobe，有个软件叫AE，当时硬是靠速龙Ⅱ来学的，现在想来都可怕XD。<br>在AE里我接触到了代码：也就是表达式。当时真的觉得很神奇，一行短短的代码就能让MAD栩栩如生，当时还觉得那东西很难233</p><p>没过多久，睿站的第二届弹幕（也是最新一届）开始征稿，毫无经验的我也凑热闹参加。当时弹幕多到我速龙Ⅱ的电脑都渲染不出来（可以看2P的录屏，明显延迟），链接在这：<a href="https://www.bilibili.com/video/av2594281">https://www.bilibili.com/video/av2594281</a></p><p>当然，冠军是真的触，直接整出一个MAD来：<a href="https://www.bilibili.com/video/av2739681/">https://www.bilibili.com/video/av2739681/</a><br>真的是太强啦！%%%</p><p>在文化课的学习过程中，这些小小的代码，在灰色的视界上点缀了些许彩色。</p><h1 id="斑斓"><a href="#斑斓" class="headerlink" title="斑斓"></a>斑斓</h1><p>2017年11月24日，我在PTA上提交了第一份代码，开始了我的OI之旅。初识OI并没有想象中的那么浪漫，就是抱着渣男的态度觉得随便试试就好。这个态度在接下来的半年里慢慢改观，然而这太慢了，以至于原本不多的时间又被截去了一部分。</p><p>停课总是很快乐的，无论是在别人放假的时候还是在别人上课的时候。寒假里停了15天，当时还是萌新（虽然现在升级为蒟蒻了），感觉学得还很轻松，晚上整个学校就我们几个学奥赛的住寝室，很恐怖QAQ，但是，yy在下铺打开电脑，播放《寻梦环游记》，一整个寝室的人都凑过来看，我在上铺，很冷不想下去，于是就看起《序列之争》来了233.现在想起来，那段时光是特别单纯而又幸福的，没有被大佬锤的压力，没有升学的烦躁。</p><p>平常的奥赛学习可以认为是没有作用的（具体可以看<a href="http://bubbleioa.top/archives/891">这篇文章</a>），只是在地上松土，为了能在停课的时候更好的播种。</p><p>就这样度过了半年的空白区，到了暑假，期间也没有什么特别值得记录的事情发生，只是有一个学长省选遗憾地没选上（学OI的时候疯狂炉石），那是JXOI最后一次由可怜出题，同时也是竞争最后一次那么弱的。</p><p>夏日的回忆，没有小姐姐的泳装（其实有，在《ISLAND》里233），只有OI。这段时间去了常州培训，具体可以看<a href="http://bubbleioa.top/archives/113">这篇文章</a>，我只记得我们被锤爆，然后回来发奋图强，但是有一个人因为玩游戏被教练T了，可能是他玩的游戏并不够OI吧。</p><p>然后就是突然理解到了clj所说的学了OI不需要女朋友，因为OIer都把全部的爱投入到了OI上，我真的从未感受过哪门学科的学生对该门学科如此热爱的，出题目，讲课，开发OJ，开发评测软件，写书……大家都努力地想要让OI变好，泪目。</p><p>然后又滚回来上了一个月文化课，在常州意识到差距之后，我们那个时候真的很着急。我当时正好在追《轻羽飞扬》，看了之后结合自己的感受黑化了一会（无能泄愤），然后在Bangumi上留下了<a href="http://bangumi.tv/blog/281939">黑历史</a>（还是首评）QAQ，也特别感谢Bangumi上的各位的批判，后来也一个个认了错（或者是解释了一下），以后应该就不会有这种事了（吧）。</p><p>NOIP2018前又停了1个月的课（我们强行要求的），之后来看，这个选择正确的，因为2018年JX竞争突然猛烈了许多，如果不是这次停课，我们很可能全军覆没。但是这次停课有人也很聪明（就是再说Linz），把刷题的中心从我们校内OJ转移到了Luogu，可以更好地于外校对比，刷题量也比我们多，最后的NOIP也是考得最好的。</p><p>大概是重阳节的时候我们在洛谷上举办了一个公开赛，现在看来，洛谷的审核是真的松，把好多大佬都坑了QWQ，<a href="https://www.luogu.org/contestnew/show/11523">具体请看这里</a>。<br>这里有个小插曲，就是当时我们全校停电，出的题目很坑，所以很多人来问，然后我就要了班主任手机开热点答疑，但是没人问我出的题目，很崩溃orz</p><p>NOIP炸了，本来其实可以上400的，最后只有300多一点，没看清数据范围是一方面，平时题解看多了也是锅。具体可以看<a href="http://bubbleioa.top/archives/581">我的游记</a>，当时如果能多考一点，结局会不会不一样呢？我不敢断言。</p><p>之后的寒假我们就兵分两路，Linz和教练去了WC，我还有其他4人去了<a href="http://bubbleioa.top/archives/629">郑州NOI导刊</a>。</p><p>回来后我犯了一个错误，就是和其他学生一样，平平淡淡地过完了一个寒假，没有碰OI。期间只和Linz等人开黑打CF div2 然后被Hack到死。<br>开学后，Linz带着其他几个人，一起退役了。其实这也并不奇怪，毕竟大家都被锤爆了，他们很理智地分析了自己和别人地差距，然后选择了放弃，我按理来说不应该责怪他们，但是……Linz你个烂人杰啊！请看Linz<del>令人羞耻的</del><a href="http://bubbleioa.top/archives/908">退役记录</a>。这只OIer是真的一点也不可爱，写退役记录也写得跟流水账似的，你不会写你可以“嘤嘤嘤”啊。</p><p><del>嘤嘤嘤……</del></p><p>然后就是我和机房的独处时光了~，省选前一个月，我确保每天都有3个小时的OI时间，但是我又犯了一个错误，就是看题解太多，想得太少，这也导致了我省选T3没写出来，虽然确实我们省没人写出来，但是我觉得我当时思路的方向是对的，可能就是少那么最后几步。</p><p>接着到来的省选在这里都有<a href="http://bubbleioa.top/archives/927">记录</a>，其实除了80pt挂成40pt很可惜外，没有什么无法释怀的，hwc都没进队，而且进队的那些队爷没有一个是比我花的时间少的，我又有什么好抱怨的呢？这只是单纯的奇迹没有发生罢了。</p><p>在这段学习OI的日子里，由最初的认识到OI可以保送的光鲜外表，再到后来慢慢了解到她的真实、她的的残酷，喜欢的心情从未减少。<br>如果再给我一次选择的机会，我还是会选择接触OI，多亏了OI，让我的黑白的高中生活多了些斑斓的色彩。</p><h1 id="多彩世界"><a href="#多彩世界" class="headerlink" title="多彩世界"></a>多彩世界</h1><p>退役后就感觉无比轻松，APIO就当作是OI生涯的退役之旅吧，但是没想到这次旅途，给我带来了一个多彩的世界。<br>具体请看<a href="http://bubbleioa.top/archives/936">这篇文章</a>。</p><hr><p>等等，还没有结束呢！</p><h1 id="O-I-人（梗来自请APIO2019主持稿，画面自行脑部）"><a href="#O-I-人（梗来自请APIO2019主持稿，画面自行脑部）" class="headerlink" title="O I 人（梗来自请APIO2019主持稿，画面自行脑部）"></a>O I 人（梗来自请APIO2019主持稿，画面自行脑部）</h1><p><a href="http://m-sea-blog.com/">M_sea</a>：祝CF上蓝！<br><a href="http://www.yihan.ac.cn/">Yijan</a>：祝考上CDQZ！<br><a href="https://www.goldenpotato.cn/">GoldenPotato</a>：OIer是不会被打倒的！话说你们学校机房真的是豪华<br><img src="http://bubbleioa.top/wp-content/uploads/2019/05/psb.jpg"><br><a href="http://www.cnblogs.com/Rye-Catcher">RyeCatcher</a>：恭喜SM2过了！话说新加坡那边的大学也有ICPC吧xd<br><a href="https://www.hh12.cn/">HigHwind</a>：队爷%%祝THUSC&amp;NOI2019 RP++，什么时候有机会再来颓War3吧~<br><a href="https://oi.yuyuko.cc/">kririae</a>：虽然现在您不认识我，但是AE+OI+GalGame，咱们匹配度很高啊！<br><a href="https://www.luogu.org/blog/ShadowassIIXVIIIIV/">Shadowice1984</a>：神仙加油！退役了文化课上也不要输啊！<br><a href="http://www.cnblogs.com/">星星之火</a>：您是不是团委的呀（我在我们学校也是个团委委员）<br><a href="https://www.cnblogs.com/AlenaNuna/">AlenaNuna</a>：明年加油！明年再当一次主持人然后在Au那一栏里念出自己的名字。<br><a href="https://www.luogu.org/space/show?uid=91499">Linz</a>：这次不会输给你了。<br><a href="https://www.luogu.org/space/show?uid=96570">Steve_braveman</a>：潮学是啥？（狗头）<br><a href="https://www.cnblogs.com/butterflydew/">ButterflyDew</a>：您是让我醒悟，认识到自己是多么蒟蒻的OIer<br><strong>以下OIer由于某些原因找不到合适的链接（有的甚至连昵称都不知道，所以用首字母缩写）</strong><br>cyc：羡慕不用学导数，当然抛开分数不说，知识本身还是挺有趣的。<br>hjm：努力也要适度哦，主持的中场就不要写作业了吧ww<br>zzh：APIO2019主持人团队中唯一拿牌了的%%%<br>hxf：话说您学校的OJ为什么老是挂，怕不是您推荐给太多的人用了233</p><h1 id="妙妙屋"><a href="#妙妙屋" class="headerlink" title="妙妙屋"></a>妙妙屋</h1><ol><li>之前想过立下毒誓“没进省队就女装”，脑补了一下发现有一个变态在镜子里。</li><li>《碧浪航线》有一个绊爱联动的活动是要点一个格子，周围反转，要总和非负（当然越大越好），然后就写了一个dfs，后面想到，这种东西是固定的，直接上网搜不就好了么xd</li><li>主持的时候把莒看成了营，我谢罪。</li><li>之前把电脑装成Ubuntu的然后又装回Windows，真香！</li><li>颓游戏的时间很少，颓网页的时间很多。Chrome=娱乐工具说成立。</li></ol><h1 id="给学弟学妹们的建议（如果有学妹的话）"><a href="#给学弟学妹们的建议（如果有学妹的话）" class="headerlink" title="给学弟学妹们的建议（如果有学妹的话）"></a>给学弟学妹们的建议（如果有学妹的话）</h1><ol><li>不要颓废！不要颓废！不要颓废！（说了和白说一样）</li><li>如果要冲省队的话，我们学校停课时间不够，至少要4个月（除去假期）</li><li>从开始学的那一刻起，你们的时间就不多了。</li><li>多于外界交流！多去参加活动，这次的APIO没有参加真的有点可惜（话说APIO的要求是啥）。</li><li>不要出毒瘤题，不要学lxl出题！</li><li>少看题解，但是如果一道题看了1个小时还做不出来，赶紧看题解切了，然后加入到你的收藏夹里，定期抽出来再做一遍。</li><li>多打比赛，CF，洛谷（其实有时候洛谷会有坑）都是很不错的。</li><li>写博客，博客是你记录自己学习的地方，同时也是你和其他OIer交流的窗口。</li><li>出去培训其实有利有弊，选好去哪很重要。</li><li>欢迎补充……</li></ol><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>退役啦！！！我终于可以<del>打GalGame，学AE</del>狂补文化课了。以后大学也有了大致方向，按照专业排序的话大概就是：CS&gt;软件工程=人工智能吧，ICPC还要看选不选的上校队。</p><p>愿每个OIer都被温柔以待。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>《一男两制》——友情、爱情以及LGBT</title>
    <link href="/2019/05/22/%E3%80%8A%E4%B8%80%E7%94%B7%E4%B8%A4%E5%88%B6%E3%80%8B%E2%80%94%E2%80%94%E5%8F%8B%E6%83%85%E3%80%81%E7%88%B1%E6%83%85%E4%BB%A5%E5%8F%8ALGBT/"/>
    <url>/2019/05/22/%E3%80%8A%E4%B8%80%E7%94%B7%E4%B8%A4%E5%88%B6%E3%80%8B%E2%80%94%E2%80%94%E5%8F%8B%E6%83%85%E3%80%81%E7%88%B1%E6%83%85%E4%BB%A5%E5%8F%8ALGBT/</url>
    
    <content type="html"><![CDATA[<blockquote><p>包含大量剧透，若不介意的话可以继续阅读主题部分，但还是建议去看看原作，篇幅不长，大概一个多小时就能看完。</p></blockquote><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>首先推荐一个MAD：<a href="https://www.bilibili.com/video/av17687636/">av17687636</a></p><p>其实我早就知道了这部漫画，一直没看，究其原因还是以为这是一部女装Yooo卖腐向的作品，但经过一个up主的吐槽后才知道原来并没有那么简单。（至少看完我是没弯的，反而给我带来了更多思考）</p><p>原作连载于2010-2014年，不算是新作，但放在今天这种把伪娘当成商业元素的业界来看，它还是一股清流的。</p><p>这篇文章的观点注定很独特，至少是网上其他地方没有的（有的话我也不会想再写一篇了），可能部分读者不能接受该文章的某些观点，跳过即可。</p><h1 id="主观评价"><a href="#主观评价" class="headerlink" title="主观评价"></a>主观评价</h1><p>本来这点要放到最后的，但是由于种种因素，还是决定放前面来。</p><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ul><li>较为丰富的人物形象</li><li>清新的画风</li><li>细腻的情感表达</li><li>值得思考的主题</li></ul><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><ul><li>没有配音！！（可能漫画说这个有点奇怪，但是你看了就知道我为什么这么说了233）</li><li>篇幅过短导致了很多问题（下面会说）</li><li>全员女装的设定导致很多人被劝退（比如说我）</li><li>国内汉化杂七杂八，同一个地方看的却是不同的汉化组，看的很难受（至少我是这样的）</li></ul><h2 id="评分"><a href="#评分" class="headerlink" title="评分"></a>评分</h2><p><strong>7.3/10</strong> 值得一看</p><h1 id="主题部分"><a href="#主题部分" class="headerlink" title="主题部分"></a>主题部分</h1><p>正如标题所说，我个人把这部作品提取出了3个主题。看得出来漫画作者其实有其他想表达的东西，比如说社会的阶级，权力以及各阶级其实都有自己所面临的挑战等等，但由于漫画篇幅过短，这些东西其实根本没有去细讲，所以就略过了。</p><h2 id="友情"><a href="#友情" class="headerlink" title="友情"></a>友情</h2><p>无论是在气氛逐渐变奇怪之前还是之后，友情都是本作一直在讨论的主题。<br>在动漫之家上，你可以看到吐槽上有这么一些tag<br>“这就毕业了么（哭”“有些感动，泪目”“意义深刻，感动人心””果然朋友很重要啊”“有朋友真好呢！”<br>B站评论“看了之后花了一下午补漫画，好感动，刚刚毕业，朋友间确实要多联系”</p><p>在第15话的结尾有这样一句话“朋友。这是在装饰着名为‘女装’的虚假世界中得到的、一生的宝物”（这里可以看出讲的其实是友情，而且女装这件事其实又具有了一层象征含义）</p><p>而本作的友情还是更特殊的——校园时代的友情。<br>无论是愁和葵一起学习，还是大家一起去救冬麻。尽管出发点不同，但是最后都会变成一种没有功利的，非世俗的行为。而这种行为的内驱力就是友情。包括前半部分愁对椿的憧憬，其实在现实生活中也屡见不鲜。其实这种憧憬说白了就是想要和优秀的人在一起，想和他交朋友的这种感情，这也是后面椿不再负责愁后，愁决定成为辅导员的原因。</p><p>这里有一段我认为非常不错的关于产生憧憬的描述（原文没标点很难受），事实上，很多友情是从憧憬开始，到后面的慢慢接触，接受对方的缺点，最后成为挚友。</p><blockquote><p>蓝色是愁说的话，棕色是葵，愁的姐姐是红色<br><font color="1E90FF">我觉得作为八重崎同学的追求者很好啊</font><br><font color="1E90FF">开始我从欣赏女孩的角度觉得他很可爱，现在也是这样认为的，</font><br><font color="1E90FF">但又不仅仅是那样子了，因为他是个男孩子</font><br><font color="1E90FF">他做到了我无法做到的事，教会了我很多事，又能看穿事物</font><br><font color="1E90FF">他甚至直面难以忘记的痛苦经过</font><br><font color="1E90FF">我越发地认为他是一个神奇的人，我很高兴有这样的一个人在我身边注视着我，即使仅仅是出于工作原因</font><br><font color="1E90FF">改变自我，是一件既有趣又好玩的事</font><br><font color="1E90FF">而我又很高兴，这样的一个人借此带我走出困境</font><br><font color="1E90FF">你知道，我的姐姐们经常出现在电视上，而她们和名流们共事后，她们会这样说</font><br><font color="DC143C">能和那些杰出的人谈话真的是有趣又令人激动</font><br><font color="1E90FF">那时候作为一个普通的学生的我完全无法理解，不过现在我明白了</font><br><font color="1E90FF">即使是因为一些特殊原因能够在一起，能和那些凭借自身能力做成很多事的人在一起聊一聊就是一件趣事</font><br><font color="1E90FF">我想，可能是这样吧</font><br><font color="8B4513">你很崇拜椿？</font><br><font color="1E90FF">崇拜……</font><br><font color="1E90FF">我想是的</font><br><font color="1E90FF">嗯，我确定是这样</font></p></blockquote><p>现在我脑海里浮现的是一个又一个的OIer <a href="https://oi.yuyuko.cc/">kririae</a> <a href="https://www.hh12.cn/">HigHwind</a> <a href="https://www.goldenpotato.cn/">GoldenPotato</a> <a href="http://www.cnblogs.com/Rye-Catcher">RyeCatcher</a><br>在我眼里，大家真的是一个又一个八重崎椿的存在，要我改编下上面的话来说，就是下面这样：</p><blockquote><p>蓝色是我说的话，棕色是RyeCatcher，HigHwind是红色<br><font color="1E90FF">我觉得作为OIer的追求者很好啊</font><br><font color="1E90FF">开始我从欣赏大佬的角度觉得他们很厉害，现在也是这样认为的，</font><br><font color="1E90FF">但又不仅仅是那样子了，因为他们也是学生</font><br><font color="1E90FF">他们做到了我无法做到的事，教会了我很多事，又能看穿事物</font><br><font color="1E90FF">他们甚至直面难以忘记的痛苦经过</font><br><font color="1E90FF">我越发地认为他们是一群神奇的人，我很高兴有这样的一群人在我身边注视着我，即使仅仅是出于学习原因</font><br><font color="1E90FF">改变自我，是一件既有趣又好玩的事</font><br><font color="1E90FF">而我又很高兴，这样的一群人借此带我走出困境</font><br><font color="1E90FF">你知道，HigHwind经常出现在电视上，而他和名流们共事后，他会这样说</font><br><font color="DC143C">能和那些国家队的人谈话真的是有趣又令人激动</font><br><font color="1E90FF">那时候作为一个普通的学生的我完全无法理解，不过现在我明白了</font><br><font color="1E90FF">即使是因为一些特殊原因能够在一起，能和那些凭借自身能力做成很多事的人在一起聊一聊就是一件趣事</font><br><font color="1E90FF">我想，可能是这样吧</font><br><font color="8B4513">你很崇拜OIer？</font><br><font color="1E90FF">崇拜……</font><br><font color="1E90FF">我想是的</font><br><font color="1E90FF">嗯，我确定是这样</font></p></blockquote><p>欸？！你们别跑啊！∑( 口 || 我没别的意思，就是觉得你们真的很厉害很可爱！我没弯啊！QAQ</p><p>咳咳……总之其实在12话之前，愁对椿的感情其实是一种很正常的友情，其他人的友情其实也有体现，包括为朋友排忧解难，这里就不过多分析了。（因为这里没有什么争议）</p><h2 id="爱情-LGBT"><a href="#爱情-LGBT" class="headerlink" title="爱情/LGBT"></a>爱情/LGBT</h2><p>本作在LGBT方面还算是比较保守的，也许是作者想把这部分留给读者思考吧。我觉得本作讨论的爱情更多的是广义上的，其实这本来就是真实的，如果爱情非要扯到异性，那就不得不提“养育下一代”，而这是一个过程，并不是原因。因此，如果你把一个当代人的爱情观单独抽开来看，可以发现它是与性别无关的，我一直认为性取向是在其他观念里面的东西而非爱情观。</p><p>作者对于爱的理解其实校长已经说出来了：我觉得爱的定义就是让你爱的人幸福快乐。<br>这是从对方角度出发，而从自身角度，葵也说过：毕竟爱情的起因不仅仅是“我爱你”或者“和我约会吧”，那样子的爱情是在绕圈子，而如果你意识到和某一个人在一起总是很快乐很有趣，那样也是爱情的一种开始吧。</p><p>但是其实作者在这上面含糊不清摸棱两可，其实可以看得出来，愁对椿其实是有爱情，但是前面提到过愁其实是性别观念很强的一个人，他可能在心中抑制着自己的爱情，而不断强调这是友情。另一方面，椿由于愁的真心，对愁产生了爱情，但是由于愁的模棱两可，其实最后并没有去成为对方的另一半（只是在最后亲吻了一下而已）</p><p>还有人说最后愁和葵走到了一起，其实我看也不是，葵在独白中提到了他其实曾经是把愁当成是恋爱的替代品，现在无论是什么回答他也接受，而愁这边还是在强调朋友的重要性😂，我看是没戏……</p><p>不过正因为这种含糊的结局导致本作无法上升到一个更高的高度——即如何对待LGBT.椿的态度是只要有爱就行，但是主角呢？真的是钢铁“直男”。对于这样子的结局，我只能强行理解为：“如果双方不是都认可LGBT的话是没有戏的。”这种显而易见的结论……真的是本作的败笔。</p><p>不过尽管如此，本作还是具有启示意义的，作者虽然模棱两可，但是它成功引导读者去思考LGBT的问题（至少我思考了）<br>引用一位网友的评论：“<strong>（这部作品）可以说是LGBT人群的辩白，真正的女装主义者宣言。经典中的经典，弥补人群间的间隔和歧视。</strong>”</p><h2 id="女装的象征含义"><a href="#女装的象征含义" class="headerlink" title="女装的象征含义"></a>女装的象征含义</h2><p>其实这也是主题的一点，后来我才想到的……<br>根据不同人的理解，其实本作的女装可以代表很多含义。<br>其实最概括地来讲，在这部作品里面，<strong>女装象征着资本</strong>。<br>椿一开始就说过他漂亮的女装是他最有力的武器，它可以让愁（包括其他男生）听话。同时，他也讨厌因为他身着女装的可爱而追求他的人，因为他知道，这些人只是喜欢他的女装外表，只是喜欢他的“资本”，当资本消逝的时候，这些人也会离他而去。<br>此外表现这一点的还有人们对资本不计代价的追求（绑架冬麻）</p><p>作品其实也没有深入讨论，我就不再赘述……</p><h2 id="成长"><a href="#成长" class="headerlink" title="成长"></a>成长</h2><p>愁向往椿，包括后面面对之前迫害他的那几名女性的态度的变化可以看出，不过作品也没有深入讨论……</p><h1 id="人物"><a href="#人物" class="headerlink" title="人物"></a>人物</h1><p>其实本作篇幅很短，后面作者也不够走心，所以真的没有什么好评价的，就写个大概吧。<br>|  人物 | 图片  | 评价  | 塑造评分（主观）  |<br>| ———— | ———— | ———— | ———— |<br>| 海棠愁  |  <img src="http://bubbleioa.top/wp-content/uploads/2019/05/%E6%84%81.png"> | 钢铁直男，下意识地抑制自己“不正常”的感情，为人坦诚，可以放心地和这种人做朋友  | 3.2/5  |<br>| 八重崎椿  |  <img src="http://bubbleioa.top/wp-content/uploads/2019/05/%E6%A4%BF.png"> | 本作最喜欢的人物，无论是背景还是感情以及前期的形象都渲染得很好，有那种渐渐看到他的原来的面目但是因此更加喜欢这个角色的感觉 | 4.5/5  |<br>| 松雪冬麻  | <img src="http://bubbleioa.top/wp-content/uploads/2019/05/%E5%86%AC%E9%BA%BB.jpg">  | 心疼，本作最惨角色，被作者当成工具人，作者还说删掉了不少悲伤的情节，性格讨喜，但在该作里并没有塑造的很好  | 3.7/5  |<br>| 夏芽葵  | <img src="http://bubbleioa.top/wp-content/uploads/2019/05/%E5%A4%8F%E8%8A%BD%E8%91%B5.jpg">  | 被作者照顾的角色，情感方面塑造不错，但是那一话过后我以为是个结束，结果到最后还要期待点什么……有点矛盾  | 3.4/5  |<br>| 久我山  | <img src="http://bubbleioa.top/wp-content/uploads/2019/05/%E4%B9%85%E6%88%91%E5%B1%B1.jpg">  | 本作唯一点明了是LGBT人群且拥有了理想生活的人，我觉得把椿映射到他身上，结局应该会好不少（至少不含糊了）  | 不予置评（戏份太少）  |<br>| 校长  | <img src="http://bubbleioa.top/wp-content/uploads/2019/05/%E6%A0%A1%E9%95%BF.jpg">  | 为了自己心爱的女性什么都敢做的人，喜欢这种性格  | 4.0/5  |</p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>如果你看完了漫画，就会发现葵的感情线并没有很好地表达出来（也许是我看太快了），有一话是专门给他内心描写的，但是前面没有很多铺垫感觉很奇怪。后面也没有太多他的描写，但是后日谈的时候又重新提起，我就很懵逼，所以把这条线选择性忽视了，<strong>篇幅短是原罪</strong>(本来篇幅就短，还花了很多笔墨在教你如何女装上，我不是来看这个的啊喂！)。</p><p>留意到后日谈的最后两页（尤其是最有一页），其实感觉作者还是很敷衍，导致了本作的种种问题，心疼冬麻。。。<br><img src="http://bubbleioa.top/wp-content/uploads/2019/05/hahaha.png"><br><img src="http://bubbleioa.top/wp-content/uploads/2019/05/eeee.png"> </p><p>由于我是在回来的火车上看的，当时很疲惫了，尽管后面仔细地看了部分心理描写，但还是可能有些地方描述的不准确，见谅。</p><p>怎么说呢，虽然不是特别优秀地一部作品，但是它是第一个让我去思考LGBT人群的作品，尽管我不属于他们，但是如何对待他们是社会的一个共同问题。答案其实真的很简单——有爱就行。但是理解这个答案的过程却是令人费解的，因此有这样的作品真的是太好了，希望每一个LGBT都被温柔以待。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>THUSC2019赛前游记</title>
    <link href="/2019/05/21/THUSC2019%E8%B5%9B%E5%89%8D%E6%B8%B8%E8%AE%B0/"/>
    <url>/2019/05/21/THUSC2019%E8%B5%9B%E5%89%8D%E6%B8%B8%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<blockquote><p>为什么要叫“赛前游记”？其实我是没有参加THUSC的，只是HH要参加，然后就顺便去THU参观了一下。</p></blockquote><h1 id="Day-1"><a href="#Day-1" class="headerlink" title="Day 1"></a>Day 1</h1><p>做公交到东南门<img src="http://bubbleioa.top/wp-content/uploads/2019/05/IMG_20190520_105720.jpg" alt="清华大学东南门"><br>居然不用任何手续直接进，没有吃早饭，所以直奔食堂而去。<br><img src="http://bubbleioa.top/wp-content/uploads/2019/05/IMG_20190520_110623.jpg"><br><img src="http://bubbleioa.top/wp-content/uploads/2019/05/IMG_20190520_111620.jpg"><br>但是没有卡，又不能用现金，所以没吃到食堂的饭（这一点还是要表扬下南昌大学的），只能去吃汉堡，这是我在北京吃到过的最辣的食物！<br><img src="http://bubbleioa.top/wp-content/uploads/2019/05/IMG_20190520_113624_2.jpg"><br>在吃完人生中最后一次在清华的饭后，打算去朱自清描写的荷塘月色的地方圣地巡礼，不知道是不是因为来的时候不对，完全没有课文中那么优美。</p><blockquote><p>可是热闹是他们的，我什么也没有。</p></blockquote><p><img src="http://bubbleioa.top/wp-content/uploads/2019/05/IMG_20190520_120922.jpg"><br><img src="http://bubbleioa.top/wp-content/uploads/2019/05/IMG_20190520_122352.jpg"></p><p>由于完全没有什么准备，所以基本上就是在清华里面乱逛下面就放些图吧（有些会有点描述）。</p><p>闻一多先生的雕像和纪念他的亭子，这个钟里面被画满了涂鸦……<br><img src="http://bubbleioa.top/wp-content/uploads/2019/05/IMG_20190520_121535.jpg"><br><img src="http://bubbleioa.top/wp-content/uploads/2019/05/IMG_20190520_121646.jpg"></p><p>考虑到当天是520，就想去一下那个叫做“情人坡”的地方看看有没有情侣（然而并没有）<br><img src="http://bubbleioa.top/wp-content/uploads/2019/05/IMG_20190520_124620.jpg"></p><p>去了下CS系，果然这种机会只有在名校才会有啊……<br><img src="http://bubbleioa.top/wp-content/uploads/2019/05/IMG_20190520_110924.jpg"><br><img src="http://bubbleioa.top/wp-content/uploads/2019/05/IMG_20190520_132217.jpg"></p><p><img src="http://bubbleioa.top/wp-content/uploads/2019/05/IMG_20190520_120704.jpg"><br><img src="http://bubbleioa.top/wp-content/uploads/2019/05/IMG_20190520_123158.jpg"><br><img src="http://bubbleioa.top/wp-content/uploads/2019/05/IMG_20190520_120351.jpg"></p><p>逛了一下就没有了理智（体力），本来HH也是今天晚上的火车，但是由于THUPC马上就开始，所以就直接在附近住。<br>到宾馆休息（颓）了一下之后，发现时候已经不早，我的这趟旅途也该结束了……</p><p>祝HH在THUPC取得好成绩，<del>还有大家</del></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>APIO2019主持记</title>
    <link href="/2019/05/12/APIO2019%E4%B8%BB%E6%8C%81%E8%AE%B0/"/>
    <url>/2019/05/12/APIO2019%E4%B8%BB%E6%8C%81%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="Day-3"><a href="#Day-3" class="headerlink" title="Day -3"></a>Day -3</h1><p>刚刚考完 <kbd><a href="http://bubbleioa.top/archives/927">JXOI2019</a></kbd> ，回来还要补上落下的两天文化课，整个人都特别丧，一整天都没和人说过话。尽管APIO迫在眉睫，但完全没有想去准备的欲望，就连交互题也不想练了（之前只做过CF上的交互题的格式）。</p><p>CNBIO2019也在今天考完了，希望我们学校的大佬们好运吧。</p><h1 id="Day-1（报到）"><a href="#Day-1（报到）" class="headerlink" title="Day 1（报到）"></a>Day 1（报到）</h1><p>就当前面几天消失了吧233，其实就是在回归文化课，所以也没啥好写的。坐的是1h的高铁+12h的硬座。去北京的时候感觉还不错，旁边宜阳中学的老师居然主动向我搭话（他原先在我们学校教书），意外地还挺聊的来。我对面坐着的是一对情侣，疯狂发🐕粮，比起回来的时候要好多了……</p><p><img src="http://bubbleioa.top/wp-content/uploads/2019/05/IMG_20190516_094833.jpg"><br>上午就报了到，拿了狗牌，去宾馆，又去学校吃了中饭。<br><img src="http://bubbleioa.top/wp-content/uploads/2019/05/IMG_20190516_112423.jpg"><br>饮食不错，没辣椒吃不来。</p><p>下午和另一位主持人@<u><a href="https://www.luogu.org/space/show?uid=20647">AlenaNuna</a></u>面基了。然后就写练习赛，试机的账号密码都是浮莲子233，后面三道原题然而我并不会切，神仙们都是两个小时把题全部切了orz<br><img src="http://bubbleioa.top/wp-content/uploads/2019/05/IMG_20190516_145627.jpg"></p><p>晚上见到了室友队爷@<u><a href="https://www.luogu.org/space/show?uid=46019">HigHwind</a></u>，这头像有点不妙吧233  <font color="FFFFFF">（这本子我看过）</font></p><p>了解到他从去年9月份（包括暑假的话是7月份）就开始停课，而且从初三就接触到OI，顿时觉得如果自己进队了反而还不正常。</p><h1 id="Day-2（培训1）"><a href="#Day-2（培训1）" class="headerlink" title="Day 2（培训1）"></a>Day 2（培训1）</h1><p>上午讲的是缓存读入与页面置换，原本以为会讲OI卡常技巧，结果其实是这方面的发展史与算法的发展，还算很有意思的，虽然还是掉了线orz<br>神仙们都在颓《我的世界》、《碧蓝航线》、《明日方舟》、则、各种galgame……然而我手机并没有信号所以只能不断尝试重连。<br><img src="http://bubbleioa.top/wp-content/uploads/2019/05/IMG_20190517_080144.jpg"><br>中午@<u><a href="https://www.luogu.org/space/show?uid=56384">shadowice1984</a></u>神仙来了我们房，没想到他也退役了(后来APIO 243Au%%%)，强省竞争实在是太激烈了。</p><p><img src="http://bubbleioa.top/wp-content/uploads/2019/05/IMG_20190517_140418.jpg"><br>下午是非神仙思路理解dp，神仙们好像不感兴趣就都走了，<u><a href="https://www.luogu.org/space/show?uid=56384">shadowice1984</a></u>和<u><a href="https://www.luogu.org/space/show?uid=46019">HigHwind</a></u>都先回去了(下面是上午下午人数对比图)。<br><img src="http://bubbleioa.top/wp-content/uploads/2019/05/IMG_20190517_080140.jpg"><br><img src="http://bubbleioa.top/wp-content/uploads/2019/05/IMG_20190517_163425.jpg"><br>下午还遇到了河南省实验中学的hxf（来推销他们学校的OJ的，雾），共同语言大概就是去他们学校培训过吧。</p><p>晚上和HH（指HigHwind，不是指HimeHina XD）交流了一下各自学校对OI的训练支持情况，了解到他来APIO和THUSC都是学校报销的，羡慕QAQ</p><h1 id="Day-3（比赛）"><a href="#Day-3（比赛）" class="headerlink" title="Day 3（比赛）"></a>Day 3（比赛）</h1><p>今年正好是首师大附中的招生咨询会，感觉这肯定是特意这样安排的！<br><img src="http://bubbleioa.top/wp-content/uploads/2019/05/IMG_20190518_080937.jpg"><br>练习赛都没有AK就来被锤，发了士力架好评。<br>努力地挣扎到了79pt，由于没有做过前面的APIO的题目，不清楚之前的难度，所以按照往年的分数线还觉得自己能有个Cu。<br>结果听说今年特别水（后来知道Cu都要110+），打铁了QAQ</p><p>考完后神仙们花了30min就讲完了题目，听的半懂不懂，过两天上网看平民题解吧orz</p><p><del>考完后就可以颓废啦！</del>没想到HH也是个War3er，于是就开开心心用手机热点开始一起颓废233，玩了一些2个人不可能过的图（其实是难度选太高了）。</p><h1 id="Day-4（培训2-amp-闭幕式）"><a href="#Day-4（培训2-amp-闭幕式）" class="headerlink" title="Day 4（培训2&amp;闭幕式）"></a>Day 4（培训2&amp;闭幕式）</h1><p>其实昨天晚上就拿到了主持稿的电子稿，但是由于在颓废根本没看，只记得有一个神奇的词叫做 “O I 人”，我脑子里瞬间有了一幅画面（还好这台词不是我读）</p><p>早上刮大风（其实昨天就开始了），呼吸不能。上午由首师大附中的学生讲渲染器，原来不但文化课学有余力，OI都学有余力的吗……真的是tql<br>内容还是挺有意思的，只不过还是掉线了Zzz……</p><p>下午神仙们将树上线性问题，为了主持的时候不出锅，我在大厅里先熟悉下稿子。</p><p><img src="http://bubbleioa.top/wp-content/uploads/2019/05/IMG_20190519_204111.jpg" alt="闭幕式"><br>闭幕式还是比较顺利地进行了，虽然中途还是念错了几个字。<br>Dzd刚从山东赶过来，差点咕咕，所以讲的东西也没啥内容，反倒是王宏讲的很赞，把该吐槽的都吐槽了。<br>虽然相处时间不长，但是和其他主持人们合作的很愉快，江西、山东、北京、上海……为了各自的理想，不同的地方的OIer都来到这里，大家真的很可爱啊ww<br>和其他主持人聊天的过程中才知道原来有个东西叫做市选，我们市只有我一个人参加省选还要不要市选啊2333.</p><p>闭幕式结束后，回宾馆继续和HH颓War3，他也打铁了，比起我来说，他可能更加失落吧。</p><h1 id="Day-5（疏散）"><a href="#Day-5（疏散）" class="headerlink" title="Day 5（疏散）"></a>Day 5（疏散）</h1><p>同<u><a href="http://bubbleioa.top/archives/948">THUSC赛前游记</a></u>的Day1</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>JXOI2019退役记</title>
    <link href="/2019/05/09/JXOI2019%E9%80%80%E5%BD%B9%E8%AE%B0/"/>
    <url>/2019/05/09/JXOI2019%E9%80%80%E5%BD%B9%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<p>这是我第一次参加省选，也是最后一次，还是早点占个坑吧~，希望不会咕掉。</p><h1 id="Day-1"><a href="#Day-1" class="headerlink" title="Day -1"></a>Day -1</h1><p>请了个假，一整天都在机房里，与其说是考前复习，不如说是调整下作息吧，其实比起之前晚自习在机房刷题，效率也没高到哪里去，最重要的一点是可以早点睡。要是我在考场上还打瞌睡那可就亏大了。</p><p>争取在考试前两天里再刷14道题把AC数冲到400，考完后打场cf从<font color="00FF00">pupil</font>毕业。</p><p>不过还是想吐槽一点，JXOI2019安排的时间太强了，就在CTS的前一天，而且也没说省选环境，虽然多半是Windows7  </p><p>做了前两年的题目，如果不挂分的话应该能拿到120pt，如果是前两年的话这个成绩还是很稳的，但今年JX多了好多dalao，很慌。</p><p>听说赣州中学的大佬们今天晚上就出发了，我还在机房。</p><h1 id="Day-0"><a href="#Day-0" class="headerlink" title="Day 0"></a>Day 0</h1><p>上午还是去了一下机房，看了一下可持久化Trie，没太理解（明明已经会了主席树），可能是太匆忙的缘故。出来的时候还被门卫拦住……在本子上登记了才让走。<br>途中绕路去看了下学BIO的小伙伴，但是那里没人了，估计是已经出发了吧。</p><hr><p>接下来就是40分钟的公交+50分钟的高铁（第一次坐一等座）+1小时的地铁（第一次坐地铁）……背着电脑好累，不敢想象APIO的时候我还要做12小时的硬座orz</p><hr><p>这时已经是下午了，先去了jkfz，说是4点30才让进，于是先去宾馆放了下东西，再到jkfz<br>环境很好的一所学校，遗憾的是今年不能去吃他们的食堂了……<br><img src="http://bubbleioa.top/wp-content/uploads/2019/05/jkfz1.jpg"><br>到了机房，除了键盘手感差一点真的无可挑剔，6代i5 + 8GB 内存，我们学校最新的机房都没这个配置<br><img src="http://bubbleioa.top/wp-content/uploads/2019/05/jkfz2.jpg"><br>确认环境正常后就去找地方吃饭了，今年由于没有收报名费，没在jkzf的食堂吃饭，遗憾QAQ<br>最后在学校旁边一家担担面店吃的，不是很好吃……</p><hr><p>晚上，由于自己是蒟蒻，完全不敢摸鱼，就打算看些掌握不牢固的高级算法，结果看不下去……<br>还是看些基础的内容复习下吧，免得挂分……</p><p>8点多钟的时候还有人从门缝里塞了一张 <code>色情小卡片</code> ，可惜我只对纸片人感兴趣。</p><h1 id="Day-1-1"><a href="#Day-1-1" class="headerlink" title="Day 1"></a>Day 1</h1><p>晚上教练打呼噜，把我吵醒了大概20分钟，后来起床喝水发出了点响声，教练就不打呼噜了，继续睡觉！</p><p>8点进jkfz，我们考试的时候教练不让进校园，门卫建议教练们去逛商场，事后被我们教练疯狂吐槽。</p><p>我发现我根据去年的情况制定的计划和实际情况完全不一样。<br>APIO推迟，JXOI推迟，以为是可怜题买了件可怜的T恤结果根本不是。考前在练对拍结果根本用不上（都是暴力）。之前想万一退役了省一还是很有用的，现在已经凉了……</p><p>JXOI是只有一天的省选，这样三道题是否合适呢？之前几年的考察内容都很好，有数据结构、组合数学、动态规划、贪心……也许是我太弱了，今年的题目真的是很迷。</p><p>具体情况请看各位大佬们在<kbd><a href="https://www.zhihu.com/question/319749392">知乎上的回答</a></kbd>吧，区别度小是吐槽的原因，估计今年省队名单根据NOIP2018来选都不会有什么差错，就感觉像是大学入学高考占70%，会考占30%，结果高考大家分差都在10分以内，除了给人一种“我还能翻盘”的虚无的希望，这样的考试还有什么意义呢？</p><p>退役了，感觉自己有点像熊巫女（TV版），最后还是自闭儿童，不如傻傻地毫无追求地当一个萌豚活得轻松。之前想打奥赛班，实验班那些提前退役的选手的脸，为此还荒废了一个月的文化课（作业都没动），结果只能换来这样的结局……不是值不值的问题，但是事实摆在这里，谁不会难过呢。</p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>分数出来了，期望80只拿了40，也许是哪里写挂了吧。不过即使是拿到了80也是进不了队的，按我的NOIP分数来算的话，得要120才能进队。<br>赛后看了下题解，T1树形DP，T2莫比乌斯反演，T3分治统计贡献。</p><p>T1、T2确实是做不出来，莫比乌斯反演我连模板题都没写过，T3的话稍微有点可惜，当时有大致的思路没想到如何统计贡献。</p><p>导致退役没进队的原因有很多，这里就简单列举几个吧：</p><ol><li><p>花的时间不够多<br>真正学奥赛的时间加起来也不过是暑假2m，NOIP前1m，寒假3w，省选前1m（只有晚上）。<br>旁人看来我花了太多时间在奥赛上，被他们说着说着，我好像也这么觉得了，其实和队爷比起来，这都不算什么……</p></li><li><p>信息交流不足<br>直到APIO的时候我才通过我室友知道有一个JXOI的群然后才看了题解。原先的埋头一个人搞奥赛其实只是圈地自萌罢了，我只看到了别人想给我看到的，然而并没有真正地去交流。</p></li><li><p>训练不科学<br>NOIP前其实没有怎么刷其他平台上的题目，都是在自己学校的刷，然后NOIP就只拿了300出头……作为对比，Linz在NOIP前刷了大量的Luogu的题目，NOIP中他也是我们学校中分数最高的。<br>省选前很少正规的考试和比赛，导致省选的时候还挂了40pt，由于还要兼顾文化课，导致我某些知识点不得不放弃（其中就放弃了莫比乌斯反演orz）</p></li></ol><p>真实退役啦！然而刚省选完的我对于OI还只是一个很肤浅的感情，在<kbd><a href="http://bubbleioa.top/archives/936">APIO2019</a></kbd>成长了几天后，才变得更成熟了。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Linz的AFO感言（转）</title>
    <link href="/2019/05/03/Linz%E7%9A%84AFO%E6%84%9F%E8%A8%80%EF%BC%88%E8%BD%AC%EF%BC%89/"/>
    <url>/2019/05/03/Linz%E7%9A%84AFO%E6%84%9F%E8%A8%80%EF%BC%88%E8%BD%AC%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>这个鬼人退役后文化成绩那么好，特意留下他的AFO感言来鞭尸（雾</p><p>[gallery link=”file” size=”medium” ids=”909,910,911,912,913”]</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>漩涡</title>
    <link href="/2019/04/28/%E6%BC%A9%E6%B6%A1/"/>
    <url>/2019/04/28/%E6%BC%A9%E6%B6%A1/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>人们生活在漩涡之中，大多数时候人们会顺着漩涡漂流，但有时会受到不公平的待遇，于是想反抗这漩涡。成败固然重要，但可悲的是，现在很多人都失去了反抗的意志，成为了漩涡的一部分。</p><blockquote><p>“凡是反人性的，不公的，你都可以在你的文章中批判，高考作文如此，平时写文章更可如此” ——CDQZ李老</p></blockquote><p>笔者只是这个世界上的沧海一粟，主要批判的是自己周围发生的一些事情，虽然可能很幼稚，很无逻辑，但是可以肯定的一点是，我批判的对象肯定是反人性的或不公的。</p><h1 id="一"><a href="#一" class="headerlink" title="一"></a>一</h1><p>半期考试结束了，也快省选了，总有一种不好的预感，总觉得要“赔了夫人又折兵”。身边退役的OIer文化课都恢复地不错，yanyu在我们班都rank8了，Linz在奥赛班都rank2去了（虽然现在奥赛班有十多个人都在生物奥赛停课中）。</p><p>“近几年是我们学校最支持奥赛的几年。”今天听到我们班主任的惊人发言，我真的想好好讲讲学校是多么“支持”奥赛的。</p><p>18届，分班的时候奥赛班和A班平均分一样，“合情合理”的，奥赛班在每次考试的要求都是与A班相平，也就是说要让奥赛班的学生每天拥有28个小时或者睡眠效率提高3倍。<br>“大多数”学生都做不到，那怎么办呢？学校觉得奥赛不至于占用这么多时间，充其量就是“锦上添花”的作用，说白了就是给学生一套“时装”，“皮肤”，拿到省二就是“钻石段位”，省一就是“最强王者”。这也说的过去，因为平均每天不到1小时的学习时间，能进省队除非你是卢本伟。</p><p>学校当然也不希望“卢本伟”出现在自己学校，以免“败坏”了学校的名声。<br>于是呢，学奥赛的时间被大幅度打压，就是那种你即使有“外挂”，也用不出来的那种。<br>一周学奥赛的时间大概是： 2h(周1)+2h(周3)+3h(周6)=7h(一周)<br>也就是 1 h/day  </p><p>当然，太过压迫也不好，于是每到联考前，奥赛还允许停一个月的课，这有多久呢？<br>30day，但是我们学校是没有双休的，如果那些有双休的学校每周多拿出1天学奥赛呢？一年就有52day！<br>而且停课30day是会影响文化成绩的，也要花更多时间去补，而每周抽出1天来，对于大多数学生都不会有太大负担（指有双休的学校）</p><p>既然制度上这么不支持，那么财政上呢？</p><p>官方说：“国赛才报销。”</p><p><strong>重大消息！笔者将给第一个前往仙女座的宇航员报销全额费用！</strong></p><p>实际上，联赛和省选也会报销，但是这些钱真的是杯水车薪，尤其是今年年初的破事之后，这些费用真的不贵……</p><p>至于WC/APIO/CTSC，是要全额自费的，当然，如果你有幸获奖，学校也会毫不吝啬地把你的名字挂到喜报上去。</p><p>暑假上奥赛教练的工资甚至还要我们来出……</p><p>好吧好吧，搞奥赛又不是差这些钱，重要的还是学习。那么学校提供的学习环境怎么样呢？</p><p>机房很大，开一个空调完全没感觉的那种。电脑没一个能用，基本上就是把电脑的网线、显示屏、鼠标、键盘拆下来，连到自己的笔记本上用。之前直接向校长提出要奥赛专用机房，结果校长都没记在本子上。</p><hr><p>学校的态度很明显，奥赛是用来自招的，管你是兴趣还是什么奥林匹克精神，奥赛教练和学生都是工具人，干好分内的，不要想有的没的。你上进，吃力不讨好，每天混下日子，也就那么过去了。我们教练多次想去当年级干士，因为带奥赛又辛苦又没好处。之前的奥赛表彰大会上，说什么十个左右省一就是“全面开花”，希望得奖的同学在文化课上“继续努力”。</p><hr><p>好在我们班主任还是很支持的，最近每天晚上都在机房刷题，现在平均每天有4小时左右学奥赛的时间，但是之前落下来的东西太多，我们学校又只有我一个人在准备省选，现在学的也不知道怎么样。</p><p>如果5月省选我没进省队呢？学校不可能去改变政策。尽管我的学弟们很聪明，但是在这种政策下，想进省队是很难的。</p><p>即便进了省队，学校又会有什么很大的改变吗？也不见得。</p><p>能坚持到现在，也是源于自己的喜欢，以及想反抗学校这种迫害奥赛生的行为。</p><p>这里补充一段来自<a href="http://bubbleioa.top/archives/908">Linz的AFO感言</a>里的内容，部分错别字有修改</p><blockquote><p>终于，复赛后我取得了我们学校第一，江西省19（除去高三）的成绩，顿时觉得省选是有希望的。但文化课落后了很多，就补了一个多月的文化课，奥赛基本上没怎么动过。在这期间，我了解到学校对我们奥赛是多么“重视”，就连补课的事都拖了一个礼拜，甚至有管理层的人竟然还不打算给我们补课，实在是凉透了我们的心。出乎我的意料，我竟然入选了ccf的冬令营。之后，每天又开始拼命地学奥赛。班主任不允许我们在晚自习使用电脑，就连去机房都不行<del>他甚至还让我们不要用电脑，<strong>用纸写代码</strong>（滑稽）[1]</del>。为了学奥赛，我趁自己还坐在最后一排，每天晚自习把电脑放在桌子底下，偷偷看博客学知识，也不怕被抓，还觉得自己赚大发了。就这样过了一段时间，抱着可以逃过一次期末考地想法，我踏上了前往广州的高铁。</p></blockquote><p>[1]：补充一点，xf（我们学校另一位大佬）还去找他们班主任理论，结果被骂哭了。</p><p>虽然很想吐槽这想小学生的作文水平<del>我也好不到哪里去</del>，但是最朴实不加修饰的语言，才能看到最真实的学校。</p><p>10多年前，我们学校还有人靠奥赛保送，成绩也是名列江西省前茅。为什么会变成现在这样呢？这不是我该反思的问题，我只是在这里待3年，而我们学校却存在100年了，我相信学校不是没有这样的能力，而是想不想背负更多的责任和义务。</p><blockquote><p>第一章更新与5月1日</p></blockquote><h1 id="二"><a href="#二" class="headerlink" title="二"></a>二</h1><p>也不知是好消息还是坏消息，五一假期有两天，比往常多了一天。但真正留下来能搞奥赛的时间真的不多，还有省选前最后一场CF(不过Educational R是真的有阴影)</p><p>这两天我可以安排写作业，也可以搞奥赛，但都不能都做，如果有4天的话应该还是游刃有余的。</p><p>我肯定会选择后者，但我相知道为什么我会选后者，这些事是我平常压根不会去想的。</p><hr><p>记得开学的时候,班上讨论得最多的就是《流浪地球》，大部分人围绕着中国科幻电影的角度聊着，某位大佬的讨论引起了我的兴趣（剧透警告）：<del>地球上的人们团结一心想点燃木星大气，失败了，最后还是靠一名宇航员和一个空间站的代价点燃了，那为什么不一开始直接这样做，省的费那么大的力气呢？</del></p><p>其实这个问题应该是看完很久后才会去想的，因为电影里的情节安排不会让你认为这样是不合理的。但是这个问题确实有思考的价值。</p><p><strong>人会坚持自己之前一直所努力做的事情。</strong>说的积极一点是坚持，消极一点是惰性，又或是因为深信着”坚持努力就会有回报“这种鬼话。总之，在当下这个时代，这种品质应该来说是不好的吧。</p><p><strong>人总是会贪心地看问题。</strong>所谓贪心，其实就是目光放的比较近，没那么长远。这里并没有贬义地成分，相反，贪心地去解决问题有时能剩下不少决策时间致使结果朝着更好的方向发展。</p><hr><p>从我们学校重新搞信息学奥赛到我这一届是第三届，之前我们学校有人因为信息学奥赛直接受益吗？没有，Linz的哥哥（已经毕业）去了西安交大，还是靠高校专项降了60（其实裸分也能上，总之和信奥没有直接关系），还有几个学长（快要毕业）只有省一，他们文化成绩都很好，今年名校政策又这样，基本上就是很难发挥自招的作用。</p><p>而我，面对这样的情况，任选择希望。</p><p>这不是深谋远虑的结果，这也不是贪心的结果，这个决定是来源于人类本源的情感，无逻辑的。我并不是没去想选择后者的原因，而是这种情感没有办法用理性的语言所表述罢了。</p><p>人类的历史上从来不缺少希望。面对波斯压倒性的优势，斐力庇第斯还是将马拉松平原的捷报传到雅典。面对德国的铁骑，苏军背靠着莫斯科，守卫着家园。</p><p>我希望我能在奥赛方面取得理想的成绩；我希望学校能改变制度，培养出真正的人才；</p><p>我希望所有读到这篇文章的读者们，对你坚守的，对你喜欢的，对你讨厌的，都抱有希望，不要放弃。</p><p>只要不断前行，道路就会不断延伸下去……</p><blockquote><p>第二章写于5月1日</p></blockquote><h1 id="三"><a href="#三" class="headerlink" title="三"></a>三</h1><p>这里想讲讲我们的奥赛教练，在一个本来没有任何希望的弱省弱校，他为我们付出了很多，能发展成今天这样已经很不容易了（就像初生演替一样）。我们都很喜欢我们的奥赛教练，上个元宵节我们学生还一起商量出钱请教练出去吃饭（在一般的人都退役了的情况下，全员到齐了）。</p><p>但作为教练，他的几种做法我还是不认同的（尽管这里面有些是学校的原因）。</p><p>首先就是太强调天赋。</p><p>如果是前期刚招来学生的时候说说无妨，无非就是劝退那些不是真正想要学奥赛的人。</p><p>但是我们奥赛教练至始至终都在说什么奥赛看天赋，什么生源不够好。这确实是实事，但对学生说这些，能改变什么吗？什么都改变不了！反而会带来消极影响。</p><p>就举个例子来说吧，之前在常州培训（包括在郑州也是）的时候被虐爆，结果大家都觉得是自己天赋比其他人差，其他人学的好是因为天赋好。错！这个结论对了一半，但思考的方向完全错了。我们当时完全没有想过别人强是因为别人比我们多了10倍的刷题量，只是觉得别人比我小开始学，而且比我有天赋。</p><p>当初教练给我们举hzwer的励志故事来告诉我们学奥赛要努力，于是我们把hzwer的800题看成最高标准。孰不知各位dalao一个个都是1k+的恐怖题量，彩虹猫的3k+更是一个天文数字。</p><p>还有一点就是太看重文化成绩。</p><p>如果我们学校有双休，奥赛训练模式和CDQZ，长郡中学一样，我觉得是可以做到两开花的，但在我们学校不行。</p><p>这样的做法，最终落得暑假学了一暑假奥赛文化课还考rank1的dalao（上一届学长），NOIP2017也只有295分（可能记错了，但就在这个分数左右）</p><p>扯远了一点说，在人大的<a href="https://oi.men.ci/">Menci</a>，高三回归文化课的时候不也只有467，但是高考也很厉害啊。在哈工大的<a href="http://ruanx.pw/">阮行止</a>，停了两年课，高考不也有630+</p><p>就拿最近的一点来说，linz在班上rank2，yy在班上也有rank8，在奥赛的赛场上经历过风吹雨打的OIer岂是文化课能打倒的？奥赛教练可能也想过这样做，但面临着多方面的压力。</p><p>教练看重文化成绩+家长看重文化成绩+班主任看重文化成绩，在这种情况下，谁能看重奥赛呢？（除非你像我一样头铁）</p><p>我们教练不是一个只想让我们拿个省一就了事的教练，在这样一个小城破校能遇到这样一位教练是我福报（不含贬义），我们教练已经做到了在这个制度下最好的结果，想要有所突破，还需要更多头铁的学生“牺牲”自我来发起“革命”。</p><blockquote><p>第三章写于2019年5月3日，五四运动100周年前一天</p></blockquote><h1 id="四"><a href="#四" class="headerlink" title="四"></a>四</h1><p>开学的时候学校修了一座公园，虽然学生基本不会到那里去，但是毕竟没什么影响，所以大部分人都把它忘了。  </p><p>然后就是原先从来没有收过的空调维护费开始收了（之前只收电费），虽然不知道为什么这种东西隔了4年才开始收，但毕竟大家都用了空调，这钱叫就交吧。</p><p>四月份各大高校自招简章都出来了，可以看出自招正在收紧，我有种不好的预感。</p><p>果然，原本奥赛的联赛和省选都可以报销路费，住宿费的，现在取消了。那学校留给我们的还有什么呢？就信息学奥赛来说，不过是一个遮蔽风雨的房间和电、网罢了。相较之下，九中投入的支持要比我们大得多，OJ用的都是学校官网的服务器。</p><blockquote><p>第四章写于5月6日</p></blockquote><h1 id="五"><a href="#五" class="headerlink" title="五"></a>五</h1><p>咕咕咕<br>关键词 停电</p><h1 id="六"><a href="#六" class="headerlink" title="六"></a>六</h1><p>咕咕咕<br>关键词 wlzbjxb 洋务运动</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>OSU三连！（期望）</title>
    <link href="/2019/04/19/OSU%E4%B8%89%E8%BF%9E%EF%BC%81%EF%BC%88%E6%9C%9F%E6%9C%9B%EF%BC%89/"/>
    <url>/2019/04/19/OSU%E4%B8%89%E8%BF%9E%EF%BC%81%EF%BC%88%E6%9C%9F%E6%9C%9B%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<blockquote><p>三道一样的题目，所以放一起了</p></blockquote><h1 id="P1365-WJMZBMR打osu-Easy"><a href="#P1365-WJMZBMR打osu-Easy" class="headerlink" title="[P1365] WJMZBMR打osu! / Easy"></a><a href="https://www.luogu.org/problemnew/show/P1365">[P1365] WJMZBMR打osu! / Easy</a></h1><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> &amp;lt;bits/stdc++.h&amp;gt;</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br>string str;<br><span class="hljs-keyword">int</span> n;<br><span class="hljs-keyword">double</span> x[<span class="hljs-number">1000003</span>], ans[<span class="hljs-number">10000003</span>];<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &amp;gt;&amp;gt; n;<br>    cin &amp;gt;&amp;gt; str;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &amp;lt;= n; i++)<br>    &#123;<br>        <span class="hljs-keyword">double</span> p = <span class="hljs-number">0.5</span>;<br>        <span class="hljs-keyword">if</span> (str[i - <span class="hljs-number">1</span>] == &amp;#<span class="hljs-number">039</span>;o&amp;#<span class="hljs-number">039</span>;)<br>            p = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (str[i - <span class="hljs-number">1</span>] == &amp;#<span class="hljs-number">039</span>;x&amp;#<span class="hljs-number">039</span>;)<br>            p = <span class="hljs-number">0</span>;<br>        x[i] = (x[i - <span class="hljs-number">1</span>] + <span class="hljs-number">1</span>) * p;<br>        ans[i] = ans[i - <span class="hljs-number">1</span>] + (x[i - <span class="hljs-number">1</span>] * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>) * p;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(&amp;quot;%<span class="hljs-number">.4</span>lf&amp;quot;, ans[n]);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="CF235B-Let’s-Play-Osu"><a href="#CF235B-Let’s-Play-Osu" class="headerlink" title="[CF235B]Let’s Play Osu!"></a><a href="https://www.luogu.org/problemnew/show/CF235B">[CF235B]Let’s Play Osu!</a></h1><h2 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h2><h2 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> &amp;lt;bits/stdc++.h&amp;gt;</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> MAXN = <span class="hljs-number">100005</span>;<br><span class="hljs-keyword">double</span> x[MAXN], ans[MAXN];<br><span class="hljs-keyword">int</span> n;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &amp;gt;&amp;gt; n;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &amp;lt;= n; i++)<br>    &#123;<br>        <span class="hljs-keyword">double</span> p;<br>        cin &amp;gt;&amp;gt; p;<br>        x[i] = (x[i - <span class="hljs-number">1</span>] + <span class="hljs-number">1</span>) * p;<br>        ans[i] = ans[i - <span class="hljs-number">1</span>] + (x[i - <span class="hljs-number">1</span>] * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>) * p;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(&amp;quot;%<span class="hljs-number">.15</span>lf&amp;quot;, ans[n]);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="P1654-OSU"><a href="#P1654-OSU" class="headerlink" title="[P1654]OSU!"></a><a href="https://www.luogu.org/problemnew/show/P1654">[P1654]OSU!</a></h1><h2 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a>题解</h2><h2 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> &amp;lt;bits/stdc++.h&amp;gt;</span><br><span class="hljs-keyword">double</span> x[<span class="hljs-number">100003</span>][<span class="hljs-number">3</span>];<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> n;<br>    std::cin &amp;gt;&amp;gt; n;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &amp;lt;= n; i++)<br>    &#123;<br>        <span class="hljs-keyword">double</span> p;<br>        std::cin &amp;gt;&amp;gt; p;<br>        x[i][<span class="hljs-number">0</span>] = (x[i - <span class="hljs-number">1</span>][<span class="hljs-number">0</span>] + <span class="hljs-number">1</span>) * p;<br>        x[i][<span class="hljs-number">1</span>] = (x[i - <span class="hljs-number">1</span>][<span class="hljs-number">1</span>] + <span class="hljs-number">2</span> * x[i - <span class="hljs-number">1</span>][<span class="hljs-number">0</span>] + <span class="hljs-number">1</span>) * p;<br>        x[i][<span class="hljs-number">2</span>] = x[i - <span class="hljs-number">1</span>][<span class="hljs-number">2</span>] + (<span class="hljs-number">3</span> * (x[i - <span class="hljs-number">1</span>][<span class="hljs-number">0</span>] + x[i - <span class="hljs-number">1</span>][<span class="hljs-number">1</span>]) + <span class="hljs-number">1</span>) * p;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(&amp;quot;%<span class="hljs-number">.1</span>lf&amp;quot;, x[n][<span class="hljs-number">2</span>]);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>之前代码一直是我的毒瘤码风真的很抱歉QAQ</title>
    <link href="/2019/04/18/%E4%B9%8B%E5%89%8D%E4%BB%A3%E7%A0%81%E4%B8%80%E7%9B%B4%E6%98%AF%E6%88%91%E7%9A%84%E6%AF%92%E7%98%A4%E7%A0%81%E9%A3%8E%E7%9C%9F%E7%9A%84%E5%BE%88%E6%8A%B1%E6%AD%89QAQ/"/>
    <url>/2019/04/18/%E4%B9%8B%E5%89%8D%E4%BB%A3%E7%A0%81%E4%B8%80%E7%9B%B4%E6%98%AF%E6%88%91%E7%9A%84%E6%AF%92%E7%98%A4%E7%A0%81%E9%A3%8E%E7%9C%9F%E7%9A%84%E5%BE%88%E6%8A%B1%E6%AD%89QAQ/</url>
    
    <content type="html"><![CDATA[<p>以后题解代码都是格式化过的啦！</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>【学习笔记】快速傅里叶变换(FFT)</title>
    <link href="/2019/03/13/%E3%80%90%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E3%80%91%E5%BF%AB%E9%80%9F%E5%82%85%E9%87%8C%E5%8F%B6%E5%8F%98%E6%8D%A2(FFT)/"/>
    <url>/2019/03/13/%E3%80%90%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E3%80%91%E5%BF%AB%E9%80%9F%E5%82%85%E9%87%8C%E5%8F%B6%E5%8F%98%E6%8D%A2(FFT)/</url>
    
    <content type="html"><![CDATA[<h1 id="0-0-前言"><a href="#0-0-前言" class="headerlink" title="0.0 前言"></a>0.0 前言</h1><h2 id="0-1-关于本篇文章"><a href="#0-1-关于本篇文章" class="headerlink" title="0.1 关于本篇文章"></a>0.1 关于本篇文章</h2><p>本篇文章写作主要有两个目的，一是本人想对这一块的知识进行系统的梳理，还有就是将《算法导论》上的知识写成更适合OIer学习的格式（这本书由于各种原因是真的难啃）</p><p>为了方便阅读理解，在看本篇文章的时候我们规定一些标记：</p><ol><li><p>重点难点强调将以<strong>加粗</strong>形式标注</p></li><li><p>长篇幅引用将以如下形式标注：</p><blockquote><p>我是引用内容</p></blockquote></li><li><p>*(括号斜体)*中内容为原书没有，本人为了方便理解，在不改变意思的情况下加上的内容，如果有误欢迎联系我</p></li><li><p>循环变量将优先使用j表示，i要作为虚数单位。</p></li><li><p><font face='STKaiti'>楷体字为定理或引理</font></p></li></ol><h2 id="0-2-FFT是用来干什么的？"><a href="#0-2-FFT是用来干什么的？" class="headerlink" title="0.2 FFT是用来干什么的？"></a>0.2 FFT是用来干什么的？</h2><p>将多项式乘法从 $O(n^2)$ 加速到 $O(nlogn)$ 。</p><h2 id="0-3-前置知识"><a href="#0-3-前置知识" class="headerlink" title="0.3 前置知识"></a>0.3 前置知识</h2><p>有以下的只是基础会让你的学习变得更加轻松</p><ol><li>复数</li><li>多项式基本概念</li><li>矩阵基本运算</li></ol><h2 id="0-4-基本原理框架"><a href="#0-4-基本原理框架" class="headerlink" title="0.4 基本原理框架"></a>0.4 基本原理框架</h2><p>为了更方便地理解下面每个概念的意义，先给出算法实现的大体框架：<br><img src="http://bubbleioa.top/wp-content/uploads/2019/03/FFT.png"></p><h1 id="1-0-多项式"><a href="#1-0-多项式" class="headerlink" title="1.0 多项式"></a>1.0 多项式</h1><h2 id="1-1-多项式基本概念"><a href="#1-1-多项式基本概念" class="headerlink" title="1.1 多项式基本概念"></a>1.1 多项式基本概念</h2><p>为了让我们对多项式的基本概念达成共识，这部分简单内容还是稍微提下：</p><ol><li>多项式表示：$A(x)=\displaystyle\sum_{j=0}^{n-1}a_jx^j$</li><li>多项式的系数：其中， [latex]{a_0,a_1,\cdots,a_{n-1} }[/latex] 被称为<strong>系数</strong>，<strong>所有系数都属于复数集合C</strong>  </li><li>多项式的次数： $A(x)$ 的具有非零系数的最高次的次数，记为 $degree(A)$ </li><li>次数界：<strong>任何</strong>一个严格大于次数的整数<br>这就是一般的多项式，如果拿来相乘的话，时间复杂度为$O(n^2)$</li></ol><h2 id="1-2-多项式的表示"><a href="#1-2-多项式的表示" class="headerlink" title="1.2 多项式的表示"></a>1.2 多项式的表示</h2><h3 id="1-2-1-系数表达"><a href="#1-2-1-系数表达" class="headerlink" title="1.2.1 系数表达"></a>1.2.1 系数表达</h3><p>多项式 $A(x)=\displaystyle\sum_{j=0}^{n-1}a_jx^j$ 的系数表达为一个由系数组成的向量 $a=(a_0,a_1,\cdots,a_{n-1})$<br>这也是我们平时最常用的表达方式。</p><h3 id="1-2-2-点值表达"><a href="#1-2-2-点值表达" class="headerlink" title="1.2.2 点值表达"></a>1.2.2 点值表达</h3><blockquote><p>一个次数界为 $n$ 的多项式 $A(x)$的点值表达就是一个由 $n$ 个点值对所组成的集合</p></blockquote><center>[latex]\left\{ (x_0,y_0),(x_1,y_1),\cdots,(x_{n-1},y_{n-1}) \right\}[/latex]</center>使 $k=0,\ 1,\ 2, \cdots, n-1$ 所有的 $x_k$ 各不相同，$$y_k=A(x_k)$$一个多项式可以有很多不同的点值表达。<p>在求点值表达的时候我们可以使用秦九韶算法，但这样的做法的时间复杂度任然是 $O(n^2)$ 之后我们将会讨论如何优化这一过程。<br>求值计算的逆运算称为<strong>插值</strong>。</p><h3 id="1-2-3-插值多项式的唯一性（可跳过）"><a href="#1-2-3-插值多项式的唯一性（可跳过）" class="headerlink" title="1.2.3 插值多项式的唯一性（可跳过）"></a>1.2.3 插值多项式的唯一性（可跳过）</h3><blockquote><p><font face='STKaiti'>对于任意 $n$ 个点值对组成的集合 [latex]{(x_0,y_0),(x_1,y_1),\cdots,(x_{n-1},y_{n-1})}[/latex] ，其中所有的 $x_k$ 都不同；那么存在唯一的次数界为 $n$ 的多项式 $A(x)$ ，满足 $y_k=A(x_k),k=0,1,\cdots,n-1$ 。</font></p></blockquote><blockquote><p><strong>证明</strong> 证明主要是根据某个矩阵存在逆矩阵。<br>$$\begin{bmatrix}1&amp;x_0&amp;x_0^2&amp;\cdots&amp;x_0^{n-1}\1&amp;x_1&amp;x_1^2&amp;\cdots&amp;x_1^{n-1}\\vdots&amp;\vdots&amp;\vdots&amp;\cdots&amp;\vdots\1&amp;x_{n-1}&amp;x_{n-1}^2&amp;\cdots&amp;x_{n-1}^{n-1}\end{bmatrix}\begin{bmatrix}a_0\a_1\\vdots\a_{n-1}\end{bmatrix}=\begin{bmatrix}y_0\y_1\\vdots\y_{n-1}\end{bmatrix}$$<br>左边矩阵的行列式值为：<br>$$\displaystyle\prod_{0\le j&lt; k\le n-1}(x_k-x_j)$$</p></blockquote><p>下略（需要用到矩阵相关知识，这一部分内容超出本人理解范围，而且不影响我们的算法）</p><h1 id="2-0-单位复数根"><a href="#2-0-单位复数根" class="headerlink" title="2.0 单位复数根"></a>2.0 单位复数根</h1><h2 id="2-1-单位复数根的定义"><a href="#2-1-单位复数根的定义" class="headerlink" title="2.1 单位复数根的定义"></a>2.1 单位复数根的定义</h2><p>单位负数根就是我们之前说的选的特殊值，它具有一些神奇的性质以至于我们可以分治的方法，来用它求点值表达。<br>我们定义<strong>n次单位复数根</strong>是满足 $\omega_n=1$ 的复数 $\omega$ 。<br>为什么这样定义呢？我们现在需要用到<strong>欧拉公式</strong>：<br>$$e^{iu}=cos(u)+isin(u)$$</p><p>如下图（ $\omega$ 表示的是 $\omega_8^1$ 其他的都是它的次幂），说明 $n$ 个单位复数根均匀地分布在以复平面的<strong>原点为圆心的单位半径的圆周</strong>上<br>$$\omega_n=e^{\frac{2\pi i}{n}}$$</p><div id="applet_container"></div><script src="http://ggbstudy.top/ggb/deployggb.js"></script><script>new GGBApplet({"ggbBase64":"UEsDBBQACAgIAMqDbU4AAAAAAAAAAAAAAAAXAAAAZ2VvZ2VicmFfZGVmYXVsdHMyZC54bWztWt9zmzgQfr7+FRqeeg+xAYNxMiGdtDM3l5k0zVwynb7KsMa6gMQhEeP89SckDDj+Ucd2EydNHiJWrIT0favdleTTT0USo3vIOGHUN6yOaSCgAQsJjXwjF6OjgfHp7MNpBCyCYYbRiGUJFr7hlpp1Oyl1ep5T1qGCkxPKrnACPMUB3ARjSPAlC7BQqmMh0pNudzKZdGaddlgWdaNIdAoeGkgOiHLfqB5OZHdzjSY9pW6bptX98fVSd39EKBeYBmAgOdgQRjiPBZePEEMCVCAxTcE3UkaoMFCMhxD7xnUpoY+jDOBPA1WNJAamcfbhj1M+ZhPEhv9CIOtElkPdTgndUke+/sJilqHMNzzPQJEuhr5hu66BcJyOsW+YWjnGU8jQPY7rGpwLFqj2qnaEYw4zXfmlrywE/cap9ClJFIqIC0jlSA3EU4BQPekZyodUfkix1+qP8JsxTmHhOwFjWchR4RtX+MpA06p80KVSUZjdkIeqsduuFdMYWjM67VZwbwZ8CCnQUCrNoW9thX5/oNAvi6Eu3iL4zr7A/0bbkNtbQW7ZrsJcle8mvwHqF/QfiORc2tj33rF/FuznLd7ZCnVTYW6+McSVisaWl/99I2BJGkOxR0JiQhtwL5VQk2FvF2/bZJgvQoW5dypKmDSoYkyCOwqcl4g33ysf/iahDJpqHEwmWETInixvoHuA/+gclUQySaTOeno4RKVUI34zkxuStgvL7yQtI4nlIi5HdEGFTKAllnIGfGEodwDprezqG73NMOVl4q11ZlCv5jPD03Vcuu9cvh4uRzlVnV59x1nNUC7z5pEce9imdbtUYmVQ69juoXL7c7TWI7V7+H8VC+CJ1r0fM+xv511s01kOb8d7hWZ4L6fNGpy+V2INUu8959mfC16SwOJMACeY/mybEE+jlq+4nsk1T57mafcxPnmD5/YU1661sB4sU/9ZzrFpWX25ez9Q+tcDP7cluK4rGuitF4L+QBfZajQDRklQT+qLlmocnd/E1exh70QioNpzc4QKU6lNTdX4wawOxwtLyVNLvX2wdLVqLyeUkQKd6xbnWvHc1kVPF44u3Bq47TZsivJUerlWmv8oxDjb7djeguN5k8bwDFsNmieQtVzJ1UyujcrVzkT2l8Mc5Ru4jlX2s9paeExCaVoJkSQdSfYSXCgW8ZCzOBdwE2QAtLla0uY9IaEYlwml/PaIFKUZ6T7RmGXkgVFRo4HK1XEeq0uo9oJYaj72usR50YjlfHf27JhGcbNgz7XUkKHP7ZXS46O4ZRy14TQrNPsde9CzBm7P9Czv2B30N0TXGjTo6hcbgzvnkSpmNghFlrmxRe3ukZ7kP+xl/gNnQXNo2jNX2Yg58Ox+3+nb7vGxZ/Udb2ebWdgB/1VXNHu0l8gJWstrKebKmh6r/ioHv+aomgU5b86qtVQjN/hNsimcFyQmOJs+I/ICiiafuVVC61L+AIFfPRVJR9QM7UJLrTtuPZkRkShSnMgGFRv0Mw7uoozlNFyMhnuZunWoNrcazCFjMeDGoX2eya0b7IW8ZBVwmwecX7ZagzEEd0NWzMXP9T6J8GZlXCqhdYO8ZGXsElaPDtZEtjnR3PQC82jh/LPb+hlRd/ZTpbP/AVBLBwh/yyUBwQQAADElAABQSwMEFAAICAgAyoNtTgAAAAAAAAAAAAAAABcAAABnZW9nZWJyYV9kZWZhdWx0czNkLnhtbO1X3U7bMBS+Hk9h+Z7Gzk9LUQOq2MUmARriZrductpkS+1gu23Kq+0d9kxz7DSk0E6jKkKayEWOf86P/X0nx87ospoXaAlS5YLHmPYIRsATkeZ8FuOFnp6e4cuLk9EMxAwmkqGpkHOmYxzVmq2d6fWCQViPoUrl51zcsjmokiVwn2QwZ9ciYdqqZlqX5563Wq16G6c9IWfebKZ7lUoxMgviKsZN49y42zJaBVbdJ4R632+unfvTnCvNeAIYmcWmMGWLQivThALmwDXS6xJinAieJ4GJUbAJFDH+yrXZAST1ylCykEtj3xjHOKARwRcnn0YqEyskJj+MXoy1XEBrbzterWOmr0QhJJIx9qMII4Me9QcYTWJsQGFFmTHT6lHiHhoOCaV96jvzgq1BoiUram07whZaJNajHZ2yQsFG18S+ESm4mbDR5/ncIoyUhtIEx0iVAKltud2bdZQmkGW24y9X9xkr4WWcnMO9XheAdJYnPzkow0rUcVY3vuRpCnXiOBvIZ8CXBighlckEYqOviVV/JE1+VdT219TOPlI3bO3NFmReobGzGDvFse9E4EToRNRCBQ/crVPV7xiXTJrkM46Sen7kNTnwIhtYlatOMozr7uetBCDBQQlALP3kOfn/GdX7UUdNGwwWv3/9nQT71SVMalA54x06ruqJ53z0P/jYzcd+gE1cDh1cv9n+Fq6mlh6E63BogfXp0EJrZVvpomPBuw+kRAiZKlS5YuJKjH2v2lBTVp9jTfS9tXcX2ORAsEWxziCVgj/h3Rl6gjxoID/ky3stTTQKLE8RfXEchQ0k0bBPwn54NM6O/UnsR5yDbrd/W7e7GEcfGB8D44cFS21dbyC42/S7WNPD7kok3F2ce4M3LyBvccHZeb2pB90dZu3Eo986fO2NB437TgycOHNi2KCzn0S1kFNzHd911DZT23yG78Xnk+N3PW7pv54AXud3w9v80lz8AVBLBwhyzZtN2QIAAFkNAABQSwMEFAAICAgAyoNtTgAAAAAAAAAAAAAAABYAAABnZW9nZWJyYV9qYXZhc2NyaXB0LmpzSyvNSy7JzM9TSE9P8s/zzMss0dBUqK4FAFBLBwjWN725GQAAABcAAABQSwMEFAAICAgAyoNtTgAAAAAAAAAAAAAAAAwAAABnZW9nZWJyYS54bWzdW91u2zgWvu48BaGrZBHbJEVSUmF3kP5hBugUxWZ3sNiLAWSJttnIkiDJPynmYi/2Zp5m3mT6DvMke0hKtmK7TZSkGWenVSlRh+fwfN/hOUdIZvj9ep6gpSxKlaUjh/Sxg2QaZbFKpyNnUU16vvP9i++GU5lN5bgI0SQr5mE1criW3KyDp77rMT2n4pGDmf+av339tke497LH3rzlveBN4PVev/YD9yVh/NWbwEFoXarnafY+nMsyDyN5Ec3kPHyXRWFllM6qKn8+GKxWq35jvp8V08F0Ou6vy9hBsPW0HDn1zXNQd23RyjXiFGMy+NdP76z6nkrLKkwj6SDt1kK9+O7ZcKXSOFuhlYqrGYDACXXQTKrpTDsagFMDLZWDt7mMKrWUJaxtPRqnq3nuGLEw1e+f2TuUbPxxUKyWKpYFANSnnLiUept/mYOyQsm0qoVJbXTQqBsulVxZvfrOmGQ48IAFVapxIkfOJExK8EulkwIw3TyX1VUixyGYrYoFPG93RM7MHxBRn6RWB65aLOAdxmf68uDivMagZduAVGVZYjRj9CsiiGO4EAnQGRIezFBEOGIw48OMh1w9xwlDLtIixEWMwcj0NBH6HYf1HCNCYBpRjChFlCDqwiPniAvEPb2QgqwIjDIMl5aG7cDl6jnXhcvMuQwuqu9AEbdqYBPcFeaOa2nQz6nevpl0fcQCMKQnuEeQC3uAZw8j0Ohq9cQ4wTDSfwliWj31EPUR6AO/tWZMu7BST+zQ0pDCD5Ei4DJs7ZDCrlMCDGDw7UwPxA7UzmL7iF07UDswO3Arw+xKZkWto5hZGebe18PGP7eLf37LP6KdAD707s3gIr1vYvavB1Y/CvtoogwTXM/6djbQj+Kezrh3coa0rNqT2cVoY5IQym5vk97H5tZNv4ub90T3ILYckpL+a649k26n87eXFe9gUVw7eQ/jMPNvbZ5Q/9FtevhgsrEjqceHISK4PRH3TUwbIPjXTQ4HTT0e1iCgcqZlG5uVnJcaF89Fgm6qo9D1qy6RHkUeR55oFcozXSoF31ZLXSv9a9WS+62SCfVS6EnP1F8oUrrg2fJJWVNBz+oa+uteDYWSx7ZVDzaoVRGEoEQjoRNkXf5gF3RTACnXNZAKBEWSUyR0Ev5CLXRQnpVqg+xMJvkGIAOiSvNFdR24aB43kVBlIB4mpvOrF8RZdPlyF2sZllVbLzRN297MNlHXWrdnwyQcywRa3AsdCQgtw0SfWmNhkqUVanKrcIw60yYO5SJKVKzC9GdgvunI3i/mY1kgc5tpL40SvRxt+klC3VY/6QdWJsqyIr64KiFQ0Prfssh00Pl94QUehaaLeUI3hVf2jSv8PqXQGxEWYJdxziFQo1AHOeWiH/Ag4B4T+jWsOfgG1lrDcnkhqwq8L1G4lmWD9rRQcfv+x/JllsQbXPNMpdWrMK8Whfk2AJcK7dF5Ok2kwdFwDE12dDnO1hcGQCqsrn9c5TqfWvvj6assyQpU6B2CH9N6HNvRyOiNbaSwkcFGomZJK928JwE1EmYc29FIAcV2a7WjpPESN1ZUaT9YnDqi6hSkw0M37ItUVe+ah0pFl1tHtbwlv0HwukryQCqHg524G9YnoonCeRZLG8Gulb/2fngpi1QmWnBRytJ9bUW3G44g3lW6yBalfWPpHtQLPoTV7DyN/y6ncIg/hDqNVrC9XSWxjNQcFtr5Gv1QR8Y/wV07G8tpIRuU7BYtN/XeUZkXMozLmZTVhiF7SLZi2LrYODUso0LlOpbRGJL4pdzGa6zKEIpA3PJI+1rCpiOdkQD7SuPuoHBRzbLCfJ+FlZ7RZ30Nmyn1x61lDo2cz79BpllDRvrzv7//cnJyQtHf0Of/nMK/f/yOBsg/PQU+TZybo2IMykTO4Zvu2nwTCqDPpAogHWXjj5CddmJlCy+8PngYzLEJk3wWbgBLwiudjloJzWj7aRMkTeinQJjBARJQbsMvl9IGrt0u3OSgzpz2VlSo8mIW5nIvWgxVJVrrr1sPewQLzyfEFxwyGeSkA9Ow+U+blNliurQnIsrmeSLX9rXBTicVa5e3Z/fCo4b9AI9QT2oWP//2ywndoQzdxFl4J8qEbzjTw9gOd+PsZuRFH2oNdV2d813hCSF7xDPgk7tjze6M9biFtdsV6/GRY907FM+Hwlx8e+hBxzxMY5SaNvfHVOdoQMzZ9lghHjnrcyhOAAgZOVfm1qK3qBqBc6u31nYDP+dHzg+2bLTBfxB0fwZXs2IH2nMLK+T0XUwXX8d0abU1oC3uXRPwN0S0U15vjG16sGoG3U4KGUKn79p9bG9+UHEs7UdCloeRqnTG8vwvHpmwqGQJHVHdbVfw/EGzaNPN+d0JDPf4W3bib3nM/N1UHZ4kY+M9xladGFsdM2Mda8wREbjfDEStZoB1bQaiIy82PWLPEXykM8HgGz4gzHO5S+GIPUL930c7bqHNu6IdHzvae/Fv09jB4/L42MsW9qIr9vLYsSd93xWBh0nge5RgGng2xq/sKXh8uCctuL2ucE+OHO69iGZfiHTvr4B+2oLe7wr99Mihtym9R/uMBTRweeDTgHlYsMfJ6bdvgaZ7LdCsUws0O+YW6GYWjqjruT1nkz3OVCfO1DFz1jFpPUkC5R6BHzsR+PGYCbxFkX+SpMV7pF12Iu3yqEnr2BU/SQajPQaTTgwmR83gjV+RR8TZ11o7u+4klrlMYQ/V6V/a6n3Ln3W9D98bzsz4yY4P2WOjkfNqUSybT0pzf7I+RSNUW9rhYbJIzY83N9Da1beAH8nlZpsPHvsTtZbx7k+Nv4TufaP7a1GaXM1kXLTwOS+imZrLWELg38H44C6BTQkxoDLPoKqHBtY+w/Y/HggMSYA/eKjjLqHeCcoPV0U4V/EjwhgYGAMLI8X/JzAWqpw/IojC/gqOBTEQTwLEQftXOcyvaNX/h8CL/wFQSwcI2Tf6BKAIAADSMAAAUEsBAhQAFAAICAgAyoNtTn/LJQHBBAAAMSUAABcAAAAAAAAAAAAAAAAAAAAAAGdlb2dlYnJhX2RlZmF1bHRzMmQueG1sUEsBAhQAFAAICAgAyoNtTnLNm03ZAgAAWQ0AABcAAAAAAAAAAAAAAAAABgUAAGdlb2dlYnJhX2RlZmF1bHRzM2QueG1sUEsBAhQAFAAICAgAyoNtTtY3vbkZAAAAFwAAABYAAAAAAAAAAAAAAAAAJAgAAGdlb2dlYnJhX2phdmFzY3JpcHQuanNQSwECFAAUAAgICADKg21O2Tf6BKAIAADSMAAADAAAAAAAAAAAAAAAAACBCAAAZ2VvZ2VicmEueG1sUEsFBgAAAAAEAAQACAEAAFsRAAAAAA==","borderColor":null,"enableShiftDragZoom":false,"enableRightClick":false,"width":1000,"height":773}, 'applet_container').inject('html5')</script><p>细心的读者可能已经发现，在这 $n$ 个单位复数根内，似乎它们总是成对存在（比如 $\omega_8^8$ 和 $\omega_8^4$ ），这是不是意味着我们能分治地去处理求值问题呢？</p><h2 id="2-2-0-三大引理"><a href="#2-2-0-三大引理" class="headerlink" title="2.2.0 三大引理"></a>2.2.0 三大引理</h2><p>在这一小节中，将介绍单位复数根的三大引理，这也是降低算法时间复杂度的关键。</p><h3 id="2-2-1-消去引理"><a href="#2-2-1-消去引理" class="headerlink" title="2.2.1 消去引理"></a>2.2.1 消去引理</h3><blockquote><p><font face='STKaiti'>对于任何整数 $n\ge 0, k\ge 0, d&gt;0$，总有</font><br>$$\omega_{dn}^{dk}=\omega_{n}^{k}$$</p></blockquote><p><strong>证明</strong>    首先我们可以形象地理解这个结论，假设我把单位圆分成 $n$ 份，从 $\omega_{n}^{0}$ 开始，取第 $k$ 份，和我把单位圆分成 $dn$ 份，从 $\omega_{dn}^{0}$ 开始，取第 $dk$ 份是不是取到的边是一样的？ 如果你喜欢严谨一点的话，下面的推导式子也不难理解。<br>$$\omega_{dn}^{dk}=(e^{\frac{2\pi i}{dn}})^{dk}=(e^{\frac{2\pi i}{n}})^k=\omega_{n}^{k}$$</p><h3 id="2-2-2-折半引理"><a href="#2-2-2-折半引理" class="headerlink" title="2.2.2 折半引理"></a>2.2.2 折半引理</h3><blockquote><p><font face='STKaiti'>如果 $n&gt;0$ *(且)*为偶数，那么 $n$ 个 $n$ 次单位复数根的平方的集合就是 $n/2$ 个 $n/2$ 次单位复数根的集合</font></p></blockquote><p>从上面的文字来理解其实是有点抽象的，其实根据图像这个结论是显然的，在图像上，这个引理就是(下面虽然是引用但是是本人总结的)：</p><blockquote><p><font face='STKaiti'>我们称单位复数根与实轴正半轴的角为夹角，那么一个单位复数根逆时针转动两倍的夹角会等价于，它先转过180°，再转过两倍的夹角</font></p></blockquote><p><strong>证明</strong>    $$(\omega_n^{k+n/2})^2=\omega_n^{2k+n}=\omega_n^{2k}\omega_n^n=\omega_n^{2k}=(\omega_n^{k})^2$$</p><p>有了它，就可以进行分治了。<br>只要运用以上两个引理，就可以进行快速求值，因此建议读者先跳过求和引理，等到需要的时候再回头看(其实不是很难)。</p><h3 id="2-2-3-求和引理（建议先跳过）"><a href="#2-2-3-求和引理（建议先跳过）" class="headerlink" title="2.2.3 求和引理（建议先跳过）"></a>2.2.3 求和引理（建议先跳过）</h3><blockquote><p>对于任意整数 $n\ge1$ 和不能被 $n$ 整除的非负整数 $k$ ，有<br>$$\displaystyle\sum_{j=0}^{n-1}(\omega_n^k)^j=0$$</p></blockquote><p>这些引理一个比一个抽象……但是不难发现，如果把图中复平面内的向量全部加起来，就是一个零向量，<strong>显然</strong>成立QWQ</p><p>好吧 还是给出严谨的证明</p><p><strong>证明</strong> 等比数列求和公式不但适用于实数，也适用于复数，因此：<br>$$\displaystyle\sum_{j=0}^{n-1}(\omega_n^k)^j=\frac{(\omega_n^k)^n-1}{\omega_n^k-1}=\frac{(\omega_n^n)^k-1}{\omega_n^k-1}=\frac{(1)^k-1}{\omega_n^k-1}=0$$</p><h1 id="3-0-FFT的递归实现"><a href="#3-0-FFT的递归实现" class="headerlink" title="3.0 FFT的递归实现"></a>3.0 FFT的递归实现</h1><h2 id="3-1-DFT离散傅里叶变换"><a href="#3-1-DFT离散傅里叶变换" class="headerlink" title="3.1 DFT离散傅里叶变换"></a>3.1 DFT离散傅里叶变换</h2><p>被上面的一团东西搞晕了？别忘了我们的目的是什么？对，求值（最终目标是实现 $O(nlogn)$ 的多项式乘法)</p><p>普通求值的复杂度是平方级别的，那是基于随机选点（或者叫做随意选点）。</p><blockquote><p>现在，我们希望计算多项式<br>$$A(x)=\displaystyle\sum_{j=0}^{n-1}a_jx^j$$<br>在 $n$ 个 $n$ 次单位复数根处的值。<br>现在多项式还是以系数的形式给出 $a=(a_0,a_1,\cdots,a_{n-1})$ ,定义结果为 $y_k$:<br>$$y_k=A(\omega_n^k)=\sum_{j=0}^{n-1}a_j\omega_n^{kj}$$</p></blockquote><p>我们称 $y$ 就是 $a$ 的<strong>离散傅里叶变换</strong>(DFT)<br>我们记作 $y=DFT_n(a)$</p><h2 id="3-2-FFT能够快速实现的奥秘"><a href="#3-2-FFT能够快速实现的奥秘" class="headerlink" title="3.2 FFT能够快速实现的奥秘"></a>3.2 FFT能够快速实现的奥秘</h2><p>假设 &amp;n&amp; 为2的整数幂  </p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>点分治学习笔记</title>
    <link href="/2019/03/01/%E7%82%B9%E5%88%86%E6%B2%BB%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2019/03/01/%E7%82%B9%E5%88%86%E6%B2%BB%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="导言"><a href="#导言" class="headerlink" title="导言"></a>导言</h2><p><del>淀粉质</del>点分治是一种统计方法，具体来说，是对树上的点的一些值来进行统计，标准的点分治统计复杂度为 $O(Nlog^2N)$ 是解决树上疑难杂症的不三之选（还有一个是树形dp）</p><h2 id="算法思路-amp-amp-具体问题"><a href="#算法思路-amp-amp-具体问题" class="headerlink" title="算法思路&amp;&amp;具体问题"></a>算法思路&amp;&amp;具体问题</h2><p><a href="https://www.luogu.org/problemnew/show/P3806">【洛谷P3806】点分治</a></p><blockquote><p>给你一棵树，有m个询问，每个询问包含一个k，问树中是否存在距离为k的点对</p></blockquote><p>这是一道很好的模板题，在这道题里面，我们具体关注点分治的想法与实现，其中有些地方复杂度会爆炸（还是能过），这里我们不做讨论</p><p>很容易得到一个 $O(N^2)$ 的算法，我们首先选一个点，然后再枚举第二个点。</p><p>但是别忘了，这是一棵树。</p><p><img src="https://gss1.bdstatic.com/9vo3dSag_xI4khGkpoWK1HF6hhy/baike/c0%3Dbaike80%2C5%2C5%2C80%2C26/sign=88a02b436d061d95694b3f6a1a9d61b4/e4dde71190ef76c6864ea9509e16fdfaaf516728.jpg" alt="随便一颗树"></p><p>假设最上面的那个节点是根，那么所有经过它的所有路径有什么特点？</p><ol><li>以它为端点。</li><li>经过它。</li></ol><p>把这些路径统计起来后，对于每个子树也统计这样的路径（注意要把根删掉），不断进行这样的分治，路径就被不重不漏地统计出来了<br>基于分治的思想，我们需要用树的重心来作为根。</p><p>于是这一题就轻松地写出来啦</p><pre><code class="cpp">#include&amp;lt;bits/stdc++.h&amp;gt;using namespace std;const int MAXN=10003;int Head[MAXN],Nt[MAXN&amp;lt;&amp;lt;1],to[MAXN&amp;lt;&amp;lt;1],val[MAXN&amp;lt;&amp;lt;1],tot;int size[MAXN],d[MAXN],a[MAXN],b[MAXN];bool w[MAXN],v[MAXN],ap[10000003];//ap用来保存出现过的路径长度，w数组用来表示删去的根节点int n,m,k[MAXN],now_part,root;int all;void add(int x,int y, int z)&#123;    Nt[++tot]=Head[x];    to[tot]=y;    val[tot]=z;    Head[x]=tot;&#125;void find_root(int x)&#123;//寻找树的重心    v[x]=1;    size[x]=1;    int max_part=0;    for(int i=Head[x];i;i=Nt[i])&#123;        int y=to[i];        if(v[y]||w[y])continue;        find_root(y);        size[x]+=size[y];        max_part=max(max_part,size[y]);    &#125;    max_part=max(max_part,all-size[x]);    if(max_part&amp;lt;now_part)&#123;        now_part=max_part;        root=x;    &#125;&#125;void dfs(int x,int deep)&#123;    v[x]=1;    if(b[x]==0)b[x]=x;    for(int i=Head[x];i;i=Nt[i])&#123;        int y=to[i],z=val[i];        if(w[y]||v[y])continue;        a[++a[0]]=y;        if(deep&amp;gt;0)b[y]=b[x];        else b[y]=y;        d[y]=d[x]+z;        ap[d[y]]=1;        dfs(y,deep+1);    &#125;&#125;void work(int x)&#123;    memset(v,0,sizeof(v));    memset(d,0,sizeof(d));    memset(b,0,sizeof(b));    w[root]=1;    a[0]=0;    dfs(x,0);//统计路径（以根为端点）    for(int i=1;i&amp;lt;=a[0];i++)&#123;//这里复杂度会爆炸        for(int j=i;j&amp;lt;=a[0];j++)&#123;            ap[d[a[i]]]=ap[d[a[j]]]=1;            if(j!=i&amp;amp;&amp;amp;b[a[i]]!=b[a[j]])ap[d[a[i]]+d[a[j]]]=1;//统计路径（经过根），b相同说明在同一个子树，不统计        &#125;    &#125;    for(int i=Head[root];i;i=Nt[i])&#123;//分治        int y=to[i];        if(w[y])continue;        all=size[y];        root=0,now_part=1&amp;lt;&amp;lt;30;        find_root(y);        work(root);    &#125;&#125;    int main()&#123;    scanf(&amp;quot;%d%d&amp;quot;,&amp;amp;n,&amp;amp;m);all=n;    for(int i=1;i&amp;lt;n;i++)&#123;        int x,y,z;        scanf(&amp;quot;%d%d%d&amp;quot;,&amp;amp;x,&amp;amp;y,&amp;amp;z);        add(x,y,z);        add(y,x,z);    &#125;    for(int i=1;i&amp;lt;=m;i++)&#123;        scanf(&amp;quot;%d&amp;quot;,&amp;amp;k[i]);    &#125;    now_part=1&amp;lt;&amp;lt;30;    find_root(1);    work(root);    for(int i=1;i&amp;lt;=m;i++)&#123;        if(ap[k[i]])printf(&amp;quot;AYE\n&amp;quot;);        else printf(&amp;quot;NAY\n&amp;quot;);    &#125;    return 0;&#125;</code></pre><p>轻松的A了上面一题之后，突然觉得点分治很简单（然而这只是我的错觉），这是因为上面的点分治是“假的”，下面这一题可以说明问题出在哪</p><p><a href="https://www.luogu.org/problemnew/show/P2634">【P2634】聪聪可可</a></p><blockquote><p>给你一棵树，问你有多少个点对之间的距离能被3整除</p></blockquote><p>有了上一题的经验，于是套上了点分治的模板，然后就TLE了QAQ，60Pt</p><pre><code class="cpp">#include&amp;lt;bits/stdc++.h&amp;gt;using namespace std;const int MAXN=20005;int Head[MAXN],Nt[MAXN&amp;lt;&amp;lt;1],to[MAXN&amp;lt;&amp;lt;1],val[MAXN&amp;lt;&amp;lt;1],tot;bool v[MAXN],w[MAXN];int size[MAXN],d[MAXN],b[MAXN],a[MAXN];int n,root,ans;int now_part=1&amp;lt;&amp;lt;30;void add(int x,int y,int z)&#123;    Nt[++tot]=Head[x];    to[tot]=y;    val[tot]=z;    Head[x]=tot;&#125;void find_root(int S,int x)&#123;    size[x]=1;    v[x]=1;    int max_part=0;    for(int i=Head[x];i;i=Nt[i])&#123;        int y=to[i];        if(v[y]||w[y])continue;        find_root(S,y);        size[x]+=size[y];        max_part=max(max_part,size[y]);    &#125;    max_part=max(max_part,S-size[x]);    if(max_part&amp;lt;now_part)&#123;        now_part=max_part;        root=x;    &#125;&#125;        void dfs(int x,int step)&#123;    v[x]=1;    for(int i=Head[x];i;i=Nt[i])&#123;        int y=to[i],z=val[i];        if(w[y]||v[y])continue;        d[y]=d[x]+z;        if(d[y]%3==0)ans++;        a[++a[0]]=y;        if(step==0)b[y]=y;        else b[y]=b[x];        dfs(y,step+1);    &#125;&#125;        void work(int x)&#123;    w[x]=1;    memset(d,0,sizeof(d));    memset(v,0,sizeof(v));    a[0]=0;    dfs(x,0);    for(int i=1;i&amp;lt;=a[0];i++)&#123;        for(int j=i+1;j&amp;lt;=a[0];j++)&#123;            if(b[a[i]]!=b[a[j]]&amp;amp;&amp;amp;(d[a[i]]+d[a[j]])%3==0)ans++;//问题出在这        &#125;    &#125;    for(int i=Head[x];i;i=Nt[i])&#123;        int y=to[i];        if(w[y])continue;        memset(v,0,sizeof(v));        find_root(size[y],y);        work(y);    &#125;&#125;int gcd(int a,int b)&#123;    return b?gcd(b,a%b):a;&#125;int main()&#123;    scanf(&amp;quot;%d&amp;quot;,&amp;amp;n);    for(int i=1;i&amp;lt;n;i++)&#123;        int x,y,z;scanf(&amp;quot;%d%d%d&amp;quot;,&amp;amp;x,&amp;amp;y,&amp;amp;z);        add(x,y,z);add(y,x,z);    &#125;    find_root(n,1);    work(root);    ans*=2;    ans+=n;    int g=gcd(ans,n*n);    printf(&amp;quot;%d/%d&amp;quot;,ans/g,n*n/g);    return 0;&#125;</code></pre><p>问题就出在我们统计路径的时候没有做到$O(N)$，一般来说，题目中总会有些特殊的性质来帮助你在这一步可以做到$O(N)$</p><p>比如这一题，我们可以用以下策略来统计：</p><ol><li>保存d数组时保存的是 mod 3 后的余数，并统计每种值的数量储存在yu数组里面</li><li>根节点的 $yu[0]^2+2yu[1]yu[2]$ 加入答案（0+0的路径还是3的倍数，1+2的路径也是3的倍数，后面的*2是排列顺序不同，前面不*2是因为两个距离根为0的点已经被yu[0]统计了，它们都在里面）</li><li>上面一个肯定有重复（在同一子树内的点对也被统计到了），于是我们对于每一棵子树，再减去 $yu[0]^2+2yu[1]yu[2]$ （这里不是分治）</li><li>再进行分治</li></ol><pre><code class="cpp">#include&amp;lt;bits/stdc++.h&amp;gt;using namespace std;const int MAXN=20003;int Head[MAXN],to[MAXN&amp;lt;&amp;lt;1],val[MAXN&amp;lt;&amp;lt;1],Nt[MAXN&amp;lt;&amp;lt;1],tot;int d[MAXN],size[MAXN];int now_part;bool w[MAXN],v[MAXN];int n,root,ans;int yu[4];int gcd(int a,int b)&#123;    return b?gcd(b,a%b):a;&#125;void add(int x,int y,int z)&#123;    Nt[++tot]=Head[x];    to[tot]=y;    val[tot]=z;    Head[x]=tot;&#125;void find_root(int S,int x)&#123;    size[x]=1;    v[x]=1;    int max_part=0;    for(int i=Head[x];i;i=Nt[i])&#123;        int y=to[i];        if(v[y]||w[y])continue;        find_root(S,y);        size[x]+=size[y];        max_part=max(max_part,size[y]);    &#125;    max_part=max(max_part,S-size[x]);    if(max_part&amp;lt;now_part)&#123;        now_part=max_part;        root=x;    &#125;&#125;void dfs(int x,int fa)&#123;    yu[d[x]]++;    for(int i=Head[x];i;i=Nt[i])&#123;        int y=to[i],z=val[i];        if(w[y]||fa==y)continue;        d[y]=(d[x]+z)%3;        dfs(y,x);    &#125;&#125;int calc(int x,int now)&#123;    yu[0]=yu[1]=yu[2]=0;    d[x]=now%3;    dfs(x,0);    return yu[0]*yu[0]+2*yu[1]*yu[2];&#125;void work(int x)&#123;    w[x]=1;    ans+=calc(x,0);    for(int i=Head[x];i;i=Nt[i])&#123;        int y=to[i];        if(w[y])continue;        ans-=calc(y,val[i]);        root=0,now_part=1&amp;lt;&amp;lt;30;        memset(v,0,sizeof(v));        find_root(size[y],y);        work(root);    &#125;&#125;int main()&#123;    scanf(&amp;quot;%d&amp;quot;,&amp;amp;n);    for(int i=1;i&amp;lt;n;i++)&#123;        int x,y,z;scanf(&amp;quot;%d%d%d&amp;quot;,&amp;amp;x,&amp;amp;y,&amp;amp;z);        add(x,y,z);add(y,x,z);    &#125;    now_part=1&amp;lt;&amp;lt;30;    find_root(n,1);    work(root);    int g=gcd(n*n,ans);    printf(&amp;quot;%d/%d&amp;quot;,ans/g,n*n/g);    return 0;&#125;</code></pre><p><a href="https://www.luogu.org/problemnew/show/P4149">P4149 [IOI2011]Race</a></p><blockquote><p>给一棵树，每条边有权。求一条简单路径，权值和等于K，且边的数量最小。</p></blockquote><p>这一题其实和一开始的模板题没两样，只不过数据范围很大，统计路径的时候不能再$O(N^2)$了</p><p>用一棵平衡树来维护就行（set足够）</p><p>由于这是存在性问题，所以不用在意统计子树时的重复统计</p><pre><code class="cpp">#include&amp;lt;bits/stdc++.h&amp;gt;using namespace std;const int MAXN=200003;int n,k;int Head[MAXN],to[MAXN&amp;lt;&amp;lt;1],val[MAXN&amp;lt;&amp;lt;1],Nt[MAXN&amp;lt;&amp;lt;1],tot;int root,now_part,cnt;int size[MAXN];pair&amp;lt;int,int&amp;gt;a[MAXN];bool v[MAXN],w[MAXN];int minn=1&amp;lt;&amp;lt;30;int read()&#123;    int x=0,f=1;char ch=getchar();    while(!isdigit(ch))&#123;if(ch==&amp;#039;-&amp;#039;)f=-1;ch=getchar();&#125;    while(isdigit(ch))&#123;x=x*10+ch-&amp;#039;0&amp;#039;;ch=getchar();&#125;    return x*f;&#125;void add(int x,int y,int z)&#123;    Nt[++tot]=Head[x];    to[tot]=y;    val[tot]=z;    Head[x]=tot;&#125;void find_root(int S,int x)&#123;    v[x]=1;    size[x]=1;    int max_part=0;    for(int i=Head[x];i;i=Nt[i])&#123;        int y=to[i];        if(v[y]||w[y])continue;        find_root(S,y);        size[x]+=size[y];        max_part=max(max_part,size[y]);    &#125;    max_part=max(max_part,S-size[x]);    if(max_part&amp;lt;now_part)&#123;        now_part=max_part;        root=x;    &#125;&#125;void dfs(int x,int vl,int step)&#123;    v[x]=1;    if(step&amp;gt;minn||vl&amp;gt;k)return;    a[++cnt]=make_pair(vl,step);    for(int i=Head[x];i;i=Nt[i])&#123;        if(v[to[i]]||w[to[i]])continue;        dfs(to[i],vl+val[i],step+1);    &#125;&#125;void work(int x)&#123;    w[x]=1;    set&amp;lt;pair&amp;lt;int,int&amp;gt; &amp;gt;st;    st.insert(make_pair(0,0));    for(int i=Head[x];i;i=Nt[i])&#123;        int y=to[i],z=val[i];        if(w[y])continue;        memset(v,0,sizeof(v));        cnt=0;        dfs(y,z,1);        set&amp;lt;pair&amp;lt;int,int&amp;gt; &amp;gt;::iterator it;        for(int i=1;i&amp;lt;=cnt;i++)&#123;            it=st.lower_bound(make_pair(k-a[i].first,0));            if(it!=st.end()&amp;amp;&amp;amp;it-&amp;gt;first+a[i].first==k)minn=min(minn,it-&amp;gt;second+a[i].second);        &#125;        for(int i=1;i&amp;lt;=cnt;i++)st.insert(a[i]);    &#125;    st.clear();    for(int i=Head[x];i;i=Nt[i])&#123;        int y=to[i];        if(w[y])continue;        memset(v,0,sizeof(v));        root=0,now_part=1&amp;lt;&amp;lt;30;        find_root(size[y],y);        work(root);    &#125;&#125;int main()&#123;    n=read(),k=read();    for(int i=1;i&amp;lt;n;i++)&#123;        int x=read(),y=read(),z=read();        add(x+1,y+1,z);add(y+1,x+1,z);    &#125;    now_part=1&amp;lt;&amp;lt;30;    find_root(n,1);    work(root);    if(minn==1&amp;lt;&amp;lt;30)printf(&amp;quot;-1\n&amp;quot;);    else printf(&amp;quot;%d\n&amp;quot;,minn);    return 0;&#125;</code></pre>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>【问题征集】关于2月1号对于徐老师提问的问题征集</title>
    <link href="/2019/01/31/%E3%80%90%E9%97%AE%E9%A2%98%E5%BE%81%E9%9B%86%E3%80%91%E5%85%B3%E4%BA%8E2%E6%9C%881%E5%8F%B7%E5%AF%B9%E4%BA%8E%E5%BE%90%E8%80%81%E5%B8%88%E6%8F%90%E9%97%AE%E7%9A%84%E9%97%AE%E9%A2%98%E5%BE%81%E9%9B%86/"/>
    <url>/2019/01/31/%E3%80%90%E9%97%AE%E9%A2%98%E5%BE%81%E9%9B%86%E3%80%91%E5%85%B3%E4%BA%8E2%E6%9C%881%E5%8F%B7%E5%AF%B9%E4%BA%8E%E5%BE%90%E8%80%81%E5%B8%88%E6%8F%90%E9%97%AE%E7%9A%84%E9%97%AE%E9%A2%98%E5%BE%81%E9%9B%86/</url>
    
    <content type="html"><![CDATA[<p>提问内容包括但不限于：<br>1.全国赛试题特点与应对策略分析报告<br>2.其他算法的巧妙应用<br>3.考场得分技巧</p><p>请勿机惨！！！</p><p>如果该你的设备加载该网站很慢，很有可能是该网站在加载“谷歌字体”，借助梯子能加速访问</p><p>另外这里是七天课程的题目，课件，题解：<a href="https://pan.baidu.com/s/1JJXcz-u_i0vbGaCtES2zFQ">链接</a><br>提取码是：pteq<br>密码是毕克的用户名!<del>wwwwodddd</del></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>【NOI导刊】冲刺NOI2019被虐记</title>
    <link href="/2019/01/25/%E3%80%90NOI%E5%AF%BC%E5%88%8A%E3%80%91%E5%86%B2%E5%88%BANOI2019%E8%A2%AB%E8%99%90%E8%AE%B0/"/>
    <url>/2019/01/25/%E3%80%90NOI%E5%AF%BC%E5%88%8A%E3%80%91%E5%86%B2%E5%88%BANOI2019%E8%A2%AB%E8%99%90%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="Day-1"><a href="#Day-1" class="headerlink" title="Day -1"></a>Day -1</h1><p>想着明天就要出发了，在机房里有点颓，一个下午+晚上也只敲了两道网络流的题目；<br>明明只是个蒟蒻，在机房里也总是感慨，时间过的真快啊，剩下的时间不多了，这个培训过后，距离省选也就70多天了吧。<br><img src="http://bubbleioa.top/wp-content/uploads/2019/01/IMG_20190120_163325.jpg"><br><img src="http://bubbleioa.top/wp-content/uploads/2019/01/IMG_20190120_163341.jpg"></p><h1 id="Day-0"><a href="#Day-0" class="headerlink" title="Day 0"></a>Day 0</h1><p>早上7点17的车，尽管昨天已经提早睡了，可还是很困，唯一比较庆幸的一点就是高铁比较空吧<br><img src="http://bubbleioa.top/wp-content/uploads/2019/01/IMG_20190124_071805.jpg"><br>在车上看了会《利兹与青鸟》，很难懂（后来才知道要先看《京吹》第二季orz）<br>从火车站到学校这段路是最难过的，深深感受到了郑州空气污染的严重<br><img src="http://bubbleioa.top/wp-content/uploads/2019/01/IMG_20190124_143603.jpg"><br>学校还是很棒的，在这个广场上曾经跳过BDF的宅舞接力——《流星群》和《交织together》（视频可以自己去B站搜）<br><img src="http://bubbleioa.top/wp-content/uploads/2019/01/IMG_20190124_155041.jpg"><br>拿到了狗牌，座位离老师很近，蛮好。<br><img src="http://bubbleioa.top/wp-content/uploads/2019/01/IMG_20190124_154651.jpg"><br>吃完晚饭后就回宾馆里颓了（实在是头晕，后面几天晚上还是有在认真学习的xd）<br>看了几集《摇曳露营Δ》我也要去露营！！！就有鬼了</p><h1 id="Day-1-1"><a href="#Day-1-1" class="headerlink" title="Day 1"></a>Day 1</h1><p>早安，郑州，这里的高中还在上学啊<br><img src="http://bubbleioa.top/wp-content/uploads/2019/01/IMG_20190125_070659.jpg"><br>上午考试，垫底，被彩虹猫D飞，果然太弱啦（题解过一会写<br>T1来个什么まんふは函数，直接说是哈夫曼函数不好吗QAQ<br>T2想到了AC自动机，打完模板后就默默地上了暴力（正解居然要用AC自动机+dp）<br>T3居然是网络流，真的属于那种告诉你是网络流，都想不到是网络流的那种题目。<br><img src="http://bubbleioa.top/wp-content/uploads/2019/01/IMG_20190125_183305.jpg"><br>明明晚上睡眠更久，中午也好好休息了，但是不知到为什么下午彩虹猫讲课的时候特别想睡觉（北方的暖气tql）<br>后面逼着自己清醒，听完了，晚上赶紧买了杯咖啡喝；</p><h1 id="Day2"><a href="#Day2" class="headerlink" title="Day2"></a>Day2</h1><p>上午考的是8年前国家队训练题……还是垫底orz<br>T1居然n^2的暴力能过，我以为n^2和n^3的分数差别不大，打了一个n^3的就去想正解，结果正解写挂，35垫底<br>正解是线段树+哈希（考场上没人用这种方法A的），还有几个大佬用bitset过了，还挺快<br>T2仙人掌，现场也有人A，tql<br>T3状压dp矩阵加速，很难</p><p>中午点外卖，郑州菜里的肉是真的多，赞（后面几天中午都吃外卖了）</p><p>下午开始飙车，树状数组+线段树+平衡树+树套树+可持久化数据结构+可并堆，3个多小时讲完，虽然有些知识是有基础，但是真的太快了……</p><p>本来晚上想逛下校园的，但吃饭等了蛮久。</p><p>涛哥讲课喜欢叫学生上来讲，虽然学生讲根本听不懂，但至少让课堂没有那么乏味了。<br>发现大佬还是挺多的，%%%%</p><h1 id="Day3"><a href="#Day3" class="headerlink" title="Day3"></a>Day3</h1><p>昨天考试发的大样例居然也放进评测里了，我机智地在最后一分钟特判输出来（结果CE了QAQ）<br>T1是0/1分数规划，了解一下<br>T2是AC自动机/KMP dp<br>T3就是一个恶心线段树</p><p>T1CE了，T2输了个大样例，时间全部花在T3上，调试了半天A了<br>有人用自动AC机拿了290，少给10分怕你骄傲orz</p><p>中午继续外卖，明天要想继续吃就要先去趟银行</p><p>下午好懵，点分治+边分治+树剖+LCT+Hash+AC自动机+后缀数组<br>如果说前面没听懂的可以回宾馆补补，那这个可能要花我一个寒假来消化。</p><p>晚上涛哥喊我上去讲T3，我感觉我在上面口胡，也不知道在讲什么，其实T3真的就是一个恶心一点的线段树，没啥好讲的……</p><p>睡前看了摇曳露营，吹爆！<br>这一集标题是两处露营，两个人眼中的风景<br>看了这一集真的很有感触<br>两处露营一处是一个人@<a href="https://www.luogu.org/space/show?uid=91499">Linz</a>，一处是一群人@<a href="https://www.luogu.org/space/show?uid=92770">March_H</a><br>@<a href="https://www.luogu.org/space/show?uid=112137">aowu</a> @<a href="https://www.luogu.org/space/show?uid=91985">Antione</a> @<a href="https://www.luogu.org/space/show?uid=106642">Ajsoabk</a><br>所看到的景象各不相同,交流着各自所看到的景象。<br>广州和郑州又相距多远呢？也就几米吧<br><img src="http://bubbleioa.top/wp-content/uploads/2019/01/yyly1.jpg"> <img src="http://bubbleioa.top/wp-content/uploads/2019/01/yyly2.jpg"> <img src="http://bubbleioa.top/wp-content/uploads/2019/01/yyly3.jpg"></p><h1 id="Day-4"><a href="#Day-4" class="headerlink" title="Day 4"></a>Day 4</h1><p>上午第一次做答案提交题，居然是这种套路！<br>T1线段树，但是要用到三角函数，我猜很多人会被卡（包括我），所以就用前缀和+差分打算拿部分分，结果出来的分数和大部分线段树的一样xd<br>T2是下午讲的二元关系的模型，题目很难读懂，反正我是看了几遍<br>T3是国家集训队的题，第一次接触提交答案题，随便写了6个点上去（居然有6分），后来才知道这种题目光一个程序是基本不可能A的（除非你把几个程序合在一起分情况使用），要观察发下来的数据的特点，真·面向数据编程</p><p>中午和@<a href="https://www.luogu.org/space/show?uid=106642">Ajsoabk</a>去银行存钱（要不然就没有外卖吃啦！）</p><p><strong>获得成就</strong><br><input checked="" disabled="" type="checkbox"> 在郑州活动范围超过500米</p><p>下午彩虹猫又回来讲课啦，讲的东西没有前面几天难。像是什么平面图最小割= 对偶图最短路、各种上下界流、二元关系、差分约束、最大权闭合子图<br>、最大密度子图……</p><p>发现这几天讲的例题基本都是各省省选和NOI真题，部分POJ和CF上的题……感觉每道题我都要消化至少3小时</p><p>外卖太好吃啦！晚上也在吃外卖（主要是发现了预定的功能）</p><p>晚上要到了彩虹猫的签名，nice！<br><img src="http://bubbleioa.top/wp-content/uploads/2019/01/sign.jpg"></p><h1 id="Day-5"><a href="#Day-5" class="headerlink" title="Day 5"></a>Day 5</h1><p>上午毕姥爷（B君）给我们带来了三道良心题（至少在网上都搜不到了），除了第三题不可做以外，前两题都还行</p><p>T1 二维树状数组，我也是这么写的，不过查询效率太低，挂掉了，后来才知道要一开始旋转下矩阵orz<br>T2 扫描线，用离散化水了40分，还行<br>T3 不可做题，不评价</p><p>毕姥爷还是带着和常州时一样的味道，<del>好怀念</del></p><p>中午继续吃外卖，郑州的食物已经俘获了我~</p><p>下午讲课全程懵逼，虽然毕姥爷课程准备一向用心（一天准备了95道例题），但我还是太弱了同不懂orz，果然如同涛哥说的，能坚持20分钟已经不错了<br>又挖了一边贾志鹏的坟，然而还是没听懂QAQ</p><p>吃晚饭的时候出去就感觉难受，空气污染太严重了，赶紧拿了外卖回机房吃</p><p>晚上毕姥爷基本给我们自习，切了道<a href="http://bubbleioa.top/archives/665">不是很难的题</a><br>从前天开始门卫就要查狗牌，还好这几天都带在身上，不过确实有几个人狗牌放在教室里被拦下来了，希望明天不要是我QAQ</p><p>安利一下<a href="http://wwwwodddd.com/">毕姥爷的博客</a>，<del>虽然没有什么内容</del></p><h1 id="Day-6"><a href="#Day-6" class="headerlink" title="Day 6"></a>Day 6</h1><p>上午的题目据说比昨天的容易？是严格的还是均摊的还是期望的？<br>感觉是严格的吧，确实更简单，但是T1打的暴力，剩下的时间全部花在T3上了。<br><a href="http://bubbleioa.top/archives/673">T3题解</a></p><p>没想到毕姥爷评测开O2，早知道写3道暴力交上去<br>今天又有自动AC机，每次都是不想太高调故意不AK</p><p>中午去@<a href="https://www.luogu.org/space/show?uid=106642">Ajsoabk</a>房间里吃饭，垃圾终于不用我来处理啦~</p><p>下午讲<strong>计 算 几 何</strong>，没有任何基础就讲了一下午例题，感觉整个人都不好了。所以也没有什么可以记下来的。<br>同样的，例题很多</p><p>晚上下了雪，没有吃外卖<br><img src="http://bubbleioa.top/wp-content/uploads/2019/01/IMG_20190130_182907.jpg"></p><h1 id="Day-7"><a href="#Day-7" class="headerlink" title="Day 7"></a>Day 7</h1><blockquote><p>这两天的内容是咕了很久才写的，有很多细节记不太清了</p></blockquote><p>今天xmk来讲课，吹爆<br>很腼腆，讲的也比较清晰。</p><h1 id="Day-8"><a href="#Day-8" class="headerlink" title="Day 8"></a>Day 8</h1><p>今天是最后一天，没有考试，上午就是xmk来给我们答疑，具体<a href="http://bubbleioa.top/archives/687">请看这里</a><br>然后就是带我们看去年noi的题目</p><ul><li>D1T1 xmk看了10分钟直接得出可持久化并查集+反向跑最短路的思路，就是正解%%%tql</li><li>D1T2 也看出是dp，设计了状态和转移方程%%%</li><li>D1T3 看出了是后缀自动机，没想到用线段树（应该是时间问题），直接82pt</li><li>D2T1 把题读了一遍，拓展中国剩余定理</li><li>D2T2和D2T3 虽然没想到正解，暴力还是有些许分的（然而网上要么就是没有题解，要么就是只有出题人的题解和std）</li></ul><p>后面由于火车的关系就提前溜了，好可惜QAQ，还想多膜一下xmk</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>关于最近连不上ssr服务器的问题</title>
    <link href="/2019/01/09/%E5%85%B3%E4%BA%8E%E6%9C%80%E8%BF%91%E8%BF%9E%E4%B8%8D%E4%B8%8Assr%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <url>/2019/01/09/%E5%85%B3%E4%BA%8E%E6%9C%80%E8%BF%91%E8%BF%9E%E4%B8%8D%E4%B8%8Assr%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p>经测试，原因是手机端的ssr在断开连接时，服务器端会产生错误信息导致进入死循环而崩溃，致使cpu占用率激增至100%而死机。</p><p>首先，确保您的ssr安卓客户端是最新版本（目前是3.5.4，安装后应用名称叫做SSRR，<a href="http://bubbleioa.top/files/shadowsocksr-android-3.5.4.apk">点此下载</a>）</p><p>如果还有此问题，将考虑实施备用方案。</p><p>另外，如果你是其他平台的用户，请参考下面内容（转自<a href="https://ssr.tools/">ssr.tools</a>）：</p><h2 id="SSR-Windows客户端"><a href="#SSR-Windows客户端" class="headerlink" title="SSR Windows客户端"></a>SSR Windows客户端</h2><p>SSR Windows客户端主要用于电脑端，目前最新版本为 4.9.0</p><p><strong>下载地址：</strong><a href="https://github.com/shadowsocksrr/shadowsocksr-csharp/releases/download/4.9.0/ShadowsocksR-win-4.9.0.zip">https://github.com/shadowsocksrr/shadowsocksr-csharp/releases/download/4.9.0/ShadowsocksR-win-4.9.0.zip</a></p><p><strong>使用教程：</strong> </p><p><a href="http://bubbleioa.top/wp-content/uploads/2019/05/ssr-windows.png">点击查看</a></p><h2 id="SSR-Android客户端"><a href="#SSR-Android客户端" class="headerlink" title="SSR Android客户端"></a>SSR Android客户端</h2><p>SSR 安卓客户端主要用于安卓手机、安卓平板平台，目前最新版本为3.5.4</p><p><strong>下载地址：</strong><a href="https://github.com/shadowsocksrr/shadowsocksr-android/releases/download/3.5.4/shadowsocksr-android-3.5.4.apk">https://github.com/shadowsocksrr/shadowsocksr-android/releases/download/3.5.4/shadowsocksr-android-3.5.4.apk</a></p><p><strong>使用教程：</strong><br><a href="http://bubbleioa.top/wp-content/uploads/2019/05/ssr-android.png">点击查看</a></p><h2 id="SSR-iOS客户端"><a href="#SSR-iOS客户端" class="headerlink" title="SSR iOS客户端"></a>SSR iOS客户端</h2><p>需要美版账号（其他国家的没试过），<a href="http://bubbleioa.top/wp-content/uploads/2019/05/ssr-get.png">点击查看获取方法</a></p><p>ssr应用推荐（参考），<a href="http://bubbleioa.top/wp-content/uploads/2019/05/ssr-ios.png">点击查看</a></p><p>配置方法其实和安卓，windows差不多，都是填那几个参数。</p><h2 id="SSR-MacOS客户端"><a href="#SSR-MacOS客户端" class="headerlink" title="SSR MacOS客户端"></a>SSR MacOS客户端</h2><p><strong>下载地址：</strong><a href="https://github.com/qinyuhang/ShadowsocksX-NG-R/releases/download/1.4.3-R8-build3/ShadowsocksX-NG-R8.dmg">https://github.com/qinyuhang/ShadowsocksX-NG-R/releases/download/1.4.3-R8-build3/ShadowsocksX-NG-R8.dmg</a></p><p><strong>使用方法：</strong>和Windows几乎没区别</p><h2 id="SSR-Linux客户端"><a href="#SSR-Linux客户端" class="headerlink" title="SSR Linux客户端"></a>SSR Linux客户端</h2><p>这是一个有图形界面的Linux客户端，下载和安装请见：<br><a href="https://github.com/erguotou520/electron-ssr">https://github.com/erguotou520/electron-ssr</a></p><p>使用方法和上面的类似。</p><h2 id="SSR-路由器客户端"><a href="#SSR-路由器客户端" class="headerlink" title="SSR 路由器客户端"></a>SSR 路由器客户端</h2><p>如果想要所有局域网设备，无需一一设置，自动实现科学上网，那么有效的途径就是在路由器上安装SSR客户端，实现局域网所有设备科学上网。</p><h3 id="路由器科学上网所需条件"><a href="#路由器科学上网所需条件" class="headerlink" title="路由器科学上网所需条件"></a>路由器科学上网所需条件</h3><p>在路由器上安装SSR客户端的前提，是路由器可以安装第三方固件，然后在第三方固件中安装SSR客户端。</p><p><strong>1.不能是普通的TP-Link、迅捷、腾达等大众路由器。</strong><br>原因：这些大众品牌路由器，其官方固件功能比较简单，同时又无法刷入功能强大的第三方固件。</p><p><strong>2.有哪些品牌的路由器可以安装SSR？</strong><br>一般来说，新兴的互联网品牌路由器，一般都可以安装第三方固件，并且比较便宜。比如Newifi路由器、小米路由器、斐迅路由器、极路由等。<br>另外老牌的华硕路由器、网件路由器、Linksys路由器等，这些大牌路由，基本都可以安装第三方固件，不过价格相对比较高。</p><p><strong>3.有哪些第三方固件可供选择？</strong><br>目前比较主流的第三方固件有：openwrt、LEDE、PandoraBox、老毛子（Padavan）、梅林。其中LEDE是openwrt的最新版名称，PandoraBox是openwrt基础上的打包版本。这三者的本质都是openwrt，都可以自己在系统内安装SSR等功能。<br>老毛子和梅林则集成众多实用功能，自带SSR，固件相对比较封闭。<br>新手的话，推荐用老毛子固件或梅林固件，功能强大，自带功能也够用，免去自己安装的麻烦。</p><p><strong>4.上面提到的固件，分别对应哪些路由器？</strong><br>华硕、网件的路由器，大部分都可以适配第三方的梅林固件，梅林固件自带SSR。<br>Linksys的路由器，大部分都可适配第三方的openwrt或LEDE固件。<br>小米、Newifi、斐迅、极路由等品牌，则可以适配PandoraBox或老毛子固件，也自带SSR。</p><p>由于老毛子固件和梅林固件，自带SSR，无需另外安装，下面我们主要介绍下openwrt固件下，SSR的下载，安装和使用。</p><h3 id="openwrt固件-SSR安装教程"><a href="#openwrt固件-SSR安装教程" class="headerlink" title="openwrt固件 SSR安装教程"></a>openwrt固件 SSR安装教程</h3><p><strong>下载地址：</strong> <a href="https://github.com/ywb94/openwrt-ssr/releases/download/V1.2.1/luci-app-shadowsocksR_1.2.1.rar">https://github.com/ywb94/openwrt-ssr/releases/download/V1.2.1/luci-app-shadowsocksR_1.2.1.rar</a></p><ol><li>以上压缩包下载完成后解压，会得到6个文件夹，分别代表6种CPU架构，我们只需用到其中1个。</li><li>查询你的路由器是什么CPU、CPU是什么架构。查到后打开对应的文件夹。</li><li>文件夹内有两个SSR版本，一个带GFW字样、一个不带。推荐选择不带GFW的版本，因为GFW版本需要路由器其它模块的配合，比较麻烦。</li><li>在PC端用Winscp连接路由器，连接时协议选SCP，端口为22，用户名密码一般与你的路由登录密码一致。连接成功后，将luci-app-shadowsocksR_1.2.1_all.ipk上传至路由器的 /tmp目录。</li><li>打开Putty运行以下命令：<code>opkg install /tmp/luci-app-shadowsocksR_1.2.1_all.ipk</code></li><li>以上命令成功运行完成后，SSR就安装成功了。</li><li>打开路由器后台管理页面刷新，在菜单的服务一栏下，找到ShadowsocksR就代表安装成功了。<h3 id="openwrt固件-SSR使用教程"><a href="#openwrt固件-SSR使用教程" class="headerlink" title="openwrt固件 SSR使用教程"></a>openwrt固件 SSR使用教程</h3>打开路由器后台管理页面，依次打开 菜单——服务——ShadowsocksR</li></ol><p>在最上方的客户端、服务端、状态三项中，我们只需配置客户端，服务端一般用不到。</p><p><strong>客户端配置</strong></p><p>在默认的客户端界面中，从上到下分为以下几大项：</p><ul><li>服务器配置</li><li>全局设置</li><li>SOCKS 5代理</li><li>访问控制<br>下面我们依次介绍。<a href="http://bubbleioa.top/wp-content/uploads/2019/05/ssr-luyouqi.png">点击查看</a></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>2018年10月新番个人总结</title>
    <link href="/2019/01/01/2018%E5%B9%B410%E6%9C%88%E6%96%B0%E7%95%AA%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/"/>
    <url>/2019/01/01/2018%E5%B9%B410%E6%9C%88%E6%96%B0%E7%95%AA%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<p>2018年已经过去，咕到现在的10月新番总结现在也是时候填了（然而AC自动机还没填……）</p><p>这一个季度的新番真的是让人看得舒服，好久没有追过这么多番了（主要是停课有更多时间来追番？！）</p><p>下面就对我看过的/看完的新番做一个总结和主观评分吧。</p><p>绝大多数不含剧透或只有轻微剧透</p><hr><h1 id="中途弃坑的番"><a href="#中途弃坑的番" class="headerlink" title="中途弃坑的番"></a>中途弃坑的番</h1><p><kbd>只对没有弃坑的番打分，所以这一部分并不会打分</kbd></p><h2 id="只要贝尔哲布布大小姐喜欢就好"><a href="#只要贝尔哲布布大小姐喜欢就好" class="headerlink" title="只要贝尔哲布布大小姐喜欢就好"></a><a href="http://bangumi.bilibili.com/anime/25697">只要贝尔哲布布大小姐喜欢就好</a></h2><blockquote><p>观看集数：3集；</p><p>弃坑原因：太闲</p></blockquote><p><img src="https://i0.hdslb.com/bfs/bangumi/468ebdb93491b6fa263cf5eb829a0ec65ed266ab.png@282w_375h.webp"></p><p>画风淡淡的甜甜的，很喜欢，为什么当初要看？因为这季没什么中意的萌豚番，随便找找看看有什么替代品，但是任然没找到……</p><p>很适合下午茶的时候看，如果有下午茶的话……</p><h2 id="邻家索菲"><a href="#邻家索菲" class="headerlink" title="邻家索菲"></a><a href="http://bangumi.bilibili.com/anime/25619">邻家索菲</a></h2><blockquote><p>观看集数：6集；</p><p>弃坑原因：有点闲</p></blockquote><p><img src="https://i0.hdslb.com/bfs/bangumi/fa89d4ce62d87c6ff641c617c6bf62c8f19ceafd.jpg"></p><p>百合的感觉还是没有太强，作品就是围绕吸血鬼在现代社会的种种表现展开的，然而我并不关心吸血鬼在现在是干啥的。</p><p>作为一部百合向作品不是很优秀，不是很推荐观看。</p><h2 id="来自多彩世界的明天"><a href="#来自多彩世界的明天" class="headerlink" title="来自多彩世界的明天"></a><a href="https://www.iqiyi.com/lib/m_218768414.html">来自多彩世界的明天</a></h2><blockquote><p>观看集数：7集；</p><p>弃坑原因：胃疼</p></blockquote><p><img src="https://gss1.bdstatic.com/9vo3dSag_xI4khGkpoWK1HF6hhy/baike/c0%3Dbaike272%2C5%2C5%2C272%2C90/sign=ef1a4764bb003af359b7d4325443ad39/4a36acaf2edda3cca5101f4d0ce93901203f92e3.jpg"></p><p>画面很清新，叙事很文艺，分镜有内涵。但是就是胃疼。</p><p>其实这部作品相比起其他作品以及很好了，并不会真的那么胃疼。</p><p>但是这还是和我对这部作品的期望有关，追这部番主要是因为是P.A.WORKS制作的，我对它的印象很好，所以追了，看到第一话被这个设定和背景吸引到了，相比起恋爱题材，我还是更喜欢看P.A.WORKS的成长题材的作品（所以说如果这部作品的主人公是祖母的话我可能会一直追下去）</p><p>它只是不和我胃口罢了，口碑还是不错的，推荐看看！</p><p>如果有机会的话我还是会把它补完的。</p><h2 id="ANIMAYELL"><a href="#ANIMAYELL" class="headerlink" title="ANIMAYELL!"></a><a href="http://www.bilibili.com/bangumi/media/md139392/?from=search&seid=15396211842182696801">ANIMAYELL!</a></h2><blockquote><p>观看集数：1分钟</p><p>弃坑原因：叫声太鬼畜</p></blockquote><p><img src="https://i0.hdslb.com/bfs/bangumi/c2f0210ea631cc5cf310aa3d9aabf3becb624ec0.png@282w_375h.webp"></p><p>芳文社+动画工房，我本来是没有理由不看的，但是发现这部番的时候确实很晚了，再加上鬼畜的叫声，想看下去真的很难。于是就错过了……</p><p>如果下一个季度没什么中意的萌豚番就回来看这个吧。</p><h2 id="书店里的骷髅店员本田"><a href="#书店里的骷髅店员本田" class="headerlink" title="书店里的骷髅店员本田"></a><a href="http://www.bilibili.com/bangumi/media/md134952/?from=search&seid=18426877219675571352">书店里的骷髅店员本田</a></h2><blockquote><p>观看集数：3集</p><p>弃坑原因：太过遥远</p></blockquote><p><img src="https://i0.hdslb.com/bfs/bangumi/e8f69149d5cba4a333938e71b74c00cf90f0d99c.png@282w_375h.webp"></p><p>一开始感觉还挺有意思，都是自己不了解的文化以及工作方式。</p><p>后面就感觉离自己好遥远，没啥意思了。</p><h2 id="终将成为你"><a href="#终将成为你" class="headerlink" title="终将成为你"></a><a href="http://bangumi.bilibili.com/anime/25622">终将成为你</a></h2><blockquote><p>观看集数：2集</p><p>弃坑原因：硬核</p></blockquote><p><img src="https://i0.hdslb.com/bfs/bangumi/9254b0bafd699c1a778c42658497948ba3038a77.png@282w_375h.webp"></p><p>看过柑橘味香气，以为自己能接受硬核百合，但是这一部不一样，它的情感表达有点含蓄。换句话说，看柑橘味香气和看点兔的时候里面的人物是很单纯的，就如百合花一样，但是这部番的硬核之处就在于情感表达含蓄。</p><p>所以说我喜欢看百合并不是喜欢看妹子们日常的嬉戏互动（当然也有这方面的原因orz），而是喜欢单纯美好的东西。</p><hr><h1 id="追完了的-正在追的番"><a href="#追完了的-正在追的番" class="headerlink" title="追完了的|正在追的番"></a>追完了的|正在追的番</h1><h2 id="三生三世古利特SSSS-古立特"><a href="#三生三世古利特SSSS-古立特" class="headerlink" title="三生三世古利特SSSS 古立特"></a><del>三生三世古利特</del><a href="http://v.qq.com/x/cover/o28lfr4elqppz6q.html">SSSS 古立特</a></h2><blockquote><p>主观评分：<strong>3.2</strong>/5</p></blockquote><p><img src="http://puui.qpic.cn/vcover_vt_pic/0/o28lfr4elqppz6q1538117489/0"></p><p>我从来不看特摄篇，包括它衍生的各类作品。但是由于宝多六花还是在第三集上线的时候追了。</p><p>但是真的让我十分失望，我给的3.2分中有2分是给六花的。</p><p>一个字就可以概括这部番给我的感受：迷</p><p>世界观全无，人物背景全无，人物动机全无，故事冲突由于缺乏动机很难让人接受，新条茜莫名洗白……</p><p>真的，还不如原版的特摄片。</p><p>扳机社也制作过让我感动的作品但这次的古利特是显然不合格的。</p><h2 id="刀剑神域-Alicization"><a href="#刀剑神域-Alicization" class="headerlink" title="刀剑神域 Alicization"></a><a href="http://bangumi.bilibili.com/anime/25510">刀剑神域 Alicization</a></h2><blockquote><p>主观评分：<strong>3.9</strong>/5</p></blockquote><p><img src="https://i0.hdslb.com/bfs/bangumi/911c5a54441d614ac53b46574838d4721a80cf98.jpg@282w_375h.webp"></p><p>目前来讲是3.9分，总感觉剧情处理方面还是有点不太好，没有我看第一季的时候的那种感觉，具体来说就是成长的感觉（因为桐人已经很强了），既然已经很强了，那就装逼吧，但是总是准备一集，然后1分钟就没了。</p><p>对，就是感觉目前为止桐人的表现还不够活跃。</p><p>优点还是有的，就是世界观解说得非常详细，可以期待下后续的表现。</p><h2 id="关于我转生变成史莱姆这档事"><a href="#关于我转生变成史莱姆这档事" class="headerlink" title="关于我转生变成史莱姆这档事"></a><a href="http://bangumi.bilibili.com/anime/25739">关于我转生变成史莱姆这档事</a></h2><blockquote><p>主观评分：<strong>4.1</strong>/5</p></blockquote><p><img src="https://i0.hdslb.com/bfs/bangumi/a4c0e0ccc44fe3949a734f546cf5bb07da925bad.png@282w_375h.webp"></p><p>先说下缺点吧，剧情很拖沓。都一个季度过去了，上面主视图的人物还没有全部出场。</p><p>优点也有很多，比如说让人看得很舒服，这类转生到异世界的题材有一个优势就是很容易让读者感受到主人公的成长（毕竟是白手起家）</p><p>前期其实伏笔埋得很多，期待下后面怎么用吧。</p><h2 id="月影特工（其实叫忍者阿卡林）"><a href="#月影特工（其实叫忍者阿卡林）" class="headerlink" title="月影特工（其实叫忍者阿卡林）"></a><a href="http://www.acfun.cn/bangumi/aa5022156">月影特工</a>（其实叫<del>忍者阿卡林</del>）</h2><blockquote><p>主观评分：<strong>4.2</strong>/5</p></blockquote><p><img src="http://imgs.aixifan.com/cms/2018_10_29/1540809854635.jpg?imageView2/1/w/225/h/300"></p><p>其实这部作品在国内外评价不是特别好，但是我还是特别喜欢这部作品，酷酷的音乐，酷酷的行动。</p><p>但是这些都不是最重要的，这部番最吸引我的就是它其中的师徒关系吧，现实中作为一名师傅，真的很羡慕这种关系QAQ</p><p>还有这部番还有点轻百合元素，也是我给它的加分项。</p><p>客观来说这部番并不优秀，但是还是安利给大家看下！！！</p><h2 id="佐贺偶像是传奇"><a href="#佐贺偶像是传奇" class="headerlink" title="佐贺偶像是传奇"></a><a href="http://www.acfun.cn/bangumi/aa5022161">佐贺偶像是传奇</a></h2><blockquote><p>主观评分：<strong>4.5</strong>/5</p></blockquote><p><img src="http://imgs.aixifan.com/cms/2018_10_29/1540809919451.jpg?imageView2/1/w/225/h/300"></p><p>“Fran Chou Chou 是超越了时代 为了互相支持各自的想法而存在的 胸怀昭和偶像的矜持 在这个时代展开活动的你的身影”</p><p>出了三集才追的这部番，我也不明白自己为什么这么喜欢这部番，但是如果把它和其他的偶像番对比下可能就会找到答案。</p><ol><li>角色不同时代，有多元的角色魅力</li><li>永恒的存在，不用考虑现实的可能性</li><li>加入了搞笑和无厘头的元素</li></ol><p>但是它的魅力还远不止于此，请务必去亲自体会，第二季是肯定有了。</p><h2 id="青春猪头少年不会梦到兔女郎学姐"><a href="#青春猪头少年不会梦到兔女郎学姐" class="headerlink" title="青春猪头少年不会梦到兔女郎学姐"></a><a href="http://bangumi.bilibili.com/anime/25733">青春猪头少年不会梦到兔女郎学姐</a></h2><blockquote><p>主观评分：<strong>4.8</strong>/5</p></blockquote><p><img src="https://i0.hdslb.com/bfs/bangumi/1cc333ff578e5ea9fded7e454953a4e2291440c2.png@282w_375h.webp"></p><p>我是从《樱花庄的宠物女孩》认识的鸭志田一，它笔下所描绘出来的青春，看上去是华丽的，飘渺的，但实际上又有几分现实。我至今还记得，初三看《樱花庄》最后一集的时候，空太一行人在烟火下的奔跑，他们都有自己想做的事，他们也有成功也有失败，他们有的人天赋异禀也有不那么擅长的……伴随着他们的奔跑，我也开始了奔跑。</p><p>我其实一直想看“青春猪头系列”的小说，奈何初三暑假在荒郊野岭，高一住宿，走读后又在学奥赛，一直没能抽空阅读。直到这次的动画化。</p><p>我不太想告诉大家这部作品有多好，因为我做不到，这样只会凸显出我的拙劣文笔，所以我只能说说其他方面。</p><p>“有多少个人，就有多少个可见的世界，一定如此。就像你看到的地平线，要比我所能看到的更远一样，这股海风也是一样，既有人觉得舒服，也有人因为这会让皮肤和头发黏糊糊，所以不喜欢。……我的人生中也绝没有什么远大的梦想或希望，但即便如此，我还是找到了机子的人生意义。我呢， 觉得人生是为了变得善良而存在的，一边思考‘今天的我哪怕能比昨天更善良一点就好了’一边去生活。既然你知道不被人理解的痛苦，一定会变得比别人更加善良，一定能成为别人的支撑。”——牧之原翔子</p><p>原先我看番的时候其实是经常审视自己的，但是最近却没有，这段话确实又唤起了我的这份记忆。而且看完最后一话，我突然有了想写日记的想法（也确实在这么做），并不是无脑模仿，而是发自真心地想让自己变得更好。</p><p>如果你都看到这里还不去看这部番的化就是不给我面子了QAQ</p><p>由于不能剧透所以并没有详细地介绍和总结这部番，等哪天我二刷的时候再填上吧。</p><p>剧场版也不远了</p><hr><h1 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h1><p>这个总结写了我整整一年！！！！</p><p>这个季度是最让我看得开心的季度，今年希望也如此。</p><p>但是今年还是少追点番吧，毕竟压力更大了orz</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>NOIP2018复盘（终于不咕咕啦！）</title>
    <link href="/2018/11/11/NOIP2018%E5%A4%8D%E7%9B%98%EF%BC%88%E7%BB%88%E4%BA%8E%E4%B8%8D%E5%92%95%E5%92%95%E5%95%A6%EF%BC%81%EF%BC%89/"/>
    <url>/2018/11/11/NOIP2018%E5%A4%8D%E7%9B%98%EF%BC%88%E7%BB%88%E4%BA%8E%E4%B8%8D%E5%92%95%E5%92%95%E5%95%A6%EF%BC%81%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>先占个坑，<del>突然发现可以把发布时间调早一点</del></p><h1 id="D1T1-铺设道路"><a href="#D1T1-铺设道路" class="headerlink" title="D1T1 铺设道路"></a>D1T1 铺设道路</h1><blockquote><p><a href="https://www.luogu.org/problemnew/show/P5019">题面</a></p></blockquote><p>虽然很多人在喊是原题，但是还是写下放下三种写法吧。<br>很容易想到解法，就是维护区间最小值，达到[latex]O(nlogn)[/latex]的复杂度。<br>但是这样子的写法无论是时间上还是代码复杂度上都比不过正解。</p><pre><code class="cpp">#include&amp;lt;iostream&amp;gt;#include&amp;lt;cstdio&amp;gt;#define lt p&amp;lt;&amp;lt;1#define rt (p&amp;lt;&amp;lt;1)|1using namespace std;const int MAXN =100000;int n,cnt,ans;struct segT&#123;    int r,l,num,id;&#125;tree[MAXN*4];void build(int p,int l,int r)&#123;    tree[p].r=r,tree[p].l=l;    if(l==r)&#123;        scanf(&amp;quot;%d&amp;quot;,&amp;amp;tree[p].num);        tree[p].id=++cnt;        return;    &#125;    int mid=(l+r)&amp;gt;&amp;gt;1;    build(lt,l,mid);    build(rt,mid+1,r);    if(tree[lt].num&amp;gt;tree[rt].num)&#123;        tree[p].num=tree[rt].num;        tree[p].id=tree[rt].id;    &#125;    else &#123;        tree[p].num=tree[lt].num;        tree[p].id=tree[lt].id;    &#125;&#125;int ask(int p,int ql,int qr)&#123;    if(tree[p].l&amp;gt;=ql&amp;amp;&amp;amp;tree[p].r&amp;lt;=qr)&#123;        return p;    &#125;    int mid=(tree[p].l+tree[p].r)/2;    if(mid&amp;gt;=qr)return ask(lt,ql,qr);    if(mid&amp;lt;ql)return ask(rt,ql,qr);    int o1=ask(lt,ql,qr),o2=ask(rt,ql,qr);    if(tree[o1].num&amp;lt;tree[o2].num) return o1;    else return o2;&#125;void dfs(int l,int r,int sum)&#123;    if(l&amp;gt;r)return;    int tmp=ask(1,l,r);    ans+=(tree[tmp].num-sum);    dfs(l,tree[tmp].id-1,tree[tmp].num);    dfs(tree[tmp].id+1,r,tree[tmp].num);&#125;int main()&#123;    cin&amp;gt;&amp;gt;n;    build(1,1,n);    dfs(1,n,0);    cout&amp;lt;&amp;lt;ans;    return 0;&#125;</code></pre><p>考场上炸了（具体看我的退役记orz）写了一个[latex]O(nm)[/latex]的复杂度的算法，m是数字的种类。（其实这个复杂度我也不是很确定）<br>然后测了4组数据，学军的和牛客的只有70，另外两组是100<del>跑的还挺快</del>，希望官方数据不要把我卡掉啊QAQ  </p><pre><code class="cpp">#include&amp;lt;bits/stdc++.h&amp;gt;using namespace std;const int MAXN=100003;int a[MAXN];int n;int main()&#123;    scanf(&amp;quot;%d&amp;quot;,&amp;amp;n);    for(int i=1;i&amp;lt;=n;i++)scanf(&amp;quot;%d&amp;quot;,&amp;amp;a[i]);    long long ans=0;    for(int i=1;i&amp;lt;=n;i++)&#123;        while(a[i]!=0)&#123;            int l=i,r=i;            int mi=a[i];            while(l-1&amp;gt;=1&amp;amp;&amp;amp;a[l-1]!=0)mi=min(a[--l],mi);            while(r+1&amp;lt;=n&amp;amp;&amp;amp;a[r+1]!=0)mi=min(a[++r],mi);            for(int j=l;j&amp;lt;=r;j++)a[j]-=mi;            ans+=mi;        &#125;    &#125;    cout&amp;lt;&amp;lt;ans&amp;lt;&amp;lt;endl;    return 0;&#125;</code></pre><p>正解只有12行，很容易想到，前面的如果比后面的高，肯定需要额外的操作来消除，记录入cnt即可</p><pre><code class="cpp">#include&amp;lt;bits/stdc++.h&amp;gt;using namespace std;int n,d[100005],cnt;int main()&#123;    scanf(&amp;quot;%d&amp;quot;,&amp;amp;n);    for(int i=1;i&amp;lt;=n;i++)&#123;        scanf(&amp;quot;%d&amp;quot;,&amp;amp;d[i]);        if(d[i]&amp;gt;d[i-1]) cnt+=d[i]-d[i-1];    &#125;    cout&amp;lt;&amp;lt;cnt;    return 0;&#125;</code></pre><p>还是想说下ccf这种恶劣的行为，又不是没有更好的题目，这样子真的是没意思……</p><h1 id="D1T2-货币系统"><a href="#D1T2-货币系统" class="headerlink" title="D1T2 货币系统"></a>D1T2 货币系统</h1><blockquote><p><a href="https://www.luogu.org/problemnew/show/P5020">题面</a></p></blockquote><p><strong>居然没有看出是完全背包！！！</strong>，一开始还用着自己智障的数学推论，结果最后还是打的深搜，60pt到85pt左右  </p><pre><code class="cpp">#include&amp;lt;bits/stdc++.h&amp;gt;using namespace std;int n;int a[112];int flag;void dfs(int now,int lim,int tar)&#123;    if(now&amp;gt;tar||flag)return;    if(now==tar)&#123;flag=1;return;&#125;    for(int i=1;i&amp;lt;=lim;i++)&#123;        if(a[i]==-1)continue;        dfs(now+a[i],lim,tar);        if(flag)return;    &#125;&#125;int main()&#123;    int t;scanf(&amp;quot;%d&amp;quot;,&amp;amp;t);    while(t--)&#123;        scanf(&amp;quot;%d&amp;quot;,&amp;amp;n);        int ans=n;        for(int i=1;i&amp;lt;=n;i++)scanf(&amp;quot;%d&amp;quot;,&amp;amp;a[i]);        sort(a+1,a+1+n);        for(int i=1;i&amp;lt;=n;i++)&#123;            flag=0;            dfs(0,i-1,a[i]);            if(flag==1)&#123;                ans--;a[i]=-1;            &#125;        &#125;        cout&amp;lt;&amp;lt;ans&amp;lt;&amp;lt;endl;    &#125;    return 0;&#125;</code></pre><p>正解其实有点像数论里面的筛法</p><p>考虑 $f[i]$ 表示价格 $i$ 能被出示， $f[0]=1$</p><p>由于大面值的钱不能表示小面值的，但小面值可能可以表示大面值的钱<br>我们对面值进行升序排序，对于每一个面值 $a[i]$ 它能表示的钱为 $x\times a[i] , x\in N $<br>于是我们遇到一个数 $a[i]$ 先判断 $a[i]$ 是否能被表示（即 $f[a[i]]$ 是否为1 ），如果能被表示，则答案减一，否则更新 $f$</p><p><del>这么简单没拿100真的很后悔</del></p><pre><code class="cpp">#include&amp;lt;bits/stdc++.h&amp;gt;using namespace std;int n;int a[112];bool f[25005];int main()&#123;    int t;scanf(&amp;quot;%d&amp;quot;,&amp;amp;t);    while(t--)&#123;        scanf(&amp;quot;%d&amp;quot;,&amp;amp;n);        int ans=n;        for(int i=1;i&amp;lt;=n;i++)scanf(&amp;quot;%d&amp;quot;,&amp;amp;a[i]);        sort(a+1,a+1+n);memset(f,0,sizeof(f));        f[0]=1;        for(int i=1;i&amp;lt;=n;i++)&#123;            if(f[a[i]])&#123;                ans--;continue;            &#125;            for(int j=a[i];j&amp;lt;=25000;j++)f[j]=f[j]|f[j-a[i]];        &#125;        cout&amp;lt;&amp;lt;ans&amp;lt;&amp;lt;endl;    &#125;    return 0;&#125;</code></pre><h1 id="D1T3-赛道修建"><a href="#D1T3-赛道修建" class="headerlink" title="D1T3 赛道修建"></a>D1T3 赛道修建</h1><blockquote><p><a href="https://www.luogu.org/problemnew/show/P5021">题面</a></p></blockquote><p>考场40pt，实际上有55pt的部分分是很好拿的，这里只介绍AC做法，<del>我被卡常了！！</del></p><p>看到最小的最大值，马上想到二分答案，但是如何判断这个答案是否可行呢？</p><p>虽然它图画的是方方正正的，但是它任然是一棵树，我们可以考虑自下向上的统计答案</p><p>显然一个子节点到父节点的道路只有一条，为了最优，我们希望子节点拿一条最长的路贡献给父节点</p><p>假设子节点能给父节点提供的长度为 $val_i$ （其中已经包含子节点到父节点路径长度）</p><p>该父节点首先要考虑能否选出满足二分答案k的赛道。</p><ol><li>$k\leq val_i$ 这时这条赛道符合</li><li>$k\leq val_a+val_b $ 这时这两条路径组合成的道路符合</li></ol><p>对于第一种情况我们很容易就能判断出，但是对于第二种情况，我们如果希望答案最优，就要从最小的 $val_a$ 考虑，为此，我们需要找到一个最小的 $val_b$ 使得 $k\leq val_a+val_b $</p><p>这个可以用 $multiset$ 来处理。</p><p>注意被选中的路径不能再贡献给当前节点的父节点了。</p><p>可以考虑找出树的直径优化二分上界。</p><p>在loj上最慢的点也才200ms，但是洛谷上T了两个点（怕不是要手写平衡树）</p><pre><code class="cpp">#include &amp;lt;bits/stdc++.h&amp;gt;using namespace std;const int MAXN = 50005;int Head[MAXN], Nt[MAXN &amp;lt;&amp;lt; 1], to[MAXN &amp;lt;&amp;lt; 1], w[MAXN &amp;lt;&amp;lt; 1], tot = 1;int n, m, sum;int d[MAXN];bool v[MAXN &amp;lt;&amp;lt; 1];int flag = 0;int mx, mxid, res;multiset&amp;lt;int&amp;gt; s[MAXN];multiset&amp;lt;int&amp;gt;::iterator it;void add(int a, int b, int c) &#123;    Nt[++tot] = Head[a];    to[tot] = b;    w[tot] = c;    Head[a] = tot;&#125;int dfs(int x, int fa, int k) &#123;    s[x].clear();    int val;    for (int i = Head[x]; i; i = Nt[i]) &#123;        int y = to[i];        if (y == fa)            continue;        val = dfs(y, x, k) + w[i];        if (val &amp;gt;= k)//已经满足条件，条数+1            res++;        else            s[x].insert(val);    &#125;    int maxx = 0;    while (s[x].size()) &#123;        if (s[x].size() == 1) &#123;//如果只有一个子节点（子树），直接返回            return max(maxx, *s[x].begin());        &#125;        it = s[x].lower_bound(k - *s[x].begin());//找到最小的x,使得x+最小值&amp;gt;=k        if (it == s[x].begin() &amp;amp;&amp;amp; s[x].count(*it) == 1)//如果找到的是最小值自己(即最小值两倍&amp;gt;=k)，但是最小值是唯一的，找下一个            it++;        if (it == s[x].end()) &#123;//如果没找到            maxx = max(maxx, *s[x].begin());//说明当前的最小值不行，请离场            s[x].erase(s[x].find(*s[x].begin()));        &#125; else &#123;            res++;//如果找到了，条数+1            s[x].erase(s[x].find(*it));//女嘉宾离场            s[x].erase(s[x].find(*s[x].begin()));//男嘉宾离场        &#125;    &#125;    return maxx;&#125;void dfs1(int x) &#123;    for (int i = Head[x]; i; i = Nt[i]) &#123;        int y = to[i];        if (v[y])            continue;        v[y] = 1;        d[y] = d[x] + w[i];        if (d[y] &amp;gt; mx) &#123;            mx = d[y];            mxid = y;        &#125;        dfs1(y);    &#125;&#125;bool check(int k) &#123;    res = 0;    dfs(1, 0, k);    if (res &amp;gt;= m)        return 1;    return 0;&#125;int main() &#123;    scanf(&amp;quot;%d%d&amp;quot;, &amp;amp;n, &amp;amp;m);    for (int i = 1; i &amp;lt; n; i++) &#123;        int a, b, c;        scanf(&amp;quot;%d%d%d&amp;quot;, &amp;amp;a, &amp;amp;b, &amp;amp;c);        add(a, b, c);        add(b, a, c);        sum += c;    &#125;    dfs1(1);    int y = mxid;    mx = 0;    memset(v, 0, sizeof(v));    memset(d, 0, sizeof(d));    dfs1(y);    int ans = 0;    int l = 1;    int r = mx;    while (l &amp;lt;= r) &#123;        int mid = (l + r) &amp;gt;&amp;gt; 1;        if (check(mid)) &#123;            ans = mid;            l = mid + 1;        &#125; else            r = mid - 1;    &#125;    printf(&amp;quot;%d\n&amp;quot;, ans);    return 0;&#125;</code></pre><h1 id="D2T1-旅行"><a href="#D2T1-旅行" class="headerlink" title="D2T1 旅行"></a>D2T1 <a href="https://www.luogu.org/problemnew/show/P5022">旅行</a></h1><p>又是一道本该拿满分的题，考场上打开题目-&gt;一眼看出基环树-&gt;只听过名字不会写-&gt;拿60pt愉快走人吧~</p><p>结果我完全忽视了8700k和n&lt;=5000的存在，明显有一种平方的做法啊，就是暴力删边，然后就是一棵树了……mdzz</p><pre><code class="cpp">#include &amp;lt;bits/stdc++.h&amp;gt;using namespace std;const int MAXN = 5004;vector&amp;lt;int&amp;gt; g[MAXN];int n, m;int num[MAXN], tmp[MAXN], cnt, dep;bool v[MAXN];struct edge&#123;    int from, to;&#125; e[MAXN &amp;lt;&amp;lt; 1];int tot;int k, z;void add(int x, int y)&#123;    e[++tot].from = x;    e[tot].to = y;&#125;void dfs1(int x)&#123;    for (int i = 0; i &amp;lt; (int)g[x].size(); i++)    &#123;        int y = g[x][i];        if (v[y])            continue;        v[y] = 1;        num[++cnt] = y;        dfs1(y);    &#125;&#125;void dfs(int x)&#123;    v[x] = 1;    tmp[++dep] = x;    for (int i = 0; i &amp;lt; g[x].size(); i++)    &#123;        int to = g[x][i];        if (v[to] || (to == k &amp;amp;&amp;amp; x == z) || (to == z &amp;amp;&amp;amp; x == k))            continue;        dfs(to);    &#125;&#125;bool check()&#123;    for (int i = 1; i &amp;lt;= n; i++)    &#123;        if (tmp[i] == num[i])            continue;        if (tmp[i] &amp;gt; num[i])            return false;        else            return true;    &#125;&#125;int read()&#123;    int x = 0, f = 1;    char ch = getchar();    while (!isdigit(ch))    &#123;        if (ch == &amp;#039;-&amp;#039;)            f = -1;        ch = getchar();    &#125;    while (isdigit(ch))    &#123;        x = x * 10 + ch - &amp;#039;0&amp;#039;;        ch = getchar();    &#125;    return f * x;&#125;int main()&#123;    n = read();    m = read();    for (int i = 1; i &amp;lt;= m; i++)    &#123;        int x, y;        x = read();        y = read();        add(x, y);        add(y, x);        g[x].push_back(y);        g[y].push_back(x);    &#125;    for (int i = 1; i &amp;lt;= n; i++)        sort(g[i].begin(), g[i].end());    if (m == n - 1)    &#123;        v[1] = 1;        num[++cnt] = 1;        dfs1(1);        for (int i = 1; i &amp;lt;= cnt; i++)        &#123;            printf(&amp;quot;%d &amp;quot;, num[i]);        &#125;    &#125;    else    &#123;        for (int i = 1; i &amp;lt; tot; i += 2)        &#123;            dep = 0;            k = e[i].from, z = e[i].to;            memset(v, 0, sizeof(v));            dfs(1);            if (dep &amp;lt; n)                continue;            if (num[1] == 0)                for (int i = 1; i &amp;lt;= n; i++)                    num[i] = tmp[i];            else if (check())                for (int i = 1; i &amp;lt;= n; i++)                    num[i] = tmp[i];        &#125;        for (int i = 1; i &amp;lt;= n; i++)        &#123;            printf(&amp;quot;%d &amp;quot;, num[i]);        &#125;    &#125;    return 0;&#125;</code></pre>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>NOIP2018退役记</title>
    <link href="/2018/11/10/NOIP2018%E9%80%80%E5%BD%B9%E8%AE%B0/"/>
    <url>/2018/11/10/NOIP2018%E9%80%80%E5%BD%B9%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="Day0"><a href="#Day0" class="headerlink" title="Day0"></a>Day0</h2><p>上午敲了些板子，树剖还是没能一遍过orz</p><p>中午第二次到教工食堂吃饭，真香！</p><p>坐高铁去南昌，很快就到了。</p><p>做公交车到南大，下车的时候手机和身份证一起落在车上，打了19个电话后终于接了，又回了一遍南昌西，还好什么都没丢，差点提前退役QAQ，一个下午就过去了。</p><p>傍晚去看机房，晚餐在南大的九食堂吃的，一餐8元，特别好吃（比起我们学校），在南昌的每餐都是在这里吃的。</p><p>遇到了JK大佬@<a href="https://rye-catcher.github.io/">Rye_Catcher</a>，意外的很聊得来，祝进队！</p><p>前湖迎宾馆性价比是真的低，没办法，只有这里还有房间了<del>大堂香味还挺好闻</del>。</p><p>晚上和@<a href="https://www.luogu.org/space/show?uid=92770">March_H</a>颓了一下，后来意识到自己并没有March_H大佬的实力，就去敲了一下板子，补了下数学<del>虽然后面并没有用到</del></p><h2 id="Day1"><a href="#Day1" class="headerlink" title="Day1"></a>Day1</h2><p>ccf的老爷机终于换了，现在是i7-8700k,32GB RAM<del>这跨度也太大了吧</del>，于是很高兴的没有加任何的常数优化。</p><p>不知道怎么排座位的，反正我是把考场遍历了一边才找到座位。</p><p>考试刚开始没进入状态，就是每看到一道题，就想先敲正解，而且非常着急（T2想到了一个智障的结论，想都没想就写了60行，还调试了蛮久）</p><p>10点上了个厕所，感觉前面1个多小时在浪费时间。</p><p>T1敲了暴力，应该是[latex]O(n^2)[/latex]复杂度，结果给的样例二n=100,000都过了，不管了，i7莽过去</p><p>T2敲了暴力，应该是[latex]O(n!)[/latex]的复杂度，加了点玄学优化，变成了[latex]O(k!)[/latex]的复杂度，其中k是答案。结果给的样例二k有20多，还是过了，不管，i7冲呀(实际时间复杂度上和a[i]的大小有关)<br>打了搜索都没发现这是道完全背包题，我还是太弱了。</p><p>T3骗了20分<del>其实还有20分没骗到</del>，就是求了个树的直径。</p><p>听说有两道POI的原题，果然NOIP就是POI*N吗（逃ε=ε=ε=┏(゜ロ゜;)┛</p><p>先提前祝贺@<a href="https://www.luogu.org/space/show?uid=106642">Ajsoabk</a>省一，T1本来写的线段树，嫌慢还换成了ST表，tql，也要感谢他的水，要不是喝了他的水，我就不会上厕所，D1就要爆0了。</p><p>又和@<a href="https://www.luogu.org/space/show?uid=92770">March_H</a>颓了一下，后面发现还是看番有趣。</p><p>“魔法什么的，最讨厌了”——总重复这句话，根据真香定理应该……</p><p>晚上看了下番+板子+数学，明天应该是考模拟，数学之类的东西吧。</p><h2 id="Day2"><a href="#Day2" class="headerlink" title="Day2"></a>Day2</h2><p>昨天湿了的鞋子还没干，穿着宾馆里的拖鞋去的考场，贼累。<br>键盘还是没换，还好我掌握了右shift的使用方法  </p><p>T1贪心乱搞，骗了60之后就想着先做后面的题，然后回来填坑……然后就再也没看过T1了<br>听说就是找环删边，还有大佬随机删边%%%<br>T2毒瘤，算了一下状压dp会T，然而还是用的状压，结果3*3的数据过不了，写了发暴力，跑出来和外婆状压是一样的orz  死活算不到它给的答案。<br>T3没时间了，想枚举拿20分，结果写完发现理解错了题目意思，完蛋。  </p><p>退役是肯定了的，如果今年分数线比去年高的话省一都不好说，果然还是太弱了。</p><p>下午就直接去车站，准备回去补文化课。</p><hr><p>感觉这次NOIP好迷，第一天就是NOIP=NOI*p，第二天就是NOIP=NOI Pro(雾)</p><p>没有数学，没有模拟，很多原题，很多图论……</p><p>敲过的板子，复习过的内容没有一个用到了orz</p><p>虽然之前考虑过很多次，但真的到退役的时候还真的有些舍不得，毕竟OI陪伴了自己11个月15天</p><p>这只是个退役记并不是总结，所以就写到这吧<del>感觉退役总结又要咕好久</del></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>【考前冲刺Day6】OI STILE</title>
    <link href="/2018/11/08/%E3%80%90%E8%80%83%E5%89%8D%E5%86%B2%E5%88%BADay6%E3%80%91OI%20STILE/"/>
    <url>/2018/11/08/%E3%80%90%E8%80%83%E5%89%8D%E5%86%B2%E5%88%BADay6%E3%80%91OI%20STILE/</url>
    
    <content type="html"><![CDATA[<h1 id="T1-引子（水箱）"><a href="#T1-引子（水箱）" class="headerlink" title="T1 引子（水箱）"></a>T1 引子（水箱）</h1><p>非常简单的模拟题目，错误点有两处：</p><ol><li>没有读入多位数字</li><li>出现顺序和编号无关</li></ol><p>然就是从1号水箱，开始递归，优先从箱底的水管递归下去，然后输出自身的编号。</p><hr><pre><code class="cpp">#include&amp;lt;bits/stdc++.h&amp;gt;using namespace std;const int MAXN=1003;char mp[MAXN][MAXN];int n,m;int draw[MAXN][MAXN];int numx1[200003],numy1[200003];int numx2[200003],numy2[200003];  void paint(int col,int i,int j)&#123;    int x=i,y=j;    while(mp[x][y]!=&amp;#039;|&amp;#039;)y++;    while(mp[x][y]!=&amp;#039;+&amp;#039;)x++;    while(mp[i][j]!=&amp;#039;|&amp;#039;)j--;    while(mp[i][j]!=&amp;#039;+&amp;#039;)i--;    for(int k=i;k&amp;lt;=x;k++)&#123;        for(int z=j;z&amp;lt;=y;z++)&#123;            draw[k][z]=col;        &#125;    &#125;    numx1[col]=i;numy1[col]=j;    numx2[col]=x;numy2[col]=y;&#125;  int go(int x,int y,int lasty)&#123;    int flag=1;    while(1)&#123;        if(flag==1)&#123;            int r=y,l=y;            if(y&amp;gt;lasty)&#123;                while(mp[x][r]!=&amp;#039;+&amp;#039;&amp;amp;&amp;amp;mp[x][r]==&amp;#039;-&amp;#039;)r++;            &#125;            else &#123;                while(mp[x][l]!=&amp;#039;+&amp;#039;&amp;amp;&amp;amp;mp[x][l]==&amp;#039;-&amp;#039;)l--;            &#125;            if(y&amp;gt;lasty)&#123;                if(mp[x][r]==&amp;#039;+&amp;#039;)y=r;            &#125;            else &#123;                if(mp[x][l]==&amp;#039;+&amp;#039;)y=l;            &#125;            x++;            flag=2;        &#125;        else &#123;            while(mp[x][y]!=&amp;#039;+&amp;#039;&amp;amp;&amp;amp;mp[x][y]==&amp;#039;|&amp;#039;)x++;            if(draw[x][y]!=0)return draw[x][y];            if(mp[x][y]==&amp;#039;+&amp;#039;)&#123;lasty=y;flag=1;if(mp[x][y+1]==&amp;#039;-&amp;#039;)y++;else y--;&#125;        &#125;    &#125;&#125;        void dfs(int id)&#123;    for(int i=numx2[id]-1;i&amp;gt;=numx1[id]+1;i--)&#123;        if(mp[i][numy1[id]-1]==&amp;#039;-&amp;#039;)&#123;            dfs(go(i,numy1[id]-1,numy1[id]));        &#125;        if(mp[i][numy2[id]+1]==&amp;#039;-&amp;#039;)&#123;            dfs(go(i,numy2[id]+1,numy2[id]));        &#125;    &#125;    printf(&amp;quot;%d\n&amp;quot;,id);&#125;  int main()&#123;    scanf(&amp;quot;%d%d&amp;quot;,&amp;amp;n,&amp;amp;m);    for(int i=1;i&amp;lt;=n;i++)scanf(&amp;quot;%s&amp;quot;,mp[i]+1);    for(int i=1;i&amp;lt;=n;i++)&#123;        for(int j=1;j&amp;lt;=m;j++)&#123;            int num=0;            while(isdigit(mp[i][j]))&#123;                num=num*10+mp[i][j]-&amp;#039;0&amp;#039;;                j++;            &#125;            if(num!=0)paint(num,i,j-1);        &#125;    &#125;    dfs(1);    return 0;&#125;</code></pre><h1 id="T2-可爱精灵宝贝"><a href="#T2-可爱精灵宝贝" class="headerlink" title="T2 可爱精灵宝贝"></a>T2 可爱精灵宝贝</h1><p>一道区间dp题，考场上写挂了，最后10分钟乱搞居然也有60分，考试完调了一下，有90分<del>实际上是数据太水了</del>。</p><p>90分代码：</p><pre><code class="cpp">#include&amp;lt;bits/stdc++.h&amp;gt;using namespace std;const int MAXN=1005;struct node&#123;    int a,b,t;&#125;go[MAXN];int n,k,m;int maxt; int main()&#123;    scanf(&amp;quot;%d%d%d&amp;quot;,&amp;amp;n,&amp;amp;k,&amp;amp;m);    for(int i=1;i&amp;lt;=m;i++)&#123;        scanf(&amp;quot;%d%d%d&amp;quot;,&amp;amp;go[i].a,&amp;amp;go[i].b,&amp;amp;go[i].t);        maxt=max(maxt,go[i].t);    &#125;    int mx=0;    for(int i=1;i&amp;lt;=k-1;i++)&#123;        int now=0;        int x=k;int ans=0;        while(x!=i-1&amp;amp;&amp;amp;now&amp;lt;=maxt)&#123;            now++;            for(int j=1;j&amp;lt;=m;j++)&#123;                if(go[j].a==x&amp;amp;&amp;amp;go[j].t&amp;gt;=now)ans+=go[j].b;            &#125;            x--;        &#125;        if(now)&#123;            now--;            now*=2;            &#125;        x=k;        while(now&amp;lt;=maxt&amp;amp;&amp;amp;x&amp;lt;=n)&#123;            for(int j=1;j&amp;lt;=m;j++)&#123;                if(go[j].a==x&amp;amp;&amp;amp;go[j].t&amp;gt;=now)ans+=go[j].b;            &#125;            now++;            x++;        &#125;        mx=max(mx,ans);    &#125;    for(int i=n;i&amp;gt;=k;i--)&#123;        int now=0;        int x=k;int ans=0;        while(x!=i+1&amp;amp;&amp;amp;now&amp;lt;=maxt)&#123;            now++;            for(int j=1;j&amp;lt;=m;j++)&#123;                if(go[j].a==x&amp;amp;&amp;amp;go[j].t&amp;gt;=now)ans+=go[j].b;            &#125;            x++;        &#125;        if(now)&#123;            now--;            now*=2;            &#125;        x=k;        while(now&amp;lt;=maxt&amp;amp;&amp;amp;x&amp;gt;=1)&#123;            for(int j=1;j&amp;lt;=m;j++)&#123;                if(go[j].a==x&amp;amp;&amp;amp;go[j].t&amp;gt;=now)ans+=go[j].b;            &#125;            now++;            x--;        &#125;        mx=max(mx,ans);    &#125;    cout&amp;lt;&amp;lt;mx&amp;lt;&amp;lt;endl;    return 0;&#125;</code></pre><p>这里区间dp用的是记忆化搜索实现的，dfs中的参数含义如下：</p><table><thead><tr><th align="center">参数名</th><th align="center">参数含义</th></tr></thead><tbody><tr><td align="center">s</td><td align="center">第s个精灵</td></tr><tr><td align="center">cur</td><td align="center">当前时间</td></tr><tr><td align="center">sum</td><td align="center">当前状态的分数</td></tr><tr><td align="center">l</td><td align="center">当前状态的左端点</td></tr><tr><td align="center">r</td><td align="center">当前状态的右端点</td></tr></tbody></table><p>其中，l和r指的是按位置排序后精灵序号的左右端点，相当于离散化了坐标</p><p>对于状态，我们都有以下选择：</p><ol><li>向右走去捕获右边精灵</li><li>向右走，虽然捕获不到</li><li>向左走去捕获左边精灵</li><li>向左走，虽然捕获不到</li></ol><p>对于每种状态的遍历，我们就可以算出f[i][j]—选择第i到第j个精灵的最大得分（不一定捕获到了）<br>答案就是其中最大的</p><pre><code class="cpp">#include&amp;lt;bits/stdc++.h&amp;gt;using namespace std;const int MAXN=1003;int n,k,m;int f[1003][1003];int ans;struct node&#123;    int pos;    int val;    int t;&#125;a[MAXN];bool book[MAXN];bool cmp(node a,node b)&#123;    return a.pos&amp;lt;b.pos;&#125;void dfs(int s,int cur,int sum,int l,int r)&#123;    if(f[l][r]&amp;gt;=sum)return;    f[l][r]=sum;    if(sum&amp;gt;ans)ans=sum;    book[s]=1;    if(!book[r]&amp;amp;&amp;amp;r&amp;lt;=m)&#123;        if(cur+abs(a[r].pos-a[s].pos)&amp;lt;=a[r].t)&#123;            dfs(r,cur+abs(a[r].pos-a[s].pos),sum+a[r].val,l,r+1);        &#125;        else &#123;            dfs(r,cur+abs(a[r].pos-a[s].pos),sum,l,r+1);        &#125;    &#125;    if(!book[l]&amp;amp;&amp;amp;l)&#123;        if(cur+abs(a[s].pos-a[l].pos)&amp;lt;=a[l].t)&#123;            dfs(l,cur+abs(a[l].pos-a[s].pos),sum+a[l].val,l-1,r);        &#125;        else &#123;            dfs(l,cur+abs(a[l].pos-a[s].pos),sum,l-1,r);        &#125;    &#125;    book[s]=0;//注意回溯&#125;int main()&#123;    scanf(&amp;quot;%d%d%d&amp;quot;,&amp;amp;n,&amp;amp;k,&amp;amp;m);    for(int i=1;i&amp;lt;=m;i++)&#123;        int d,b,c;scanf(&amp;quot;%d%d%d&amp;quot;,&amp;amp;d,&amp;amp;b,&amp;amp;c);        a[i]=(node)&#123;d,b,c&#125;;    &#125;    a[++m]=(node)&#123;k,0,1&#125;;//从k位置开始    sort(a+1,a+1+m,cmp);    memset(f,-1,sizeof(f));    for(int i=1;i&amp;lt;=m;i++)&#123;        if(a[i].pos==k&amp;amp;&amp;amp;a[i].val==0&amp;amp;&amp;amp;a[i].t==1)&#123;            dfs(i,1,0,i-1,i+1);            break;        &#125;    &#125;    printf(&amp;quot;%d&amp;quot;,ans);    return 0;&#125;</code></pre>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>【考前冲刺Day5】考试时完全没有思路怎么办？可以暴力吗？可以乱搞吗？</title>
    <link href="/2018/11/07/%E3%80%90%E8%80%83%E5%89%8D%E5%86%B2%E5%88%BADay5%E3%80%91%E8%80%83%E8%AF%95%E6%97%B6%E5%AE%8C%E5%85%A8%E6%B2%A1%E6%9C%89%E6%80%9D%E8%B7%AF%E6%80%8E%E4%B9%88%E5%8A%9E%EF%BC%9F%E5%8F%AF%E4%BB%A5%E6%9A%B4%E5%8A%9B%E5%90%97%EF%BC%9F%E5%8F%AF%E4%BB%A5%E4%B9%B1%E6%90%9E%E5%90%97%EF%BC%9F/"/>
    <url>/2018/11/07/%E3%80%90%E8%80%83%E5%89%8D%E5%86%B2%E5%88%BADay5%E3%80%91%E8%80%83%E8%AF%95%E6%97%B6%E5%AE%8C%E5%85%A8%E6%B2%A1%E6%9C%89%E6%80%9D%E8%B7%AF%E6%80%8E%E4%B9%88%E5%8A%9E%EF%BC%9F%E5%8F%AF%E4%BB%A5%E6%9A%B4%E5%8A%9B%E5%90%97%EF%BC%9F%E5%8F%AF%E4%BB%A5%E4%B9%B1%E6%90%9E%E5%90%97%EF%BC%9F/</url>
    
    <content type="html"><![CDATA[<h1 id="T1-改造二叉树"><a href="#T1-改造二叉树" class="headerlink" title="T1 改造二叉树"></a>T1 改造二叉树</h1><blockquote><p><a href="https://www.luogu.org/problemnew/show/P3365">题面</a></p></blockquote><p>洛谷上的数据有水，过了不代表正确；</p><p>这题还是比较难想的（至少我是这么认为的）  </p><p>首先如果我们对一颗平衡树进行中序遍历，得到的一个遍历的序列是单调上升的。<br>于是我们这道题就转化成一个这样的问题：<br><strong>给一棵二叉树，让它的中序遍历序列变为严格单调上升序列，最少需要多少次修改</strong>  </p><p>《算法竞赛进阶指南（第二版）》的263面提过一个思考题：  </p><blockquote><p>把一个序列A变成非严格单调递增的（单调不下降的），至少需要修改多少个数？</p></blockquote><p>比如2 3 1 4 它变成单调不降的就是2 3 3 4，修改一个数，可以发现，A的最长不降子序列是不需要被修改的，而其他的值需要增加或减小来和原来的最长不下降子序列构成一个新的最长不下降子序列，答案就是A的长度减去A的最长不下降子序列的长度。</p><blockquote><p>把一个序列A变成严格单调递增的，至少需要修改多少个数？</p></blockquote><p>如果2 3 1 4 它变成单调递增的就是2 3 4 5，修改两个数，这是因为3和4之间（从自然数的意义上）有0个自然数，而3和4之间（在数列上）有1个自然数，显然，你无法找到一个自然数它既大于3又小于4，我们定义两个数的差值-1为<strong>容量</strong>，而下标的差值-1我们定义为<strong>装载量</strong>。</p><p>显然如果两个数之间能存在严格单调上升的序列仅当<strong>容量&gt;=装载量</strong>成立，即<strong>容量-装载量&gt;=0</strong></p><p>设序列[latex]a[/latex]，<br>容量&gt;=装载量即为[latex]a_i-a_j\ge i-j[/latex]<br>移项得[latex]a_i-i\ge a_j-j[/latex]<br>由于对于任意项都要成立，所以我们只要用每一项的值减去下标，答案就是长度-最长不降子序列的长度</p><pre><code class="cpp">#include&amp;lt;bits/stdc++.h&amp;gt;using namespace std; const int MAXN=100005;int ch[MAXN][2],a[MAXN],n,now,key[MAXN];int f[MAXN],d[MAXN],len=1;void dfs(int x)&#123;    if(ch[x][0]) dfs(ch[x][0]);    a[++now]=key[x];    if(ch[x][1]) dfs(ch[x][1]);&#125;int main()&#123;    scanf(&amp;quot;%d&amp;quot;,&amp;amp;n);    for(int i=1;i&amp;lt;=n;i++)scanf(&amp;quot;%d&amp;quot;,&amp;amp;key[i]);    int x,fa;    for(int i=2;i&amp;lt;=n;i++)&#123;scanf(&amp;quot;%d%d&amp;quot;,&amp;amp;fa,&amp;amp;x);ch[fa][x]=i;&#125;    dfs(1);    for(int i=1;i&amp;lt;=n;i++)a[i]-=i;    d[1]=a[1];    for(int i=2;i&amp;lt;=n;i++)&#123;//nlogn        if(a[i]&amp;gt;=d[len])d[++len]=a[i];        else &#123;            int j=upper_bound(d+1,d+len+1,a[i])-d;            d[j]=a[i];        &#125;    &#125;    printf(&amp;quot;%d\n&amp;quot;,n-len);    return 0;&#125;</code></pre><h1 id="T2-数字对"><a href="#T2-数字对" class="headerlink" title="T2 数字对"></a>T2 数字对</h1><p>这题真的就是乱搞也能过，数据是全随机的，然而考试的时候还是写的是暴力，虽然优化成了[latex]O(n^3logn)[/latex]但是和[latex]O(n^4)[/latex]的分数一样．<br>有两种乱搞方法，一种是枚举每个点向两边拓展，另一种是枚举两个端点（这种方法等下会放代码），前者意外跑的很快．．．　　<br>第二种乱搞方法是上届学长留下来的：　　　</p><hr><pre><code class="cpp">/*@author:dpj*/#include&amp;lt;set&amp;gt;#include&amp;lt;cstdio&amp;gt;#include&amp;lt;iostream&amp;gt;using namespace std;const int MAXN=500001;int n,a[MAXN];struct Node&#123;    int l,r;&#125;ans[MAXN];int main()&#123;    freopen(&amp;quot;pair.in&amp;quot;,&amp;quot;r&amp;quot;,stdin);    freopen(&amp;quot;pair.out&amp;quot;,&amp;quot;w&amp;quot;,stdout);    scanf(&amp;quot;%d&amp;quot;,&amp;amp;n);    for(int i=1;i&amp;lt;=n;i++)        scanf(&amp;quot;%d&amp;quot;,&amp;amp;a[i]);    int Max=0;    for(int i=1;i&amp;lt;=n;i++)&#123;        for(int j=i;j&amp;gt;=1;j--)&#123;            if(a[j]%a[i]) break;            ans[i].l=j;        &#125;        for(int j=i;j&amp;lt;=n;j++)&#123;            if(a[j]%a[i]) break;            ans[i].r=j;        &#125;        Max=max(Max,ans[i].r-ans[i].l);    &#125;    int tot=0;    multiset&amp;lt;int&amp;gt;s;    int last=0;    for(int i=1;i&amp;lt;=n;i++)&#123;        if(ans[i].r-ans[i].l==Max)&#123;            if(ans[i].l==last) continue;            last=ans[i].l;            tot++;            s.insert(ans[i].l);        &#125;    &#125;    printf(&amp;quot;%d %dn&amp;quot;,tot,Max);    multiset&amp;lt;int&amp;gt;::iterator it;    for(it=s.begin();it!=s.end();it++)        printf(&amp;quot;%d &amp;quot;,(*it));    fclose(stdin);    fclose(stdout);    return 0;&#125;</code></pre><p>对于每一个特殊区间，它的特殊点一定满足的条件是ＧＣＤ＝最小值<br>于是我们可以维护区间的GCD和最小值，<br>区间长度我们也可以不用暴力枚举，直接二分即可．<br>此时我们只二分出来了最大的长度，要想知道具体的答案，还得根据算出来的长度扫一遍数组，合法性的判定和上面是一样的　　</p><pre><code class="cpp">#include&amp;lt;bits/stdc++.h&amp;gt;using namespace std;const int MAXN=500003,M=21;int n,m;int a[MAXN],f[MAXN][M],g[MAXN][M],p[M];int gcd(int a,int b)&#123;    return b?gcd(b,a%b):a;&#125;inline char nc()&#123;    static char buf[MAXN],*p1=buf,*p2=buf;    return p1==p2&amp;amp;&amp;amp;(p2=(p1=buf)+fread(buf,1,MAXN,stdin),p1==p2)?EOF:*p1++;&#125;inline int read()&#123;    char ch=&amp;#039;[&amp;#039;;int x=0,f=1;    while(!isdigit(ch))&#123;if(ch==&amp;#039;-&amp;#039;)f=-1;ch=nc();&#125;    while(isdigit(ch))&#123;x=(x&amp;lt;&amp;lt;3)+(x&amp;lt;&amp;lt;1)+(ch^48);ch=nc();&#125;    return x*f;&#125;bool check(int len)&#123;    int q=log2(len),k=n+1-p[q];    for(int i=1;i&amp;lt;=k;i++)&#123;        int j=i+len-1;        if(min(f[i][q],f[j-p[q]+1][q])==gcd(g[i][q],g[j-p[q]+1][q]))return true;//如果区间最小值=区间gcd,合法    &#125;    return 0;&#125;int main()&#123;    freopen(&amp;quot;pair.in&amp;quot;,&amp;quot;r&amp;quot;,stdin);    freopen(&amp;quot;pair.out&amp;quot;,&amp;quot;w&amp;quot;,stdout);    n=read();m=log2(n);    for(int i=1;i&amp;lt;=n;i++)&#123;        int tmp=read();        f[i][0]=g[i][0]=tmp;    &#125;    for(int i=0;i&amp;lt;=m;i++)p[i]=1&amp;lt;&amp;lt;i;    for(int j=1;j&amp;lt;=m;j++)&#123;//预处理ST表        int k=n+1-p[j];        for(int i=1;i&amp;lt;=k;i++)&#123;            f[i][j]=min(f[i][j-1],f[i+p[j-1]][j-1]);            g[i][j]=gcd(g[i][j-1],g[i+p[j-1]][j-1]);        &#125;    &#125;    int l=1,r=n,ans=0;    while(l&amp;lt;=r)&#123;//二分最大区间长度        int mid=(l+r)&amp;gt;&amp;gt;1;        if(check(mid))&#123;l=mid+1;&#125;        else &#123;r=mid-1;&#125;    &#125;    ans=r;    if(ans==1)&#123;//最大长度为1,全部为单独的数字        printf(&amp;quot;%d %dn&amp;quot;, n, 0);        for(int i=1;i&amp;lt;n;++i)printf(&amp;quot;%d &amp;quot;,i);        printf(&amp;quot;%dn&amp;quot;, n);    &#125;    else &#123;        int q=log2(ans),k=n+1-p[q],tot=0;        for(int i=1;i&amp;lt;=k;++i)&#123;//枚举最大长度的所有区间,统计个数，记录答案            int j=i+ans-1;            if(min(f[i][q],f[j-p[q]+1][q])==gcd(g[i][q],g[j-p[q]+1][q]))a[++tot]=i;        &#125;        printf(&amp;quot;%d %dn&amp;quot;,tot,ans-1);        for (int i=1;i&amp;lt;tot;++i)printf(&amp;quot;%d &amp;quot;,a[i]);        printf(&amp;quot;%dn&amp;quot;,a[tot]);    &#125;    return 0;&#125;</code></pre>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>人生第一次Pull Request被采纳了！！</title>
    <link href="/2018/11/07/%E4%BA%BA%E7%94%9F%E7%AC%AC%E4%B8%80%E6%AC%A1Pull%20Request%E8%A2%AB%E9%87%87%E7%BA%B3%E4%BA%86%EF%BC%81%EF%BC%81/"/>
    <url>/2018/11/07/%E4%BA%BA%E7%94%9F%E7%AC%AC%E4%B8%80%E6%AC%A1Pull%20Request%E8%A2%AB%E9%87%87%E7%BA%B3%E4%BA%86%EF%BC%81%EF%BC%81/</url>
    
    <content type="html"><![CDATA[<h2 id="人生第一次Pull-Request被采纳了！！"><a href="#人生第一次Pull-Request被采纳了！！" class="headerlink" title="人生第一次Pull Request被采纳了！！"></a>人生第一次Pull Request被采纳了！！</h2><p>记录下这个时刻！！！</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>【考前冲刺Day4】关于我不开long long见祖宗这桩事</title>
    <link href="/2018/11/06/%E3%80%90%E8%80%83%E5%89%8D%E5%86%B2%E5%88%BADay4%E3%80%91%E5%85%B3%E4%BA%8E%E6%88%91%E4%B8%8D%E5%BC%80long%20long%E8%A7%81%E7%A5%96%E5%AE%97%E8%BF%99%E6%A1%A9%E4%BA%8B/"/>
    <url>/2018/11/06/%E3%80%90%E8%80%83%E5%89%8D%E5%86%B2%E5%88%BADay4%E3%80%91%E5%85%B3%E4%BA%8E%E6%88%91%E4%B8%8D%E5%BC%80long%20long%E8%A7%81%E7%A5%96%E5%AE%97%E8%BF%99%E6%A1%A9%E4%BA%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="T1-增援前线"><a href="#T1-增援前线" class="headerlink" title="T1 增援前线"></a>T1 增援前线</h1><p>实锤乱搞题，考试的时候写了一个错误的dp，只拿了一半的分。<br>实际上这一题应该属于贪心吧<br>我们用f[i]表示i号点能站多少人。<br>显然，前l个点的f[i]=a[i]；<br>对于其他情况，f[i]应由i-l到i-1这段区间内的点更新而来。<br>具体来说，就是“能跳则跳，满员为止”<br>我们优先选择距离当前点较远的点来更新，下面将证明这一结论。  </p><p>我们每次只能在[latex]i-l[/latex]到[latex]i-1[/latex]这段区间内选择点来更新答案，每次我们可选的状态空间都会变动（整体右移），如果我们优先选择左边的点来更新的话，右边的点的可选方案数不会改变，而左边的点的可选方案显然是比右边的少的（因为左边的点会先退出可行方案），根据决策包容性我们可知该贪心方案正确。</p><p>代码中的3个if是优化枚举（可行性），否则时间复杂度将达到[latex]O((N-L)\times L)[/latex] <del>然而数据太水不加也能过</del></p><hr><pre><code class="cpp">#include&amp;lt;bits/stdc++.h&amp;gt;using namespace std;const int MAXN=100004;int f[MAXN],a[MAXN];int n,l;int main()&#123;    scanf(&amp;quot;%d%d&amp;quot;,&amp;amp;n,&amp;amp;l);    for(int i=1;i&amp;lt;=n;i++)scanf(&amp;quot;%d&amp;quot;,&amp;amp;a[i]);    for(int i=0;i&amp;lt;=l;i++)f[i]=a[i];    a[n]=0x7fffffff;    for(int i=l+1;i&amp;lt;=n;i++)&#123;        if(a[i]==0)continue;        for(int j=i-l;j&amp;lt;i;j++)&#123;            if(f[j]==0)continue;            if(a[i]==0)break;            int tmp=min(a[i],f[j]);            a[i]-=tmp;f[j]-=tmp;f[i]+=tmp;        &#125;    &#125;    printf(&amp;quot;%d&amp;quot;,f[n]);    return 0;&#125;</code></pre><h1 id="T2-进化序列"><a href="#T2-进化序列" class="headerlink" title="T2 进化序列"></a>T2 进化序列</h1><p>QAQ QAQ QAQ QAQ，就是这一题！！！！<del>我可不是什么邪恶的史莱姆</del><br>考场上先写了一个暴力，然后写了线段树+二分（Binary Segment Tree简称<del>BST</del>），对拍发现答案不一样，最后发现是暴力写错了orz<br>然后自己造了好多大数据，都是暴力跑得快（但是暴力还是被卡了）<br>然后没开long long 或运算起来可能会爆int，见祖宗了<br><img src="http://bubbleioa.top/wp-content/uploads/2018/10/%E9%80%89%E6%89%8B%E8%A1%A8%E6%BC%94.jpg"></p><hr><p>为什么用线段树？我们要查询的区间或值是满足区间可加性的。<br>为什么二分？可以发现越多的数或起来不会变小。</p><pre><code class="cpp">#include&amp;lt;bits/stdc++.h&amp;gt;#define lt p&amp;lt;&amp;lt;1#define rt p&amp;lt;&amp;lt;1|1using namespace std;const int MAXN=100003;struct segTree&#123;    long long data;    int l,r;&#125;t[MAXN&amp;lt;&amp;lt;2];long long n,m;long long cnt=0; void build(int p,int l,int r)&#123;    t[p].l=l,t[p].r=r;    if(r==l)&#123;        scanf(&amp;quot;%lld&amp;quot;,&amp;amp;t[p].data);        return;    &#125;    int mid=(l+r)&amp;gt;&amp;gt;1;    build(lt,l,mid);    build(rt,mid+1,r);    t[p].data=t[lt].data|t[rt].data;&#125;  int ask(int p,int l,int r)&#123;    if(t[p].r&amp;lt;=r&amp;amp;&amp;amp;t[p].l&amp;gt;=l)&#123;        return t[p].data;    &#125;    int mid=(t[p].l+t[p].r)&amp;gt;&amp;gt;1;    int ans=0;    if(l&amp;lt;=mid)ans|=ask(lt,l,r);    if(r&amp;gt;mid)ans|=ask(rt,l,r);    return ans;&#125; int main()&#123;    scanf(&amp;quot;%lld%lld&amp;quot;,&amp;amp;n,&amp;amp;m);    build(1,1,n);    for(int i=1;i&amp;lt;=n;i++)&#123;        int l=i,r=n;long long ans=0;        while(l&amp;lt;=r)&#123;            int mid=(l+r)&amp;gt;&amp;gt;1;            if(ask(1,i,mid)&amp;lt;m)&#123;                ans=mid-i;l=mid+1;            &#125;            else r=mid-1;        &#125;        cnt+=ans;    &#125;    cout&amp;lt;&amp;lt;cnt&amp;lt;&amp;lt;endl;    return 0;&#125;</code></pre>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>【考前冲刺Day３】青春期猪头少年不会取＂膜＂</title>
    <link href="/2018/11/05/%E3%80%90%E8%80%83%E5%89%8D%E5%86%B2%E5%88%BADay%EF%BC%93%E3%80%91%E9%9D%92%E6%98%A5%E6%9C%9F%E7%8C%AA%E5%A4%B4%E5%B0%91%E5%B9%B4%E4%B8%8D%E4%BC%9A%E5%8F%96%EF%BC%82%E8%86%9C%EF%BC%82/"/>
    <url>/2018/11/05/%E3%80%90%E8%80%83%E5%89%8D%E5%86%B2%E5%88%BADay%EF%BC%93%E3%80%91%E9%9D%92%E6%98%A5%E6%9C%9F%E7%8C%AA%E5%A4%B4%E5%B0%91%E5%B9%B4%E4%B8%8D%E4%BC%9A%E5%8F%96%EF%BC%82%E8%86%9C%EF%BC%82/</url>
    
    <content type="html"><![CDATA[<h1 id="T1-海龟"><a href="#T1-海龟" class="headerlink" title="T1 海龟"></a>T1 海龟</h1><blockquote><p>题目大意：给你ｎ个点，依次连接形成一条折线，问这条折线经过了多少个整点<del>真的不是刀剑里的那个海龟</del></p></blockquote><p>考试的时候写了两个程序，一个是枚举矩阵里的点带进函数，一个是枚举ｘ算出ｙ，后者写挂了，但是对拍的时候考试用的电脑没法用ｆｃ，人工对比耗费了不少时间而且还没对比出来，于是把两个程序混合起来只有６０分</p><p>想法很简单，每次枚举一条线段覆盖的最小矩阵的所有点，带进直线方程看看在不在直线上，用ｂｏｏｌ数组标记就好了．</p><p>正解好像是用ｇｃｄ模拟</p><pre><code class="cpp">#include&amp;lt;bits/stdc++.h&amp;gt;using namespace std;int x=0,y=0;int n;bool vis[1003][1003];int main()&#123;    scanf(&amp;quot;%d&amp;quot;,&amp;amp;n);    for(int i=1;i&amp;lt;=n;i++)&#123;        int now_x,now_y;        scanf(&amp;quot;%d%d&amp;quot;,&amp;amp;now_x,&amp;amp;now_y);        vis[now_x][now_y]=1;        if(now_x==x&amp;amp;&amp;amp;now_y==y)continue;        int s_x,b_x,s_y,b_y;        s_x=min(x,now_x);b_x=max(x,now_x);        s_y=min(y,now_y);b_y=max(y,now_y);        if(now_x==x)&#123;            for(int j=s_y;j&amp;lt;=b_y;j++)&#123;                vis[x][j]=1;            &#125;        &#125;        else if(now_y==y)&#123;            for(int j=s_x;j&amp;lt;=b_x;j++)&#123;                vis[j][y]=1;            &#125;        &#125;        else if(n&amp;lt;=1000)&#123;            double k=abs(now_y-y)*1.0/abs(now_x-x)*1.0;            if((x&amp;lt;now_x&amp;amp;&amp;amp;y&amp;gt;now_y)||(now_x&amp;lt;x&amp;amp;&amp;amp;now_y&amp;gt;y))k=-k;            double b=y-k*x;            for(int j=s_x;j&amp;lt;=b_x;j++)&#123;                for(int z=s_y;z&amp;lt;=b_y;z++)&#123;                    if(fabs(z-k*j-b)&amp;lt;1e-5)&#123;                        vis[j][z]=1;                    &#125;                &#125;            &#125;        &#125;        x=now_x,y=now_y;    &#125;    int cnt=0;    for(int i=0;i&amp;lt;=1000;i++)&#123;        for(int j=0;j&amp;lt;=1000;j++)&#123;            if(vis[i][j]==1)&#123;                cnt++;                &#125;        &#125;    &#125;    cout&amp;lt;&amp;lt;cnt&amp;lt;&amp;lt;endl;    return 0;&#125;</code></pre><h1 id="T2-子集"><a href="#T2-子集" class="headerlink" title="T2 子集"></a>T2 子集</h1><blockquote><p>题目大意：求有ｎ个元素的集合里有多少个元素数目不超过ｋ的子集数目，对ｍ取＂膜＂，不保证ｍ是质数</p></blockquote><p>骗我写一发逆元组合数，然而只过了暴力的分．．<br>前４０分是杨辉三角递推<br>后４０分是逆元（但是要有技巧的统计答案）<br>先上８０分代码：</p><pre><code class="cpp">#include&amp;lt;bits/stdc++.h&amp;gt;using namespace std;typedef long long  ll;const int MAXN=200005;int n,k;ll mod,ans;ll dat[MAXN],inv[MAXN],fac[MAXN],f[2003][2003];ll qpow(ll a,ll b)&#123;    ll ans=1;    while(b)&#123;        if(b&amp;amp;1)ans=ans*a%mod;        a=a*a%mod;        b&amp;gt;&amp;gt;=1;    &#125;    return ans;&#125;void prework()&#123;    for(int i=1;i&amp;lt;=2000;i++)f[i][0]=f[i][i]=1;    for(int i=2;i&amp;lt;=2000;i++)for(int j=1;j&amp;lt;=i;j++)f[i][j]=(f[i-1][j-1]+f[i-1][j])%mod;&#125;int main()&#123;    scanf(&amp;quot;%d%d%lld&amp;quot;,&amp;amp;n,&amp;amp;k,&amp;amp;mod);    if(n&amp;lt;=2000)&#123;        prework();        ans=1;        for(int i=1;i&amp;lt;=k;i++)ans=(ans+f[n][i])%mod;        printf(&amp;quot;%lld\n&amp;quot;,ans);    &#125;    else &#123;        ans=1;        fac[0]=dat[0]=1;        for(int i=1;i&amp;lt;=k;i++)&#123;            fac[i]=fac[i-1]*i%mod;            dat[i]=dat[i-1]*(n-i+1)%mod;            inv[i]=qpow(fac[i],mod-2);            ans=(ans+dat[i]*inv[i]%mod)%mod;        &#125;        printf(&amp;quot;%lld\n&amp;quot;,ans);    &#125;    return 0;&#125;</code></pre><p>我们首先来抽象化一下这道题到底要求什么，显然，其实它就是求一个式子：</p><center>[latex]\displaystyle \sum_{i\in[0,k]} C^i_n mod m[/latex]</center>我们之前用费马小定理为什么会失败呢？没错，就是ｍ不保证是质数！　　于是我们要用到费马小定理的一般情况的定理－<font size="68"><strong>欧拉定理</strong></font>对于一般的组合式公式我们可以进行以下化简:[latex]C_n^m=\frac{n!}{m!(n-m)!}=\frac{n(n-1)\cdots (n-m+1)}{m!}[/latex]由于我们要求的式子ｎ是不变的，所以分子每次可以用上次的分子递推（上面８０分的程序也用了这种方法）  而对于我们的正解，我们甚至用ａｎｓ来保存上一项的答案（可以直接用到当前项）对于每一个分子，我们将ｍｏｄ的质因子提取出来并计数（加法），剩下来的一定与ｍｏｄ互质，与ａｎｓ相乘．对于每一个分母，我们将ｍｏｄ的质因子提取出来并计数（减法），剩下来的一定与ｍｏｄ互质，与ａｎｓ相除（乘上逆元）．这里的逆元用的是欧拉定理，即[latex]a^{\varphi(n)}\equiv 1(mod\ n)[/latex]，其中ａ，ｎ互质我们不能直接将ａｎｓ统和计入答案，我们还必须讲每个用ａｎｓ乘上每个质因子才能计入答案统和<hr><pre><code class="cpp">#include&amp;lt;bits/stdc++.h&amp;gt;using namespace std;typedef long long  ll;const int MAXN=200005;int n,k;ll mod,ans=1;ll p[MAXN],c[MAXN],cnt;int phi;void divide(int n)&#123;    cnt=0;phi=n;    for(int i=2;i&amp;lt;=sqrt(n);i++)&#123;        if(n%i==0)&#123;            phi=phi/i*(i-1);            p[++cnt]=i;            while(n%i==0)n/=i;        &#125;    &#125;    if(n&amp;gt;1)&#123;phi=phi/n*(n-1);p[++cnt]=n;&#125;&#125;ll qpow(ll a,ll b)&#123;    ll ans=1;    while(b)&#123;        if(b&amp;amp;1)ans=ans*a%mod;        a=a*a%mod;        b&amp;gt;&amp;gt;=1;    &#125;    return ans;&#125;void cheng(int x) &#123;    for(int i=1;i&amp;lt;=cnt;i++) &#123;        while(x%p[i]==0) &#123;            c[i]++;            x/=p[i];        &#125;    &#125;    ans=1ll*ans*x%mod;&#125;void chu(int x) &#123;    for(int i=1;i&amp;lt;=cnt;i++) &#123;        while(x%p[i]==0) &#123;            c[i]--;            x/=p[i];        &#125;    &#125;    ans=1ll*ans*qpow(x,phi-1)%mod;&#125;int main()&#123;    scanf(&amp;quot;%d%d%lld&amp;quot;,&amp;amp;n,&amp;amp;k,&amp;amp;mod);    ll su=0;    divide(mod);    for(int i=0;i&amp;lt;=k;i++)&#123;//从0开始,因为有空集        if(i&amp;gt;=1)&#123;cheng(n-i+1);chu(i);&#125;        int t=ans;        for(int j=1;j&amp;lt;=cnt;j++)&#123;            t=1ll*t*qpow(p[j],c[j])%mod;        &#125;        su=(su+t)%mod;    &#125;    printf(&amp;quot;%lld\n&amp;quot;,su);    return 0;&#125;</code></pre>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>【考前冲刺Day2】骗分之旅</title>
    <link href="/2018/11/04/%E3%80%90%E8%80%83%E5%89%8D%E5%86%B2%E5%88%BADay2%E3%80%91%E9%AA%97%E5%88%86%E4%B9%8B%E6%97%85/"/>
    <url>/2018/11/04/%E3%80%90%E8%80%83%E5%89%8D%E5%86%B2%E5%88%BADay2%E3%80%91%E9%AA%97%E5%88%86%E4%B9%8B%E6%97%85/</url>
    
    <content type="html"><![CDATA[<h1 id="T1-x"><a href="#T1-x" class="headerlink" title="T1 x"></a>T1 x</h1><p>今天唯一一道没有用骗分方法的题目,然而还是由于一个小细节写挂了orz</p><p>显然的是,如果两个数不互质,显然他们必须在一个集合里,于是我们可以将不互质的数连边,最后看有多少个联通块,答案就是[latex]2^{s}-2[/latex]其中s就是联通块的个数.如果用暴力的方法来实现的话,时间复杂度是[latex]O(n^2)[/latex]的.</p><p>我们可以只枚举每个数的质因子,来降低这一复杂度.</p><hr><pre><code class="cpp">#include&amp;lt;bits/stdc++.h&amp;gt;using namespace std;const int MAXN=1e5+10,MAXA=1e6+10,mod=1e9+7;int prime[MAXA],p[MAXA],cnt,minp[MAXA],las[MAXA];vector&amp;lt;int&amp;gt;g[MAXN];bool v[MAXN];void prework()&#123;    for(int i=2;i&amp;lt;MAXA;i++)&#123;        if(!p[i])&#123;            prime[++cnt]=i;            minp[i]=i;        &#125;        for(int j=1;j&amp;lt;=cnt&amp;amp;&amp;amp;i*prime[j]&amp;lt;MAXA;j++)&#123;            p[i*prime[j]]=1;            minp[i*prime[j]]=prime[j];//考试的时候我这里写成了i            if(i%prime[j]==0)break;        &#125;    &#125;&#125;void dfs(int x)&#123;    v[x]=1;    for(int i=0;i&amp;lt;(int)g[x].size();i++)&#123;        if(v[g[x][i]])continue;        dfs(g[x][i]);    &#125;&#125;int main()&#123;    prework();    int t;scanf(&amp;quot;%d&amp;quot;,&amp;amp;t);    while(t--)&#123;        int n;scanf(&amp;quot;%d&amp;quot;,&amp;amp;n);        memset(las,0,sizeof(las));        memset(v,0,sizeof(v));        for(int i=1;i&amp;lt;=n;i++)g[i].clear();        for(int i=1;i&amp;lt;=n;i++)&#123;            int x;scanf(&amp;quot;%d&amp;quot;,&amp;amp;x);            while(x&amp;gt;1)&#123;                int fac=minp[x];                while(x%fac==0)x/=fac;                if(las[fac])&#123;                    g[las[fac]].push_back(i);                    g[i].push_back(las[fac]);                &#125;                las[fac]=i;            &#125;        &#125;        int ans=1;        for(int i=1;i&amp;lt;=n;i++)&#123;            if(!v[i])&#123;                ans=ans*2%mod;dfs(i);            &#125;        &#125;        printf(&amp;quot;%d\n&amp;quot;,(ans+mod-2)%mod);    &#125;    return 0;&#125;</code></pre><h1 id="T2-y"><a href="#T2-y" class="headerlink" title="T2 y"></a>T2 y</h1><p>考试的时候用的是dfs枚举,骗了30分,可以不枚举状态转而判断状态的存在性,可以骗到90分,然而还是过不了.</p><p>正解是动态规划,</p><blockquote><p>出题人说:f[i][j][mask] 表示从 i 出发，j 结束，是否存在一条表示为 mask 的路径。</p></blockquote><p>然而这样会T,得分甚至不如dfs,于是出题人又说</p><blockquote><p>meet in the middle，对于每种可能的路径，枚举中间的那个位置判断。时间复杂度为[latex]O(2^\frac{d}{2} \times n \times (n + m) + 2^d \times n)[/latex]</p></blockquote><p>用了bitset,先放个表格方便理解代码:</p><table><thead><tr><th align="center">变量名</th><th align="center">变量类型</th><th align="center">变量作用</th></tr></thead><tbody><tr><td align="center">g0[i]</td><td align="center">bitset</td><td align="center">表示i点与哪些节点连权值为0的边</td></tr><tr><td align="center">g1[i]</td><td align="center">bitset</td><td align="center">表示i点与哪些节点连权值为1的边</td></tr><tr><td align="center">dp[i]</td><td align="center">bitset</td><td align="center">表示i<strong>状态</strong>可以以哪些点为终点</td></tr><tr><td align="center">f[i]</td><td align="center">bitset</td><td align="center">表示i<strong>状态</strong>可以以哪些点为起点</td></tr></tbody></table><hr><pre><code class="cpp">#include&amp;lt;bits/stdc++.h&amp;gt;using namespace std;const int N=105;const int MAXN=2048;//2的20/2+1次方int n,m,d;bitset&amp;lt;N&amp;gt;g0[N],g1[N],dp[MAXN],f[MAXN];int main()&#123;    scanf(&amp;quot;%d%d%d&amp;quot;,&amp;amp;n,&amp;amp;m,&amp;amp;d);    for(int i=1,u,v,c;i&amp;lt;=m;i++)&#123;        scanf(&amp;quot;%d%d%d&amp;quot;,&amp;amp;u,&amp;amp;v,&amp;amp;c);        if(c)&#123;g1[u][v]=g1[v][u]=1;&#125;        else &#123;g0[u][v]=g0[v][u]=1;&#125;    &#125;    int d2=d/2,d1=d-d2;    for(int u=n;u&amp;gt;=1;u--)&#123;//倒序枚举每一个点        for(int i=0;i&amp;lt;MAXN;i++)dp[i].reset();//清空        dp[1][u]=1;//以u为结尾状态是否存在，最开始的1是为了避免前导0         for(int x=1;x&amp;lt;(1&amp;lt;&amp;lt;d1);x++)&#123;//枚举状态            for(int y=1;y&amp;lt;=n;y++)&#123;//枚举点                if(dp[x][y])&#123;//如果当前状态可以以枚举的点为终点                    dp[x&amp;lt;&amp;lt;1]|=g0[y];//拓展出新的状态并且边权为0,用g0[y]去更新                    dp[x&amp;lt;&amp;lt;1|1]|=g1[y];//拓展出新的状态并且边权为1,用g1[y]去更新                &#125;            &#125;        &#125;        for(int x=0;x&amp;lt;(1&amp;lt;&amp;lt;d1);x++)&#123;//一个由u拓展的状态以任何一个结尾都说明以u开头的这个状态是存在的             f[x][u]=dp[1&amp;lt;&amp;lt;d1|x].any();//f数组是以u为开头的状态是否存在         &#125;    &#125;    int ans=0;    for(int i=0;i&amp;lt;(1&amp;lt;&amp;lt;d1);i++)&#123;        for(int j=0;j&amp;lt;(1&amp;lt;&amp;lt;d2);j++)&#123;//最后的dp数组状态都是由1为开头拓展而来的            if((dp[1&amp;lt;&amp;lt;d2|j]&amp;amp;f[i]).any())ans++;//有任意一个接上就可以累计答案         &#125;    &#125;    cout&amp;lt;&amp;lt;ans&amp;lt;&amp;lt;endl;    return 0;&#125;</code></pre>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>【考前冲刺Day1】黑红树</title>
    <link href="/2018/11/03/%E3%80%90%E8%80%83%E5%89%8D%E5%86%B2%E5%88%BADay1%E3%80%91%E9%BB%91%E7%BA%A2%E6%A0%91/"/>
    <url>/2018/11/03/%E3%80%90%E8%80%83%E5%89%8D%E5%86%B2%E5%88%BADay1%E3%80%91%E9%BB%91%E7%BA%A2%E6%A0%91/</url>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://www.cnblogs.com/zhber/p/4064897.html">题面</a></p></blockquote><blockquote><p><strong>题解转自<a href="http://www.cnblogs.com/zhber/p/4036010.html">zhber的这篇文章</a>,本人对部分公式做了LaTex处理,如需转载请注明原作者</strong></p></blockquote><p>zhb原创出品，改编自高一暑假数学作业必修三那章最后一题</p><p>这是这套题唯一会比较防ak的题了</p><p>首先题目我写了一大堆，就是要把你搞晕的</p><p>题意是有两个人进行游戏，其中第一个人在每局中获胜的概率是[latex]\frac{p}{q}[/latex]，如果有一个人比另一个人多赢两局，则游戏结束。现在给出T个询问，每个询问Q表示求游戏刚好在第Q轮结束的精确概率[latex]\frac{a}{b}[/latex]的a%k和b%k。要求[latex]\frac{a}{b}[/latex]是这个概率的最简分数。</p><p>解法是这样的：</p><p>我们把每两局压成一轮，只有三种可能：第一个人赢了，第二个人赢了，两人各赢一局。这样如果有人赢了游戏结束，平局时两人分数相同，相当于又开始一局</p><p>这样我们注意到一个显然的事实：游戏不可能在奇数局结束。因为由上面的推论+自己yy可知，要结束一定是在一轮以后，就是偶数局之后。这样不合法情况删掉一半了</p><p>第一个人一轮赢必须连赢两局，就是<a href="%5Cfrac%7Bp%7D%7Bq%7D">latex</a>^2[/latex]，即[latex]\frac{p^2}{q^2}[/latex]</p><p>第二个人一轮赢也是连赢两局，就是<a href="1-p/q">latex</a>^2[/latex]，通分完[latex]\frac{(p-q)^2}{q^2}[/latex]<br>那么一局能结束的概率就是上面两个加起来，即[latex]\frac{p^2+(p-q)^2}{q^2}[/latex]</p><p>一局不能结束的概率就是1-“上面那式子”</p><p>为简化条件，我们令一轮能结束的概率是A/B，一轮不能结束的概率是C/D。计算方法见上</p><p>那么对于有意义的询问，即偶数Q，令t=Q/2</p><p>那么比赛在第t轮即第Q局结束的充要条件是：在1到t-1轮两人都是平局，并且在第t轮比赛刚好结束</p><p>那么对于询问Q，<a href="%5Cfrac%7BC%7D%7BD%7D">latex</a>^{t-1} \times \frac{A}{B}[/latex] 即是所求</p><p>到这里应该都还能理解吧</p><p>然后比较难搞的是取模。因为p、q是100级别，那么[latex]p^2[/latex]、[latex]q^2[/latex]是1w级别，就是说ABCD这些数都是10000级别</p><p>要求的分数分子是[latex]C^{t-1}\times A[/latex]，分母是[latex]D^{t-1}\times B[/latex]，还要进行约分完取模。我们可以直接预处理使得A和B、C和D分别互质，但是我们没法保证A和D、B和C分别互质。这样约分就有困难了。比如A分解质因数有2^十几次方吧，D只有2^1，那么在接下来的十几次操作中都要用D的2去约掉A的2。但是ABCD的数据规模还算小，所以我们暴力搞出前20轮的答案，然后这样一来改约的也就约干净了，然后每次分子只乘C分母只乘D，又没有约分，可以直接递推。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre><code class="cpp">#include&amp;lt;cstdio&amp;gt;#define MX 10000     //ABCD的规模是10000#define primeMX 1230     //10000以内1229个质数#define LL long longint prime[primeMX];struct fenjie&#123;    int rep[primeMX];&#125;aa,bb,cc,dd;int p,q,T,k,a,b,c,d;int ss[primeMX];     //用于暴力，分解质因数之后直接加/减在上面，如果是正的表示分子的分解质因数有ss[i]个prime[i]，反之分母亦然LL Q,last;LL ansa[1000010],ansb[1000010];     //保存第i局结束的概率的分子分母inline void shai()     //筛法&#123;    bool mrk[10010]=&#123;0&#125;;    int leng=0;    for (int i=2;i&amp;lt;=MX;i++)      if (!mrk[i])      &#123;        for (int j=2*i;j&amp;lt;=MX;j+=i)mrk[j]=1;        prime[++leng]=i;      &#125;&#125;inline int gcd(int a,int b)     //gcd用于A和B、C和D先约分&#123;if (!b)return a;else return gcd(b,a%b);&#125; inline void divide(fenjie &amp;amp;a,int b)     //分解质因数，用于前20轮暴力用&#123;    for (int i=1;i&amp;lt;primeMX;i++)      &#123;        if (b==1)break;        while (b%prime[i]==0)&#123;b/=prime[i];a.rep[i]++;&#125;      &#125;&#125;inline LL read()     //快速读入，100w的询问不加肯定TLE&#123;    LL x=0,f=1;char ch=getchar();    while(ch&amp;lt;&amp;#039;0&amp;#039;||ch&amp;gt;&amp;#039;9&amp;#039;)&#123;if(ch==&amp;#039;-&amp;#039;)f=-1;ch=getchar();&#125;    while(ch&amp;gt;=&amp;#039;0&amp;#039;&amp;amp;&amp;amp;ch&amp;lt;=&amp;#039;9&amp;#039;)&#123;x=x*10+ch-&amp;#039;0&amp;#039;;ch=getchar();&#125;    return x*f;&#125;int main()&#123;    freopen(&amp;quot;mynameisczy.in&amp;quot;,&amp;quot;r&amp;quot;,stdin);    freopen(&amp;quot;mynameisczy.out&amp;quot;,&amp;quot;w&amp;quot;,stdout);    shai();    p=read();q=read();T=read();k=read();    if (p==1&amp;amp;&amp;amp;q==1||p==0&amp;amp;&amp;amp;q==0)ansa[2]=ansb[2]=1;  //如果必胜或必败，那一定在第2局就结束。其余概率都是0    else    &#123;        c=p*p+(q-p)*(q-p);        b=q*q;        a=b-c;        d=b;        //这里我AB和CD的意义反过来了        int div1=gcd(a,b);a/=div1;b/=div1;        int div2=gcd(c,d);c/=div2;d/=div2;        divide(aa,a);        divide(bb,b);        divide(cc,c);        divide(dd,d);        ansa[2]=c%k;ansb[2]=d%k;        for (int i=1;i&amp;lt;primeMX;i++)          ss[i]+=cc.rep[i]-dd.rep[i];        for(int i=4;i&amp;lt;=40;i+=2)        &#123;            long long sum1=1,sum2=1;            for (int j=1;j&amp;lt;primeMX;j++)              ss[j]+=aa.rep[j]-bb.rep[j];            for (int j=1;j&amp;lt;primeMX;j++)              if (ss[j]&amp;gt;0) for (int l=1;l&amp;lt;=ss[j];l++)sum1=(sum1*prime[j])%k;              else if (ss[j]&amp;lt;0)for (int l=1;l&amp;lt;=-ss[j];l++)sum2=(sum2*prime[j])%k;            ansa[i]=sum1;ansb[i]=sum2;        &#125;        for (int i=42;i&amp;lt;=1000000;i+=2)        &#123;            ansa[i]=(ansa[i-2]*a)%k;            ansb[i]=(ansb[i-2]*b)%k;        &#125;    &#125;    for(int i=1;i&amp;lt;=T;i++)      &#123;        Q=read()-last;     //last是处理加密的问题        last=ansa[Q];        printf(&amp;quot;%I64d %I64d\n&amp;quot;,ansa[Q],ansb[Q]);      &#125;    return 0;&#125;</code></pre>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>【考前冲刺Day1】天神下凡</title>
    <link href="/2018/11/03/%E3%80%90%E8%80%83%E5%89%8D%E5%86%B2%E5%88%BADay1%E3%80%91%E5%A4%A9%E7%A5%9E%E4%B8%8B%E5%87%A1/"/>
    <url>/2018/11/03/%E3%80%90%E8%80%83%E5%89%8D%E5%86%B2%E5%88%BADay1%E3%80%91%E5%A4%A9%E7%A5%9E%E4%B8%8B%E5%87%A1/</url>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://www.cnblogs.com/zhber/p/4064922.html">题面</a></p></blockquote><p>我们先来看看样例：<br><img src="http://bubbleioa.top/wp-content/uploads/2018/11/god.jpg"><br>首先一开始就有一个区域；<br>一般来说，一个圆对答案的贡献为1，无论它是在外面还是在其他圆的里面。<br>但是，如果一个圆它的一条直径上所有的点都被覆盖了的话，它对答案的贡献就为2了<br>由于只能在x轴上安放，覆盖的情况我们也只要考虑x轴上的，所以就可以把这个问题抽象为一个线段覆盖问题。<br>首先将所有的线段离散化一下，再根据长度排序，对于每条线段，先查询它是不是被全部覆盖了，再用它来更新覆盖的区域，可以用线段树来维护。  </p><p>考试的时候思路完全一致，就是线段树空间没有开够<strong>一定要开八倍空间！！！！</strong>，建树的时候也要<strong>从1到2*n</strong></p><p>这种想法虽然很自然，但是代码又长，空间又大，时间又长，还容易写挂，先膜一波考试时A的大佬@<a href="https://www.luogu.org/space/show?uid=89044">Enstein</a>用的是神奇的栈，@<a href="https://www.luogu.org/space/show?uid=92125">千柰</a>用的是搜索……代码比我短，空间比我小，还更快，tql</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre><code class="cpp">#include&amp;lt;bits/stdc++.h&amp;gt; #define lt p&amp;lt;&amp;lt;1#define rt p&amp;lt;&amp;lt;1|1using namespace std;const int MAXN =300005;struct seg&#123;    int l,r;    int len;&#125;s[MAXN];int n,cnt,ans=1;struct node&#123;    int pos,id;&#125;point[MAXN&amp;lt;&amp;lt;1]; struct segtree&#123;    int l,r;    int data,tag;&#125;t[MAXN&amp;lt;&amp;lt;3];//8倍空间！！！ bool cmp(node a,node b)&#123;    return a.pos&amp;lt;b.pos;&#125; bool cmp2(node a,node b)&#123;    if(a.id==b.id)return a.pos&amp;lt;b.pos;    return a.id&amp;lt;b.id;&#125; bool cmp3(seg a,seg b)&#123;    if(a.len==b.len)return a.l&amp;lt;b.l;    return a.len&amp;lt;b.len;&#125; void build(int p,int l,int r)&#123;    t[p].l=l,t[p].r=r;    if(l==r)&#123;        return;    &#125;    int mid=(l+r)&amp;gt;&amp;gt;1;    build(lt,l,mid);    build(rt,mid+1,r);&#125; void spread(int p)&#123;//加了并不会快多少    if(t[p].tag)&#123;        t[lt].data=t[lt].r-t[lt].l+1;        t[rt].data=t[rt].r-t[rt].l+1;        t[lt].tag=1;        t[rt].tag=1;        t[p].tag=0;    &#125;&#125; void change(int p,int l,int r)&#123;    if(t[p].l&amp;gt;=l&amp;amp;&amp;amp;t[p].r&amp;lt;=r)&#123;        t[p].data=t[p].r-t[p].l+1;        t[p].tag=1;        return;    &#125;    spread(p);    int mid=(t[p].l+t[p].r)&amp;gt;&amp;gt;1;    if(mid&amp;gt;=l)change(lt,l,r);    if(mid&amp;lt;r)change(rt,l,r);    t[p].data=t[lt].data+t[rt].data;&#125; int ask(int p,int l,int r)&#123;    if(t[p].l&amp;gt;=l&amp;amp;&amp;amp;t[p].r&amp;lt;=r)&#123;        return t[p].data;    &#125;    spread(p);    int mid=(t[p].l+t[p].r)&amp;gt;&amp;gt;1;    int sum=0;    if(mid&amp;gt;=l)sum+=ask(lt,l,r);    if(mid&amp;lt;r)sum+=ask(rt,l,r);    return sum;&#125; int main()&#123;    scanf(&amp;quot;%d&amp;quot;,&amp;amp;n);    for(int i=1;i&amp;lt;=n;i++)&#123;        int x,r;scanf(&amp;quot;%d%d&amp;quot;,&amp;amp;x,&amp;amp;r);        point[++cnt].pos=x-r;point[cnt].id=cnt;        point[++cnt].pos=x+r;point[cnt].id=cnt;    &#125;    sort(point+1,point+1+cnt,cmp);    for(int i=1,j=1,last=-1;i&amp;lt;=cnt;i++)&#123;        if(i!=1&amp;amp;&amp;amp;point[i].pos!=last)j++;        last=point[i].pos;        point[i].pos=j;    &#125;    sort(point+1,point+1+cnt,cmp2);    cnt=0;    for(int i=1;i&amp;lt;=n;i++)&#123;        s[i].l=point[++cnt].pos;        s[i].r=point[++cnt].pos;        s[i].len=s[i].r-s[i].l+1;    &#125;    sort(s+1,s+1+n,cmp3);    build(1,1,n*2); //从1到2n    for(int i=1;i&amp;lt;=n;i++)&#123;        ans++;        if(ask(1,s[i].l,s[i].r)==s[i].len)ans++;        change(1,s[i].l,s[i].r);    &#125;    cout&amp;lt;&amp;lt;ans&amp;lt;&amp;lt;endl;    return 0;&#125;</code></pre>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>11.2 DP专题——和DP打成一片题解</title>
    <link href="/2018/11/02/11.2%20DP%E4%B8%93%E9%A2%98%E2%80%94%E2%80%94%E5%92%8CDP%E6%89%93%E6%88%90%E4%B8%80%E7%89%87%E9%A2%98%E8%A7%A3/"/>
    <url>/2018/11/02/11.2%20DP%E4%B8%93%E9%A2%98%E2%80%94%E2%80%94%E5%92%8CDP%E6%89%93%E6%88%90%E4%B8%80%E7%89%87%E9%A2%98%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h1 id="T1-求三角形的最大面积"><a href="#T1-求三角形的最大面积" class="headerlink" title="T1 求三角形的最大面积"></a>T1 求三角形的最大面积</h1><blockquote><p>题目大意：给你一个由多个三角形组成的大三角形，其中有些三角形缺失了，求出剩下部分最大的三角形。</p></blockquote><p>毒瘤题，dp很好想，被特殊情况坑了。<br>首先上三角和下三角都要算一遍（其实就是反过来再找一遍）<br>就拿上三角来说，我们很容易就知道它的高度就是min(左，右)+1，但是实际上还要考虑一些特殊情况</p><p>比如下面这种情况：<br><img src="http://bubbleioa.top/wp-content/uploads/2018/11/%E4%B8%89%E8%A7%92%E5%BD%A2.png"><br>输入的时候是这样的</p><pre><code>3#---# #-#  #0</code></pre><p>所以在更新f[i][j]的时候要注意判断j的奇偶性就行了  </p><hr><pre><code class="cpp">#include&amp;lt;bits/stdc++.h&amp;gt;using namespace std;int n;int tri[300][300];//发现这东西是多余的int f1[300][300],f2[300][300];//下三角和上三角int main()&#123;    while(233)&#123;        memset(tri,0,sizeof(0));        memset(f1,0,sizeof(f1));        memset(f2,0,sizeof(0));        scanf(&amp;quot;%d&amp;quot;,&amp;amp;n);        if(n==0)break;        for(int i=1;i&amp;lt;=n;i++)&#123;            char str[400];            scanf(&amp;quot;%s&amp;quot;,str+1);int len=strlen(str+1);            for(int j=1;j&amp;lt;=len;j++)&#123;                tri[i][j+i-1]=(str[j]==&amp;#039;-&amp;#039;?1:0);                f1[i][j+i-1]=f2[i][j+i-1]=tri[i][j+i-1];//可以放就初始化为1            &#125;        &#125;        for(int i=2;i&amp;lt;=n;i++)&#123;            int cnt=1;            for(int j=i;j&amp;lt;=2*n-i;j++,cnt++)&#123;                if(f1[i][j]==0||cnt%2==0)continue;//偶数不能更新                f1[i][j]=f1[i][j]+min(f1[i-1][j+1],min(f1[i-1][j]==0?0:0x3f3f3f3f,f1[i-1][j-1]));//虽然讨论了左右的情况，但是中间不能为不能放的格子            &#125;        &#125;        for(int i=n-1;i&amp;gt;=1;i--)&#123;            for(int j=i;j&amp;lt;=2*n-i;j++)&#123;                if(f2[i][j]==0)continue;                f2[i][j]=f2[i][j]+min(f2[i+1][j+1],min(f2[i+1][j],f2[i+1][j-1]));            &#125;        &#125;        int ans=0;        for(int i=1;i&amp;lt;=n;i++)&#123;            for(int j=i;j&amp;lt;=2*n-1;j++)&#123;                ans=max(ans,max(f1[i][j],f2[i][j]));            &#125;        &#125;        cout&amp;lt;&amp;lt;ans*ans&amp;lt;&amp;lt;endl;    &#125;    return 0;&#125;</code></pre><h1 id="T2-下楼问题"><a href="#T2-下楼问题" class="headerlink" title="T2 下楼问题"></a>T2 下楼问题</h1><blockquote><p>题目大意：有一个n层楼的建筑，现在有一只猫在楼顶，每层楼有三个门，现给出距离，求猫到1楼的最长距离（不能上楼也不走回头路）</p></blockquote><p>由于每层楼之间是独立的，而且下了楼就不能往上，所以每层楼的状态具有无后效性，即我们不必关心当前状态是怎么来的。<br>我们考虑如何更新当前状态<br><img src="http://bubbleioa.top/wp-content/uploads/2018/11/down-e1541140786226.png"><br>假设我们要更新4这个点，我们发现其余5个点都有到它的合法路径，如果我们用5更新4的话，会发现5状态也会需要4来更新，<strong>我更新我自己</strong>是不可以的。<br>于是我们可以只考虑上一层的来更新下一层的  </p><p>先解释下变量吧，我觉得还是比较形象的  </p><table><thead><tr><th align="center">变量名</th><th align="center">变量含义</th></tr></thead><tbody><tr><td align="center">_path[i]</td><td align="center">第i层楼左边的路径长度</td></tr><tr><td align="center">path_[i]</td><td align="center">第i层楼右边的路径长度</td></tr><tr><td align="center">down[i]</td><td align="center">第i层楼中间门往下的路径长度</td></tr><tr><td align="center">down_[i]</td><td align="center">第i层楼左边门往右下的路径长度</td></tr><tr><td align="center">_down[i]</td><td align="center">第i层楼右边门往左下的路径长度</td></tr><tr><td align="center">f[i][j]</td><td align="center">走到第i层楼第j扇门的最长路</td></tr></tbody></table><p>于是状态可以这样更新：<br>[latex]f[i][2]=max(f[i+1][2]+down[i+1],max(f[i+1][1]+down_[i+1]+path_[i],f[i+1][3]+_down[i+1]+_path[i]))[/latex]<br>[latex]f[i][1]=max(f[i+1][3]+_down[i+1],max(f[i+1][1]+down_[i+1]+_path[i]+path_[i],f[i+1][2]+down[i+1]+_path[i]))[/latex]<br>[latex]f[i][3]=max(f[i+1][1]+down_[i+1],max(f[i+1][3]+_down[i+1]+_path[i]+path_[i],f[i+1][2]+down[i+1]+path_[i]))[/latex]</p><hr><pre><code class="cpp">#include&amp;lt;bits/stdc++.h&amp;gt;using namespace std;const int MAXN=500003;int f[MAXN][4];//1-left 2-middle 3-rightint _path[MAXN],path_[MAXN];int down[MAXN],down_[MAXN],_down[MAXN];int n; int main()&#123;    // freopen(&amp;quot;test.out&amp;quot;,&amp;quot;w&amp;quot;,stdout);    int t,T;scanf(&amp;quot;%d&amp;quot;,&amp;amp;t);T=t;    while(t--)&#123;        scanf(&amp;quot;%d&amp;quot;,&amp;amp;n);        for(int i=1;i&amp;lt;=n;i++)&#123;            scanf(&amp;quot;%d%d%d%d%d&amp;quot;,&amp;amp;_path[i],&amp;amp;path_[i],&amp;amp;down_[i],&amp;amp;down[i],&amp;amp;_down[i]);        &#125;        f[n][2]=_path[n];f[n][1]=0;f[n][3]=path_[n]+_path[n];        for(int i=n-1;i&amp;gt;=1;i--)&#123;            f[i][2]=max(f[i+1][2]+down[i+1],max(f[i+1][1]+down_[i+1]+path_[i],f[i+1][3]+_down[i+1]+_path[i]));            f[i][1]=max(f[i+1][3]+_down[i+1],max(f[i+1][1]+down_[i+1]+_path[i]+path_[i],f[i+1][2]+down[i+1]+_path[i]));            f[i][3]=max(f[i+1][1]+down_[i+1],max(f[i+1][3]+_down[i+1]+_path[i]+path_[i],f[i+1][2]+down[i+1]+path_[i]));        &#125;        int ans=max(f[1][1],max(f[1][3],f[1][2]));        printf(&amp;quot;Case %d: &amp;quot;,T-t);        cout&amp;lt;&amp;lt;ans&amp;lt;&amp;lt;endl;    &#125;    return 0;&#125;</code></pre><h1 id="T3-瞬移"><a href="#T3-瞬移" class="headerlink" title="T3 瞬移"></a>T3 瞬移</h1><blockquote><p>题目大意:有两个人在一个0-1矩阵上进行移动，其中是不可走的位置。他们每次只能从当前行移动到下一行，而且两个人的位置x,y必须满足限制：[latex]x+m_i\le y\le x+m_a[/latex] . 一个人移动到下一行的代价为其横坐标变化值的绝对值。问两个人都到达底端需要的最小消耗.</p></blockquote><p>做惯了大数据的题目,做一些比较小的数据的题目都不敢大胆去想了,这题目n只有1000而m只有10,对于师傅和徒弟两个人,我们可以五重循环分别枚举<strong>层数 当前徒弟位置 当前师傅位置 上一层徒弟位置 上一层师傅位置</strong> 这样的时间复杂度达到了惊人的[latex]O(NM^4)[/latex]然而由于数据范围较小,所以并不会超时.</p><p>我们可以用f[dep][i][j]表示dep层师傅在i徒弟在j时所需要耗费的最小值,枚举上一层的状态即可更新.</p><hr><pre><code class="cpp">#include&amp;lt;bits/stdc++.h&amp;gt;using namespace std;int n,m,l,r,x,y;int ma[1003][12];int f[1003][13][13];int main()&#123;    int t;scanf(&amp;quot;%d&amp;quot;,&amp;amp;t);    while(t--)&#123;        memset(f,0x3f,sizeof(f));        scanf(&amp;quot;%d%d%d%d%d%d&amp;quot;,&amp;amp;n,&amp;amp;m,&amp;amp;l,&amp;amp;r,&amp;amp;x,&amp;amp;y);        x++,y++;        for(int i=1;i&amp;lt;=n;i++)&#123;            char tmp[20];            scanf(&amp;quot;%s&amp;quot;,tmp+1);            for(int j=1;j&amp;lt;=m;j++)if(tmp[j]==&amp;#039;*&amp;#039;)ma[i][j]=1;else ma[i][j]=0;        &#125;        for(int i=1;i&amp;lt;=m;i++)ma[1][i]=0;//第一层就把师傅徒弟的初始位置标记为合法,其他为不合法        ma[1][x]=ma[1][y]=1;        f[1][x][y]=0;        for(int dep=2;dep&amp;lt;=n;dep++)&#123;//层数            for(int j=2;j&amp;lt;=m;j++)&#123;//徒弟                if(!ma[dep][j])continue;                for(int i=1;i&amp;lt;j;i++)&#123;//师傅                     if((!ma[dep][i])||j&amp;lt;i+l||j&amp;gt;i+r)continue;                    for(int k=2;k&amp;lt;=m;k++)&#123;//上层徒弟                        if(!ma[dep-1][k])continue;                        for(int z=1;z&amp;lt;k;z++)&#123;//上层师傅                            if((!ma[dep-1][z])||k&amp;lt;z+l||k&amp;gt;z+r)continue;                            f[dep][i][j]=min(f[dep][i][j],f[dep-1][z][k]+abs(z-i)+abs(k-j));                        &#125;                    &#125;                &#125;            &#125;        &#125;        int mi=1&amp;lt;&amp;lt;30;        for(int i=2;i&amp;lt;=m;i++)&#123;            if(!ma[n][i])continue;            for(int j=1;j&amp;lt;i;j++)&#123;                if((!ma[n][j])||i&amp;lt;j+l||i&amp;gt;j+r)continue;                mi=min(mi,f[n][j][i]);            &#125;        &#125;        cout&amp;lt;&amp;lt;mi&amp;lt;&amp;lt;endl;    &#125;    return 0;&#125;</code></pre><h1 id="T4-数字游戏"><a href="#T4-数字游戏" class="headerlink" title="T4 数字游戏"></a>T4 数字游戏</h1><blockquote><p>题目大意：给你n个数，每个数有一个衰减值，m个回合，每个回合你可以选一个数（选完消失并计入答案），选完后剩余的数衰减。求能选到的最大的总和是多少。</p></blockquote><p>可以比较容易地发现一个结论：如果n=m，就是所有数都会被选到的话，要根据bi的大小来选，先去掉那些每回合损耗多的，再去掉损耗少的，这样显然就是最优的。<br>但如果m&lt;n呢？设想：假如己经选定了m个数，只去掉这m个数，那么与m=n的情况一样，我们一定是按照bi的大小来去掉的。因为显然对于选定的个数，这样做最优。<br>到这里，我们就会想到采用动态规划的方法。把n个数按照bi从大到小排序，然后问题就转化为对于一个n个数的序列，从中选择m个数，第i个选择的数权值为A-B*i，(A,B分别为此数在原来a,b数组里对应的值)，使得所有权值的和最大。<br>不难写出下面的动态规划状态转移方程：</p><p>$$f(i,j)=max(f(k,j-1)+a_i-b_i \times(j-1)$$<br>$$f(0,0)=0$$</p><p>其中，$$1\le i\le n ,1\le j\le m,0\le k&lt;j$$，ai,bi为排序后第i个数相应的值。这样的复杂度是$$O(n^3)$$</p><p>再进一步分析，很容易地把上述动态規划方程改变为下面的形式：<br>令F(i,j)前i个数当中取了j个数的最优解，则</p><p>$$F(i,j)=max(F(i-1,j),F(i-1,j-1)+a_i-b_i\times(j-1)$$<br>$$F(0,0)=0$$</p><p>这样，时间复杂度就降到了$$O(n^2)$$</p><hr><pre><code class="cpp">#include&amp;lt;bits/stdc++.h&amp;gt;using namespace std;int n,m;struct node&#123;    int a,b;&#125;num[203];int f[203][203];bool cmp(node a,node b)&#123;    return a.b&amp;gt;b.b;&#125;int main()&#123;    cin&amp;gt;&amp;gt;n&amp;gt;&amp;gt;m;    for(int i=1;i&amp;lt;=n;i++)scanf(&amp;quot;%d&amp;quot;,&amp;amp;num[i].a);    for(int i=1;i&amp;lt;=n;i++)scanf(&amp;quot;%d&amp;quot;,&amp;amp;num[i].b);    sort(num+1,num+1+n,cmp);    for(int i=1;i&amp;lt;=n;i++)&#123;        for(int j=1;j&amp;lt;=m;j++)&#123;            f[i][j]=max(f[i][j],max(f[i-1][j],f[i-1][j-1]+num[i].a-num[i].b*(j-1)));        &#125;    &#125;    cout&amp;lt;&amp;lt;f[n][m]&amp;lt;&amp;lt;endl;    return 0;&#125;</code></pre>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>11.1不能与DP好好相处题解</title>
    <link href="/2018/11/01/11.1%E4%B8%8D%E8%83%BD%E4%B8%8EDP%E5%A5%BD%E5%A5%BD%E7%9B%B8%E5%A4%84%E9%A2%98%E8%A7%A3/"/>
    <url>/2018/11/01/11.1%E4%B8%8D%E8%83%BD%E4%B8%8EDP%E5%A5%BD%E5%A5%BD%E7%9B%B8%E5%A4%84%E9%A2%98%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h1 id="T1-不老的传说"><a href="#T1-不老的传说" class="headerlink" title="T1 不老的传说"></a>T1 不老的传说</h1><blockquote><p>题目大意：有n个石头环成一圈，每次染色能染1-k个连续石头，问多最少多少次能染成目标状态</p></blockquote><p>这道题真的是各种既视感，环的话直接变成两倍的链就OK了，之后就是区间dp<br>[latex]f[i][j][/latex]表示(i,j)对i,j一段染色的最少次数</p><p>初始化就是[latex]f[i][j]=\begin{cases}1&amp;i=j\ 0&amp;i&gt;j\ \infty&amp;else\end{cases}[/latex]</p><p>状态转移方程也很有既视感：[latex]f[i][j]=\begin{cases}min(f[i+1][j],f[i][j-1])&amp;c[i]=c[j]\min(f[i][z]+f[z+1][j]),z\in [i,j)&amp;else\end{cases}[/latex]</p><hr><pre><code class="cpp">#include&amp;lt;bits/stdc++.h&amp;gt;using namespace std;int c[402];int f[402][402];int n,m,k; int main()&#123;    scanf(&amp;quot;%d%d%d&amp;quot;,&amp;amp;n,&amp;amp;m,&amp;amp;k);    memset(f,0x3f,sizeof(f));    for(int i=1;i&amp;lt;=n;i++)&#123;scanf(&amp;quot;%d&amp;quot;,&amp;amp;c[i]);c[i+n]=c[i];&#125;    for(int i=1;i&amp;lt;=n*2;i++)&#123;        for(int j=1;j&amp;lt;=n*2;j++)&#123;            if(i==j)f[i][j]=1;            if(i&amp;gt;j)f[i][j]=0;        &#125;    &#125;    for(int len=2;len&amp;lt;=n;len++)&#123;        for(int i=1;i+len-1&amp;lt;=n*2;i++)&#123;            int j=i+len-1;            if(c[i]==c[j]&amp;amp;&amp;amp;len&amp;lt;=k)f[i][j]=min(f[i+1][j],f[i][j-1]);            else &#123;                for(int z=i;z&amp;lt;j;z++)&#123;                    f[i][j]=min(f[i][z]+f[z+1][j],f[i][j]);                &#125;            &#125;        &#125;    &#125;    int mi=1&amp;lt;&amp;lt;30;    for(int i=1;i&amp;lt;=n;i++)&#123;        mi=min(mi,f[i][i+n-1]);    &#125;    cout&amp;lt;&amp;lt;mi&amp;lt;&amp;lt;endl;    return 0;&#125;</code></pre><h1 id="T2-多米诺骨牌"><a href="#T2-多米诺骨牌" class="headerlink" title="T2 多米诺骨牌"></a>T2 多米诺骨牌</h1><blockquote><p><a href="https://www.luogu.org/problemnew/show/P1282">题目地址</a></p></blockquote><p>题目要求的是上下翻转次数，首先要解决的是如何使得差值最小。很容易就这样想到，因为n块骨牌都可以任意翻转，那么肯定有一种摆放的方式顶行和底行之间的差值是最小的，找到这样的摆放方式就可以通过对比找到最小的翻转次数了,但是这样一个问题也不容易解决，因为总共有2n种摆放方式，不可能用计算机逐一检验对比。而且差值最小的摆放方式也不惟一，因此这样的方法是不可行的。</p><p>这个问题只能换一种方式来解决了。我们可以尝试一下动态规划的思想。之所以往这个方向去思考是因为我们发现，上面的方法行不通的主要原因是因为骨牌之间相互独立的，这个性质导致了摆放方式有很多，但是相互独立这个很重要的性质，如果能够加以利用，也许会为问题的解决带来很大的便利。</p><p>经过分析可以发現，如果做到了用最少的翻转次数达到差值是最小的摆放方式，此时任意一段骨牌都不可能用更少的方式得到同样的上下差值。更具体地说，前k块骨牌如果要达到某个差值（不一定最小），它将取决于前1块的翻转情况和第k块的翻转情况。如果确定了第k块的状态，那么前k-1块就必须要用最少的次数得到指定的差值了。据此，可以列出下面的递推公式：<br>假设gap[i][j]表示前i块骨牌要达到差值为j，需要的最少翻转次数。如果不能达到j的差值，那么令等于一个很大的数。</p><center>[latex]gap[i][j]=\begin{cases}min(gap[i-1][j-c[i]],gap[i-1][j+c[i]]+1),i\in [1,n] \\ \infty & else\end{cases}[/latex]</center>其中c[i]为第i个骨牌上面-下面的值<p>初始条件是：</p><center>[latex]\begin{cases}g[0][0]=0\\g[0][j]=\infty\end{cases}[/latex]</center>由于最多只有1000个骨牌，所以上下骨牌点数差值的总和的绝对值最大就是5000。所以，我们可以逐个骨牌来处理，把所有可以达到的值都计算出来，并记下是用了多少步而达到的，最后找出可以达到的最小值，并直接得到需要多少步达到。这样可以在规定时间内求得答案。<p>由于上下的差值在[latex][-5000,5000][/latex]之间，所以我们gap的第二维要开两倍空间，再往右偏移一倍空间</p><hr><pre><code class="cpp">#include&amp;lt;bits/stdc++.h&amp;gt;using namespace std;int gap[1003][12012];int c[1003];int n;int main()&#123;    cin&amp;gt;&amp;gt;n;    for(int i=1;i&amp;lt;=n;i++)&#123;        int a,b;        scanf(&amp;quot;%d%d&amp;quot;,&amp;amp;a,&amp;amp;b);        c[i]=a-b;    &#125;    memset(gap,0x3f,sizeof(gap));    gap[0][6005]=0;    for(int i=1;i&amp;lt;=n;i++)&#123;        for(int j=0;j&amp;lt;12100;j++)&#123;            if(j-(c[i])&amp;gt;=0 &amp;amp;&amp;amp; j-(c[i])&amp;lt;12100) gap[i][j]=min(gap[i][j], gap[i-1][j+c[i]]);//虽然我们上面把它们写到了一起，            if(j+c[i]&amp;gt;=0 &amp;amp;&amp;amp; j+c[i]&amp;lt;12100) gap[i][j]=min(gap[i][j], gap[i-1][j-c[i]]+1);//但实际上它们两个更新的条件是不一样的，所以要分开来写        &#125;    &#125;    int minn=0x3f3f3f3f,ans=0x3f3f3f3f;    for(int i=0;i&amp;lt;12100;i++) &#123;        if(gap[n][i]!=0x3f3f3f3f) &#123;            if(abs(i-6005)&amp;lt;minn) minn=abs(i-6005), ans=gap[n][i];            else if(abs(i-6005)==minn) ans=min(ans, gap[n][i]);        &#125;    &#125;    cout&amp;lt;&amp;lt;ans&amp;lt;&amp;lt;endl;    return 0;&#125;</code></pre><h1 id="T3-文本压缩"><a href="#T3-文本压缩" class="headerlink" title="T3 文本压缩"></a>T3 文本压缩</h1><blockquote><p>题目大意：给你一个字符串和若干编码方式，输出编码后的最小长度</p></blockquote><p>题目中的编码有个特点，就是无后效性，如abcdefgh前面的abcd如何编码跟后面的编码方法无关。<br>设函数[latex]F(s)[/latex]表示文本s的压缩方式的编码长度，如题目例子：<br>[latex]F(a)=length(“01”)=2[/latex]  </p><hr><p>[latex]F(abc)=length(“0”)=1[/latex]  </p><hr><p>[latex]F(abcd)=4[/latex]  </p><hr><p>[latex]F(bcd)=1[/latex]  </p><hr><p>[latex]F(def)=2[/latex]  </p><hr><p>[latex]F(ef)=2[/latex]  </p><hr><p>设函数[latex]G(s)[/latex]表示文本s的最短编码长度，有<br>[latex]G(a)=2[/latex]  </p><hr><p>[latex]G(ab)=max[/latex]  </p><hr><p>[latex]G(abc)=1[/latex]  </p><hr><p>[latex]G(abcd)=4[/latex]  </p><hr><p>[latex]G(abcde)=max[/latex]  </p><hr><p>max表示不能编码<br>求[latex]G(abcdef)[/latex]时，考虑其最后一个编码可能是def或ef，即abcdef=abc+def或abcd+ef</p><p>转移方程为：<br>[latex]G(s)=min(G(s_{11})+F(s_{12}),G(s_{21})+F(s_{22}),\cdots ,G(s_{n1})+F(s_{n2}))[/latex]</p><p>其中[latex]s=s_{i1}+s_{i2},i\in[1,n][/latex]</p><p>@<a href="https://www.luogu.org/space/show?uid=92125">千柰</a>dalao只开了1维数组，代码也比我的简洁</p><hr><pre><code class="cpp">#include&amp;lt;bits/stdc++.h&amp;gt;using namespace std;string s;string v[502];//好像没什么用，根本不用开数组map&amp;lt;string,int&amp;gt;len;//就是上面的f数组int f[503][503];int get(int l,int r)&#123;    string tmp;    for(int i=l;i&amp;lt;=r;i++)&#123;        tmp+=s[i];    &#125;    if(len[tmp])&#123;return len[tmp];&#125;    else return 0x3f3f3f3f;&#125;int main()&#123;    int t;cin&amp;gt;&amp;gt;t;    while(t--)&#123;        s.clear();len.clear();        memset(f,0x3f,sizeof(f));        int tot=0;        cin&amp;gt;&amp;gt;s;scanf(&amp;quot;\n&amp;quot;);        while(cin.peek()==&amp;#039;(&amp;#039;)&#123;//毒瘤读入，不要学我            cin&amp;gt;&amp;gt;v[++tot];int p=1,cnt=0;            string tmp2;            while(v[tot][p]!=&amp;#039;,&amp;#039;)tmp2+=v[tot][p++];            p++;            while(v[tot][p]!=&amp;#039;)&amp;#039;)&#123;cnt++;v[tot][p++];&#125;            len[tmp2]=cnt;            if(cin.peek()==EOF)break;            scanf(&amp;quot;\n&amp;quot;);        &#125;        for(int i=0;i&amp;lt;s.length();i++)&#123;//先处理出给出了编码的            for(int j=i;j&amp;lt;s.length();j++)&#123;                f[i][j]=get(i,j);            &#125;        &#125;        for(int l=2;l&amp;lt;=s.length();l++)&#123;//区间dp            for(int i=0;i+l-1&amp;lt;s.length();i++)&#123;                int j=i+l-1;                for(int k=i;k&amp;lt;j;k++)&#123;                    f[i][j]=min(f[i][j],f[i][k]+f[k+1][j]);                &#125;            &#125;        &#125;        if(f[0][s.length()-1]==0x3f3f3f3f)printf(&amp;quot;0\n&amp;quot;);        else printf(&amp;quot;%d\n&amp;quot;,f[0][s.length()-1]);    &#125;    return 0;&#125;</code></pre><h1 id="T4-瑞士轮"><a href="#T4-瑞士轮" class="headerlink" title="T4 瑞士轮"></a>T4 瑞士轮</h1><blockquote><p><a href="https://www.luogu.org/problemnew/show/P1309">题目地址</a></p></blockquote><p>dp专题出现排序算法真的是<del>一点也不</del>意外呢，当时还在努力想怎么dp，还好最后打了个暴力，没有被坑惨。<br>先上一个暴力：  </p><pre><code class="cpp">#include&amp;lt;bits/stdc++.h&amp;gt;using namespace std;int n,r,q;struct per&#123;    int s,w,id;&#125;p[200003]; bool cmp(per a,per b)&#123;    if(a.s==b.s)return a.id&amp;lt;b.id;    return a.s&amp;gt;b.s;&#125; int main()&#123;    cin&amp;gt;&amp;gt;n&amp;gt;&amp;gt;r&amp;gt;&amp;gt;q;    for(int i=1;i&amp;lt;=(n&amp;lt;&amp;lt;1);i++)&#123;scanf(&amp;quot;%d&amp;quot;,&amp;amp;p[i].s);p[i].id=i;&#125;    for(int i=1;i&amp;lt;=(n&amp;lt;&amp;lt;1);i++)scanf(&amp;quot;%d&amp;quot;,&amp;amp;p[i].w);    sort(p+1,p+1+(n&amp;lt;&amp;lt;1),cmp);    while(r--)&#123;        for(int i=1;i&amp;lt;=(n&amp;lt;&amp;lt;1);i+=2)&#123;            if(p[i].w&amp;gt;p[i+1].w)p[i].s++;            if(p[i].w&amp;lt;p[i+1].w)p[i+1].s++;        &#125;        sort(p+1,p+1+(n&amp;lt;&amp;lt;1),cmp);    &#125;    cout&amp;lt;&amp;lt;p[q].id;    return 0;&#125;</code></pre><p>STL受害者，用快排时间复杂度极高[latex]O(R(NlogN+N))[/latex]<br>快排的快是针对随机数列来讲的（大部分情况下是这样），而这道题不同，每一轮过后，所有的胜利者的顺序不会变，所有的失败者的顺序也不会变，所以这个时候就要用归并排序了！！</p><p>归并排序和快排的区别（懒得打字了你们自己看图片吧）<br><img src="http://bubbleioa.top/wp-content/uploads/2018/11/mergesort.gif"><br>归并排序<br><img src="http://bubbleioa.top/wp-content/uploads/2018/11/quicksort.gif"><br>快排   </p><p>看出来了吧，大家可以发现，归并排序每次的操作只针对相邻区间，或者说合并时是对相邻几个区间的操作，所以这符合只需要修改相邻几个分数的排布状况的题意。  </p><p>然后就过了……<br>所以以后就算我用插入排序，用冒泡排序，我也不会用快排！！  </p><hr><pre><code class="cpp">#include&amp;lt;bits/stdc++.h&amp;gt;using namespace std;const int MAXN=200003;int n,r,q;int id[MAXN],win[MAXN],lose[MAXN];int s[MAXN],w[MAXN];bool cmp(int a,int b)&#123;    if(s[a]==s[b])return a&amp;lt;b;    return s[a]&amp;gt;s[b];&#125;void Merge()&#123;    int i,j;        i=j=1,id[0]=0;        while(i&amp;lt;=win[0] &amp;amp;&amp;amp; j&amp;lt;=lose[0])          if(cmp(win[i],lose[j]))                id[++id[0]]=win[i++];          else                 id[++id[0]]=lose[j++];        while(i&amp;lt;=win[0])id[++id[0]]=win[i++];        while(j&amp;lt;=lose[0])id[++id[0]]=lose[j++];          &#125;  int main()&#123;    cin&amp;gt;&amp;gt;n&amp;gt;&amp;gt;r&amp;gt;&amp;gt;q;n*=2;    for(int i=1;i&amp;lt;=n;i++)id[i]=i;    for(int i=1;i&amp;lt;=n;i++)scanf(&amp;quot;%d&amp;quot;,&amp;amp;s[i]);    for(int i=1;i&amp;lt;=n;i++)scanf(&amp;quot;%d&amp;quot;,&amp;amp;w[i]);    sort(id+1,id+1+n,cmp);//真香    while(r--)&#123;        win[0]=lose[0]=0;        for(int i=1;i&amp;lt;=n;i+=2)&#123;            if(w[id[i]]&amp;gt;w[id[i+1]])&#123;                s[id[i]]++;                  win[++win[0]]=id[i];                  lose[++lose[0]]=id[i+1];              &#125;            else &#123;                s[id[i+1]]++;                win[++win[0]]=id[i+1];                lose[++lose[0]]=id[i];            &#125;        &#125;        Merge();    &#125;    cout&amp;lt;&amp;lt;id[q];    return 0;&#125;</code></pre><h1 id="T5-传球游戏"><a href="#T5-传球游戏" class="headerlink" title="T5 传球游戏"></a>T5 传球游戏</h1><blockquote><p><a href="https://www.luogu.org/problemnew/show/P1057">题目地址</a></p></blockquote><p>其实这应该算是昨天的题目，在后面来一道水题</p><hr><pre><code class="cpp">#include&amp;lt;bits/stdc++.h&amp;gt;using namespace std;int n,m,f[31][31];int main()&#123;    cin&amp;gt;&amp;gt;n&amp;gt;&amp;gt;m;    memset(f,0,sizeof(f));    f[1][0]=1;    for(int k=1;k&amp;lt;=m;k++)&#123;        f[1][k]=f[2][k-1]+f[n][k-1];        for(int i=2;i&amp;lt;=n;i++)f[i][k]=f[i-1][k-1]+f[i+1][k-1];        f[n][k]=f[n-1][k-1]+f[1][k-1];    &#125;    cout&amp;lt;&amp;lt;f[1][m]&amp;lt;&amp;lt;endl;    return 0;&#125;</code></pre>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>NOIP2018倒计时</title>
    <link href="/2018/10/26/NOIP2018%E5%80%92%E8%AE%A1%E6%97%B6/"/>
    <url>/2018/10/26/NOIP2018%E5%80%92%E8%AE%A1%E6%97%B6/</url>
    
    <content type="html"><![CDATA[<p>最近教练安排得比较紧，没时间更新博客了，最后10多天好好努力吧！不要让自己后悔！</p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=850 height=86 src="//music.163.com/outchain/player?type=2&id=551339691&auto=1&height=66"></iframe><blockquote><p>「同じ世界に、立っていたんだ」と<br>“在同一个世界 站起来了”<br>「同じ未来に、立っているんだ」と<br>“也会站在同一个未来”</p></blockquote><h1 id="距离NOIP2018还剩"><a href="#距离NOIP2018还剩" class="headerlink" title="距离NOIP2018还剩"></a>距离NOIP2018还剩</h1><p>[wpcdt-countdown id=”415”]</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>10.24日考试反思</title>
    <link href="/2018/10/25/10.24%E6%97%A5%E8%80%83%E8%AF%95%E5%8F%8D%E6%80%9D/"/>
    <url>/2018/10/25/10.24%E6%97%A5%E8%80%83%E8%AF%95%E5%8F%8D%E6%80%9D/</url>
    
    <content type="html"><![CDATA[<h2 id="T1：音量调节"><a href="#T1：音量调节" class="headerlink" title="T1：音量调节"></a>T1：音量调节</h2><p>做过的最简单的省选题目，考场上首先想到了用bool数组来实现“<strong>可达性dp</strong>”，然后抽象出一个类似背包问题的模型，然而由于做题量太少（太弱了），没遇到过这种题目，不敢用这种想法，于是就用了一个[latex]f[51][2][/latex]数组骗了个40分。</p><h2 id="T2：旅行"><a href="#T2：旅行" class="headerlink" title="T2：旅行"></a>T2：旅行</h2><p>当时脑子抽了，连骗50分的程序都没想到（曼哈顿距离），结果写了一个随机暴力求期望，本来是想卡在0.9s的时候退出的，结果精度差距较大，玄学WA。</p><h2 id="T3：舞蹈课"><a href="#T3：舞蹈课" class="headerlink" title="T3：舞蹈课"></a>T3：舞蹈课</h2><p>想到了堆，想到了链表，先打了一个暴力，后面标称写挂了。结果本地编译器版本太高，默认是C++17没加<kbd>#include<cstdib&gt;#include<cmath&gt;</kbd> 调用abs没报错，结果暴力也挂了orz。</p><h2 id="T4：幸运数字"><a href="#T4：幸运数字" class="headerlink" title="T4：幸运数字"></a>T4：幸运数字</h2><p>知道是dp，推不出。看到最少要多少个括号就用了广搜，二进制记录状态，80分，T了两个点。后来看题解发现他说的几个优化根本不能用在广搜上，别人的迭代加深dfs又好写又快，%%%%。</p><h2 id="T5：运输"><a href="#T5：运输" class="headerlink" title="T5：运输"></a>T5：运输</h2><p>貌似是题目有问题，如果有多条路径它也没说怎么处理，也没有spj。反正我的做法是<strong>dijkstra</strong>求一遍最短路，dfs一遍求路径，应该是没有问题的……吧。</p><h2 id="T6：最长上升（不降）公共子序列"><a href="#T6：最长上升（不降）公共子序列" class="headerlink" title="T6：最长上升（不降）公共子序列"></a>T6：最长上升（不降）公共子序列</h2><p>这个写挂了真的是我自己的锅，直接写得最长上升公共子序列的程序（后来发现也是错的），结果题目意思是不降…………</p><hr><p>就快NOIP了，要赶快调整好状态，要不然就要退役了</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>【解答发布】周六下午学长的经验分享！！</title>
    <link href="/2018/10/20/%E3%80%90%E8%A7%A3%E7%AD%94%E5%8F%91%E5%B8%83%E3%80%91%E5%91%A8%E5%85%AD%E4%B8%8B%E5%8D%88%E5%AD%A6%E9%95%BF%E7%9A%84%E7%BB%8F%E9%AA%8C%E5%88%86%E4%BA%AB%EF%BC%81%EF%BC%81/"/>
    <url>/2018/10/20/%E3%80%90%E8%A7%A3%E7%AD%94%E5%8F%91%E5%B8%83%E3%80%91%E5%91%A8%E5%85%AD%E4%B8%8B%E5%8D%88%E5%AD%A6%E9%95%BF%E7%9A%84%E7%BB%8F%E9%AA%8C%E5%88%86%E4%BA%AB%EF%BC%81%EF%BC%81/</url>
    
    <content type="html"><![CDATA[<h1 id="Q1-编译器是什么版本"><a href="#Q1-编译器是什么版本" class="headerlink" title="Q1:编译器是什么版本"></a>Q1:编译器是什么版本</h1><blockquote><p>by Chen_Xi</p></blockquote><p>玄学，windows上应该都是MinGW5.x</p><h1 id="Q2-可以提前进机房嘛？"><a href="#Q2-可以提前进机房嘛？" class="headerlink" title="Q2:可以提前进机房嘛？"></a>Q2:可以提前进机房嘛？</h1><blockquote><p>by Chen_Xi</p></blockquote><p>好像是可以提前半个小时进去的。</p><h1 id="Q3-看不懂题目怎么办？"><a href="#Q3-看不懂题目怎么办？" class="headerlink" title="Q3:看不懂题目怎么办？"></a>Q3:看不懂题目怎么办？</h1><blockquote><p>by 匿名</p></blockquote><p>建议学好语文。</p><h1 id="Q4-关于SPFA已死怎么看？"><a href="#Q4-关于SPFA已死怎么看？" class="headerlink" title="Q4:关于SPFA已死怎么看？"></a>Q4:关于SPFA已死怎么看？</h1><blockquote><p>by hzy</p></blockquote><p>用于判断负环还是挺有效的，不过这种题目也挺少的吧。个人最短路径偏爱写Dijkstra，确实挺少会用到SPFA。</p><h1 id="Q5-键盘等设备适应嘛"><a href="#Q5-键盘等设备适应嘛" class="headerlink" title="Q5:键盘等设备适应嘛"></a>Q5:键盘等设备适应嘛</h1><blockquote><p>by XF</p></blockquote><p>用着没什么问题，和机房的应该差不多，适不适应看个人吧。其实也没有什么不适应的，代码没有必要敲很快。</p><h1 id="Q6-考试的场所有多大，会不会有空旷感的说？"><a href="#Q6-考试的场所有多大，会不会有空旷感的说？" class="headerlink" title="Q6:考试的场所有多大，会不会有空旷感的说？"></a>Q6:考试的场所有多大，会不会有空旷感的说？</h1><blockquote><p>by 匿名</p></blockquote><p>不算特别大吧，差不多一个教室那么大，不算很空旷，但是显示屏中间有隔板。</p><h1 id="Q7-电脑上一般会有多少个编译器（IDE），是不是只有Dev-C"><a href="#Q7-电脑上一般会有多少个编译器（IDE），是不是只有Dev-C" class="headerlink" title="Q7:电脑上一般会有多少个编译器（IDE），是不是只有Dev-C++"></a>Q7:电脑上一般会有多少个编译器（IDE），是不是只有Dev-C++</h1><blockquote><p>by yanyu</p></blockquote><p>还有guide。</p><h1 id="Q8-可以带食物吗？（糖之类的"><a href="#Q8-可以带食物吗？（糖之类的" class="headerlink" title="Q8:可以带食物吗？（糖之类的"></a>Q8:可以带食物吗？（糖之类的</h1><blockquote><p>by 匿名</p></blockquote><p>可以。</p><h1 id="Q9-可以带草稿纸，水或饮料吗？"><a href="#Q9-可以带草稿纸，水或饮料吗？" class="headerlink" title="Q9:可以带草稿纸，水或饮料吗？"></a>Q9:可以带草稿纸，水或饮料吗？</h1><blockquote><p>by 匿名</p></blockquote><p>草稿纸不可以，水或饮料可以。</p><h1 id="Q10-考场发慌怎么办？"><a href="#Q10-考场发慌怎么办？" class="headerlink" title="Q10:考场发慌怎么办？"></a>Q10:考场发慌怎么办？</h1><blockquote><p>by 匿名</p></blockquote><p>深呼吸。</p><h1 id="Q11：考前是怎样复习的？"><a href="#Q11：考前是怎样复习的？" class="headerlink" title="Q11：考前是怎样复习的？"></a>Q11：考前是怎样复习的？</h1><blockquote><p>by 匿名</p></blockquote><p>模板，对代码熟练掌握。</p><h1 id="Q12-考场上的隔板会有蛮高吗？"><a href="#Q12-考场上的隔板会有蛮高吗？" class="headerlink" title="Q12:考场上的隔板会有蛮高吗？"></a>Q12:考场上的隔板会有蛮高吗？</h1><blockquote><p>by yanyu</p></blockquote><p>高不高不好说，反正看不到隔壁的代码，也没有必要去看。</p><h1 id="Q13-文件夹里还要建立子文件夹的操作流程"><a href="#Q13-文件夹里还要建立子文件夹的操作流程" class="headerlink" title="Q13:文件夹里还要建立子文件夹的操作流程"></a>Q13:文件夹里还要建立子文件夹的操作流程</h1><blockquote><p>by yanyu</p></blockquote><p>已经建好。</p><h1 id="Q14-考场上会有厕所在哪的提示标签吗"><a href="#Q14-考场上会有厕所在哪的提示标签吗" class="headerlink" title="Q14:考场上会有厕所在哪的提示标签吗"></a>Q14:考场上会有厕所在哪的提示标签吗</h1><blockquote><p>by yanyu</p></blockquote><p>有两个监考老师，如果有人要上厕所的话由一个监考老师带去。不过个人大概是沉浸在代码中，期间没有去过厕所。</p><h1 id="Q15-是否会发很多草稿纸？"><a href="#Q15-是否会发很多草稿纸？" class="headerlink" title="Q15:是否会发很多草稿纸？"></a>Q15:是否会发很多草稿纸？</h1><blockquote><p>by yanyu</p></blockquote><p>不会发很多吧，不过草稿纸也很少用。</p><h1 id="Q16-是插空坐还是连着坐"><a href="#Q16-是插空坐还是连着坐" class="headerlink" title="Q16:是插空坐还是连着坐"></a>Q16:是插空坐还是连着坐</h1><blockquote><p>by Chen_Xi</p></blockquote><p>连着坐，有隔板。</p><h1 id="Q17-如果我考试的时候非常紧张，手抖得厉害，深呼吸不管用，我还能干嘛？"><a href="#Q17-如果我考试的时候非常紧张，手抖得厉害，深呼吸不管用，我还能干嘛？" class="headerlink" title="Q17:如果我考试的时候非常紧张，手抖得厉害，深呼吸不管用，我还能干嘛？"></a>Q17:如果我考试的时候非常紧张，手抖得厉害，深呼吸不管用，我还能干嘛？</h1><blockquote><p>by yanyu</p></blockquote><p>这个还真的不好说，个人没有特别紧张，对自己要有信心吧。个人缓解压力的方法是喝水，不过不建议喝多了，上厕所会浪费时间。</p><h1 id="Q18-考试期间严格来说可以去上厕所吗？"><a href="#Q18-考试期间严格来说可以去上厕所吗？" class="headerlink" title="Q18:考试期间严格来说可以去上厕所吗？"></a>Q18:考试期间严格来说可以去上厕所吗？</h1><blockquote><p> by yanyu</p></blockquote><p>可以的。</p><h1 id="Q19-学长们用过vim吗？都说是编辑器之神，我觉得还不如记事本orz"><a href="#Q19-学长们用过vim吗？都说是编辑器之神，我觉得还不如记事本orz" class="headerlink" title="Q19:学长们用过vim吗？都说是编辑器之神，我觉得还不如记事本orz"></a>Q19:学长们用过<strong>vim</strong>吗？都说是编辑器之神，我觉得还不如记事本orz</h1><blockquote><p>by hzy</p></blockquote><p>没有用过。</p><h1 id="Q20-停课结束后该如何快速跟上文化的学习？"><a href="#Q20-停课结束后该如何快速跟上文化的学习？" class="headerlink" title="Q20:停课结束后该如何快速跟上文化的学习？"></a>Q20:停课结束后该如何快速跟上文化的学习？</h1><blockquote><p>by 匿名</p></blockquote><h1 id="Q21-如果考试忘记了某些英文（比如优先队列的priority-queue），能打开头文件查找吗？"><a href="#Q21-如果考试忘记了某些英文（比如优先队列的priority-queue），能打开头文件查找吗？" class="headerlink" title="Q21:如果考试忘记了某些英文（比如优先队列的priority_queue），能打开头文件查找吗？"></a>Q21:如果考试忘记了某些英文（比如优先队列的<kbd>priority_queue</kbd>），能打开头文件查找吗？</h1><blockquote><p>by hzy</p></blockquote><p>可以。</p><h1 id="Q22-电脑是什么系统的，XP吗？"><a href="#Q22-电脑是什么系统的，XP吗？" class="headerlink" title="Q22:电脑是什么系统的，XP吗？"></a>Q22:电脑是什么系统的，XP吗？</h1><blockquote><p>by Lxp</p></blockquote><p>win7的</p><h1 id="Q23-键盘和学校的键盘有什么不同吗？"><a href="#Q23-键盘和学校的键盘有什么不同吗？" class="headerlink" title="Q23:键盘和学校的键盘有什么不同吗？"></a>Q23:键盘和学校的键盘有什么不同吗？</h1><blockquote><p>by Lxp</p></blockquote><p>很爽。</p><h1 id="Q24-如何调整心态，电脑有保护卡吗？如果有，不小心关机了怎么办呢？"><a href="#Q24-如何调整心态，电脑有保护卡吗？如果有，不小心关机了怎么办呢？" class="headerlink" title="Q24:如何调整心态，电脑有保护卡吗？如果有，不小心关机了怎么办呢？"></a>Q24:如何调整心态，电脑有保护卡吗？如果有，不小心关机了怎么办呢？</h1><blockquote><p>by Lxp</p></blockquote><p>存在网盘里。</p><h1 id="Q25-dev-cpp-可以调试吗？"><a href="#Q25-dev-cpp-可以调试吗？" class="headerlink" title="Q25:dev cpp 可以调试吗？"></a>Q25:dev cpp 可以调试吗？</h1><blockquote><p>by Lxp</p></blockquote><p>不太清楚。个人一直不会用调试，所以都是手动调试的。</p><h1 id="Q26-如果对手把键盘敲得咚咚咚响，给我造成了心理压力怎么办？我可以戴耳塞吗？"><a href="#Q26-如果对手把键盘敲得咚咚咚响，给我造成了心理压力怎么办？我可以戴耳塞吗？" class="headerlink" title="Q26:如果对手把键盘敲得咚咚咚响，给我造成了心理压力怎么办？我可以戴耳塞吗？"></a>Q26:如果对手把键盘敲得咚咚咚响，给我造成了心理压力怎么办？我可以戴耳塞吗？</h1><blockquote><p>by Chen_Xi</p></blockquote><p>如果你这么想就带着吧，能不能用就看监考老师了……</p><h1 id="Q27-考试机子上有python吗？"><a href="#Q27-考试机子上有python吗？" class="headerlink" title="Q27:考试机子上有python吗？"></a>Q27:考试机子上有python吗？</h1><blockquote><p>by hzy</p></blockquote><p>由于是windows，应该没有。</p><h1 id="Q28-考试前能去看考场吗？如果能，是提前多久去？"><a href="#Q28-考试前能去看考场吗？如果能，是提前多久去？" class="headerlink" title="Q28:考试前能去看考场吗？如果能，是提前多久去？"></a>Q28:考试前能去看考场吗？如果能，是提前多久去？</h1><blockquote><p>by hgf</p></blockquote><p>30分钟左右。</p><h1 id="Q29-考试时真的有时间对拍吗？"><a href="#Q29-考试时真的有时间对拍吗？" class="headerlink" title="Q29:考试时真的有时间对拍吗？"></a>Q29:考试时真的有时间对拍吗？</h1><blockquote><p>by hzy</p></blockquote><p>没有很大的必要对拍，他会给大样例用于判断代码的正确性。</p><h1 id="Q30-大佬，考试会用stl吗，比如，优先队列，map，set？"><a href="#Q30-大佬，考试会用stl吗，比如，优先队列，map，set？" class="headerlink" title="Q30:大佬，考试会用stl吗，比如，优先队列，map，set？"></a>Q30:大佬，考试会用stl吗，比如，优先队列，map，set？</h1><blockquote><p>by 匿名</p></blockquote><p>有些STL还是很实用的，在NOIP最好要熟练掌握吧。</p><h1 id="Addition"><a href="#Addition" class="headerlink" title="Addition"></a>Addition</h1><blockquote><p>by dpj</p></blockquote><h2 id="停课期间"><a href="#停课期间" class="headerlink" title="停课期间"></a>停课期间</h2><ol><li>乐老师比较少讲课，尽量靠自己。</li><li>从个人经验来说，那段时间是按算法和数据结构刷题，对于一个算法或者数据结构，可以先找些模板题做，然后再找一些相应的题来提高。</li><li>对于一些题目，可以先考虑暴力怎么写，写出来看下能有多少分，然后再考虑正解，毕竟比赛的时候遇到不会的题也要打暴力骗分，骗分技巧也是要稍微练一下的。</li><li>遇到难题多交流。</li><li>因为我是NOIP回去之后的考试成绩不理想，所以家里就没让我再去省选，所以要去省选的话事先还是和父母沟通好吧。</li><li>注意健康吧……我们当时6个人几乎就是活生生的反例，停课期间很少锻炼，吃饭都懒得去让去吃饭的帮带到机房……</li></ol><h2 id="NOIP流程"><a href="#NOIP流程" class="headerlink" title="NOIP流程"></a>NOIP流程</h2><blockquote><p>(这些只是去年的一些回忆，不一定准确)</p></blockquote><ol><li>电脑操作系统是Win 7，编译器有GUIDE不过网盘上提供DEV-C＋＋的下载。</li><li>带好身份证进入考场后监考老师会给你一个信封，里面装着你的账号和密码。两天是不一样的。</li><li>在桌面上有一个 NOIP.exe (印象里是叫这个名字)的快捷方式，点开来输入账号密码登录。</li><li>登录之后查看我的电脑，会有一个网络位置，里面存了试题  dev-c＋＋的安装包  注意事项的文本文档(仔细阅读)和三个英文文件夹(对应当天的三道题)。Cpp文件存在三个文件夹下(可能有所变动，按注意事项来做就可以了)。三个文件夹中还有大数据的输入输出样例，用于检测代码的正确性，命名方式不记得是否和题目指定的一样，所以调试结束后注意输入输出文件的名称与题目要求保持一致。</li><li>建议代码直接在网盘中编辑，以防电脑出现问题，但是最后文件夹里只能留cpp文件，其他调试生成的文件都删掉(去年监考老师说给的大样例不用删，不过好像删了也没关系，有什么问题的话还是问监考老师吧)。</li></ol><p>另附：<a href="http://bubbleioa.top/noip%E5%BA%94%E8%80%83%E6%8A%80%E5%B7%A7">dpj学长PPT</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>一个新兴的东方同音社团——纽约花残月乐团</title>
    <link href="/2018/10/02/%E4%B8%80%E4%B8%AA%E6%96%B0%E5%85%B4%E7%9A%84%E4%B8%9C%E6%96%B9%E5%90%8C%E9%9F%B3%E7%A4%BE%E5%9B%A2%E2%80%94%E2%80%94%E7%BA%BD%E7%BA%A6%E8%8A%B1%E6%AE%8B%E6%9C%88%E4%B9%90%E5%9B%A2/"/>
    <url>/2018/10/02/%E4%B8%80%E4%B8%AA%E6%96%B0%E5%85%B4%E7%9A%84%E4%B8%9C%E6%96%B9%E5%90%8C%E9%9F%B3%E7%A4%BE%E5%9B%A2%E2%80%94%E2%80%94%E7%BA%BD%E7%BA%A6%E8%8A%B1%E6%AE%8B%E6%9C%88%E4%B9%90%E5%9B%A2/</url>
    
    <content type="html"><![CDATA[<center>繁花分落的四月旧城，都市，樱瓣流舞天际微凉，点点微光照耀着的是北极星的残象幽风起，皎月将落未落此处，即梦开始的地方……这里是纽约花残月乐团一个新兴的东方同音社团愿天籁之音，奏响于此时。各位好，这里是纽约花残月乐团。[latex]NewYork\ HKT\ Studio[/latex]</center><hr><p><img src="http://bubbleioa.top/wp-content/uploads/2018/10/psb.jpg"><br>今年8月份刚刚建立起的一个东方同人音乐社团～<br>在2019年的2月份，我们将会推出第一张专辑。我们正在与<a href="http://weibo.com/u/5971410018">幻梦缘起</a>和<a href="https://weibo.com/u/6411746236">心界巡回</a>合作，因此我们的第一张专辑将包含以上<strong>两个社团的各两首歌曲</strong>。</p><p>同时，我们需要专业性的编曲指导，如果有意请联系主催～（即原po <a href="https://user.qzone.qq.com/1325054302">@SeiKasahara</a>）</p><p>欢迎来我们的社团外群观光，这里各个都是人才，进去就不想出来的那种（雾）</p><p>此次宣传非常感谢我的画师也是我的cp <a href="https://user.qzone.qq.com/2047617745">@⑨色の人形使い</a>  可以关注她的pixiv账号：<a href="https://www.pixiv.net/member_illust.php?id=7155418&type=illust">@グリンー</a></p><p>也同时感谢我团的御用画师柯达君 <a href="http://user.qzone.qq.com/925162293">@Owl</a>  担当了本次CD的bk设计。</p><p>更要感谢为宣传提出意见的作词和吉祥物。<br><a href="http://user.qzone.qq.com/1581634840">@河城不取～かっぱぱりら～</a> <a href="http://user.qzone.qq.com/823631903">@楠</a> <a href="http://user.qzone.qq.com/1250269261">@ Vanellope</a>  </p><p>我们将在10.5广州tho 幻梦缘起摊位上，期待您的到来。（屑主催要女装天子kora）</p><p>微博：<a href="https://weibo.com/nonomuraryotarou?from=myfollow_all&is_all=1">@纽约花残月乐团官微</a><br>外群群号：<a href="https://jq.qq.com/?_wv=1027&k=50SDVc6">260836338</a><br><img src="http://bubbleioa.top/wp-content/uploads/2018/10/psb-1.jpg"><br>[formidable id=”6”]</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>个人dp小结</title>
    <link href="/2018/10/01/%E4%B8%AA%E4%BA%BAdp%E5%B0%8F%E7%BB%93/"/>
    <url>/2018/10/01/%E4%B8%AA%E4%BA%BAdp%E5%B0%8F%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<blockquote><p>前言：最近做了很多动态规划题，但是每次遇到新的题目的时候还是做不出来，于是就像做一个小结，梳理下近些天做的题目，从中获取经验。</p></blockquote><h1 id="第零节：DP的基础概念"><a href="#第零节：DP的基础概念" class="headerlink" title="第零节：DP的基础概念"></a>第零节：DP的基础概念</h1><p>动态规划和其他某些算法具有一定的相似度，都是利用<font color="FF0000"><strong>问题的可划分性</strong></font>以及<font color="FF0000"><strong>子问题的相似性</strong></font>来进行归纳，降低时间复杂度。<br>来说说动态规划的几个基本条件：</p><table><thead><tr><th align="center">条件</th><th align="center">解释</th></tr></thead><tbody><tr><td align="center">无后效性</td><td align="center">已求解的子问题不受后续阶段的影响[latex]^{[1]}[/latex]</td></tr><tr><td align="center">最优子结构</td><td align="center">下一个阶段的最优解应该能够由前面各阶段子问题的最优解导出</td></tr><tr><td align="center">子问题重叠</td><td align="center">动态规划通过对每个子问题只解一次，把解保存在一个需要时就可以查看的表中[latex]^{[2]}[/latex]</td></tr></tbody></table><blockquote><p>[1]：在《算法竞赛进阶指南》中有一个很好的说法，“动态规划对状态空间的遍历构成一张有向无环图，遍历顺序就是该图的一个拓扑序。”<br>[2]：其实就是动态规划会用查询的方式解决重复出现的子问题，而不是像递归那样每次算一遍。</p></blockquote><p>构成动态规划的三要素：</p><table><thead><tr><th align="center">要素</th><th align="center">解释</th></tr></thead><tbody><tr><td align="center">状态</td><td align="center">即我们通常所说的f或dp数组，他们用来表示什么</td></tr><tr><td align="center">阶段</td><td align="center">即各个状态在不同时刻的表示</td></tr><tr><td align="center">决策</td><td align="center">状态如何转移到 下一个状态</td></tr></tbody></table><p>知道了这些并没有什么用，重要的还是在题目中体会。</p><h1 id="第一节：线性DP"><a href="#第一节：线性DP" class="headerlink" title="第一节：线性DP"></a>第一节：线性DP</h1><p>我们在解决一些线性区间上的最优化问题的时候，往往也能够利用到动态规划的思想，这种问题可以叫做线性dp。  </p><ul><li><input checked="" disabled="" type="checkbox"> 线性空间  </li></ul><p>在有关线性dp问题中，有着几个比较经典而基础的模型，例如最长上升子序列(LIS)、最长公共子序列(LCS)、最大子序列和等，那么首先我们从这几个经典的问题出发开始对线性dp的探索。</p><blockquote><p>注：下表引用自《算法竞赛进阶指南》P258表</p></blockquote><hr><p><font size=4><center>LIS问题</center></font></p><table><thead><tr><th align="center"></th><th align="center"></th></tr></thead><tbody><tr><td align="center">问题描述</td><td align="center">最长上升子序列。给定一个长度为[latex]N[/latex]的数列[latex]A[/latex]，求数值单调递增的子序列的长度是多少。[latex]A[/latex]的任意子序列[latex]B[/latex]可表示为[latex]B={A_{k1},A_{k2},…,A_{kp}}[/latex]，其中[latex]k_1&lt;k_2&lt;…&lt;k_p[latex]</td></tr><tr><td align="center">状态表示</td><td align="center">[latex]F[i][/latex]表示以[latex]A[i][/latex]为结尾的“最长上升子序列”的长度</td></tr><tr><td align="center">阶段划分</td><td align="center">子序列的位置（数列[latex]A[/latex]中的位置，从前到后）</td></tr><tr><td align="center">转移方程</td><td align="center">$$F[i]=max{F[j]+1},0\le j&lt; i, A [ j ] &lt; A[i] $$</td></tr><tr><td align="center">边界</td><td align="center">[latex] F[0]=0 [/latex]</td></tr><tr><td align="center">目标</td><td align="center">[latex]max{F[i]},1\le i \le N[/latex]</td></tr></tbody></table><p>还有两个大家自行看书~（打这个太累啦）<br>通过这三个问题，我们可以了解到，线性DP无论是多维还是一维，“线性”都体现在“作用在空间上的递推”————DP的阶段沿着各个维度线性增长，从一个或多个“边界点”开始有方向地向整个状态空间转移、扩展，最后每个状态上都保留了以自身为目标子问题的最优解。<br>下面我们开始线性DP的进阶，我们从例题开始。</p><h3 id="【例1】Mr-Young’s-Picture-Permutations-latex-poj2279-latex"><a href="#【例1】Mr-Young’s-Picture-Permutations-latex-poj2279-latex" class="headerlink" title="【例1】Mr. Young’s Picture Permutations[latex]^{poj2279}[/latex]"></a><a href="https://bubbleioa.github.io/2018/08/26/[SP15637][POJ2279]GNYR04H%20-%20Mr%20Youngs%20Picture%20Permutations/">【例1】Mr. Young’s Picture Permutations[latex]^{poj2279}[/latex]</a></h3><p>这是一个五维的线性DP，从该题给出的解法中我们发现，设计动态规划的状态转移方程，不一定要以“如何计算出一个状态”的形式给出，也可以考虑“<strong>一个已知状态应该更新哪些后续阶段的未知状态</strong>”。</p><h1 id="第二节：背包"><a href="#第二节：背包" class="headerlink" title="第二节：背包"></a>第二节：背包</h1><p>其实我们OIer很多时候都是靠眼睛学习的，偶尔通过听觉也是不错的。  </p><iframe src="//player.bilibili.com/player.html?aid=7752071&cid=12709344&page=1" width=620 height=470 scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe><h2 id="⭐0-1背包"><a href="#⭐0-1背包" class="headerlink" title="⭐0/1背包"></a>⭐0/1背包</h2><h2 id="⭐完全背包"><a href="#⭐完全背包" class="headerlink" title="⭐完全背包"></a>⭐完全背包</h2><h2 id="⭐多重背包"><a href="#⭐多重背包" class="headerlink" title="⭐多重背包"></a>⭐多重背包</h2><h2 id="⭐分组背包"><a href="#⭐分组背包" class="headerlink" title="⭐分组背包"></a>⭐分组背包</h2><h1 id="区间DP"><a href="#区间DP" class="headerlink" title="区间DP"></a>区间DP</h1><h1 id="树形DP"><a href="#树形DP" class="headerlink" title="树形DP"></a>树形DP</h1><h2 id="⭐背包类树形DP"><a href="#⭐背包类树形DP" class="headerlink" title="⭐背包类树形DP"></a>⭐背包类树形DP</h2><p>推荐个视频  </p><iframe src="//player.bilibili.com/player.html?aid=19615811&cid=31986336&page=1" scrolling="no" border="0" frameborder="no" width=620 height=470 framespacing="0" allowfullscreen="true"> </iframe>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>宜春中学团委招新啦！！</title>
    <link href="/2018/10/01/%E5%AE%9C%E6%98%A5%E4%B8%AD%E5%AD%A6%E5%9B%A2%E5%A7%94%E6%8B%9B%E6%96%B0%E5%95%A6%EF%BC%81%EF%BC%81/"/>
    <url>/2018/10/01/%E5%AE%9C%E6%98%A5%E4%B8%AD%E5%AD%A6%E5%9B%A2%E5%A7%94%E6%8B%9B%E6%96%B0%E5%95%A6%EF%BC%81%EF%BC%81/</url>
    
    <content type="html"><![CDATA[<p>在宜中学子中，有这样一群人<br>他们是众多校园活动的策划者，<br>他们协助宜春中学各个社团管理社团事务，<br>他们能带着小牌子穿梭于各项活动，<br>他们常年以学生身份出现于行政楼、科技楼之中<br>他们是谁！<br><font color="FF0000"><strong>——宜春中学团委学生干部</strong></font><br>可爱的新高一学弟学妹们：<br>加入朝气蓬勃的<em>宜春中学团委</em>吧！<br>在这里，你能培养、锻炼管理能力、组织能力、应变能力；<br>在这里，你能得到展现自我，提升自我的机会；<br>在这里，你能感受到组织浓浓的凝聚力；<br>在这里，你能参与组织诗歌朗诵大赛，大型校园义卖，主持人大赛等等精彩的活动；<br>在这里，你能第一时间了解各大活动的第一消息，观看各种精彩活动；<br>在这里，有不定时聚餐，下乡活动等诸多福利<br>在这里，还有高颜值高智商高情商的学长学姐做你们的师父手把手带你成长带你飞！  </p><p>你还在等什么？<br>加入我们，就是最好的选择！  </p><p>让我们一起飞上天，与太阳肩并肩！<br>让我们策马扬鞭，青春年华一起成长！  </p><p>报名安排：<br>8月21、22日下午教学楼旁边摆摊<br>8月23日晚自习初试（具体时间地点另行通知）<br>8月24日晚自习复试（具体时间地点另行通知）  </p><p>另附：<br><img src="https://s1.ax1x.com/2018/07/27/PUkOW6.png" alt="宜春中学团委招新简章">   </p><p><img src="https://s1.ax1x.com/2018/07/27/PU1G1H.md.png"></p><blockquote><p>关注我们<br><img src="https://s1.ax1x.com/2018/07/27/PUkDsg.md.jpg"><br><img src="https://s1.ax1x.com/2018/07/27/PUkrLQ.md.jpg"><br><img src="https://s1.ax1x.com/2018/07/27/PUkBQS.jpg"></p></blockquote><h3 id="Q-amp-A"><a href="#Q-amp-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h3><pre><code>你可以通过QQ，微信，微博，评论等方式向我们提出问题，这里将集中公示大家的疑问，方便查询。</code></pre><p>Q：团委是社团还是什么？<br>A：中国共产主义青年团委员会的简称是团委，是中国共青团的组织之一，是广大青年在实践中学习中国特色社会主义和共产主义的学校，是中国共产党的助手和后备军。  总而言之不是社团是一个组织。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>ISLAND一周目通关感想</title>
    <link href="/2018/10/01/ISLAND%E4%B8%80%E5%91%A8%E7%9B%AE%E9%80%9A%E5%85%B3%E6%84%9F%E6%83%B3/"/>
    <url>/2018/10/01/ISLAND%E4%B8%80%E5%91%A8%E7%9B%AE%E9%80%9A%E5%85%B3%E6%84%9F%E6%83%B3/</url>
    
    <content type="html"><![CDATA[<blockquote><center><font color="FF0000">***可能包含严重剧透***</font></center>本来有很多游戏内部短片可以通过B站外链嵌入这里的，但奈何全被封了  </blockquote><blockquote><p>10.1更新：现在已经解禁，而且游戏已上架stream<br><a href="https://store.steampowered.com/app/857450/ISLAND/">Stream上的ISLAND</a></p></blockquote><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=450 src="//music.163.com/outchain/player?type=1&id=34700141&auto=1&height=430"></iframe><p><img src="https://s1.ax1x.com/2018/07/26/PNkBcD.png"></p><h1 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h1><p>这里要先感谢夜鸮的树洞汉化组带来的汉化，真的是很棒了，ISLAND最近也会上架steam，到时候会补票。<br>本来是在同学的推荐下看了一集ISLAND，一开始我是抵触的，后面发现凛音的人设不错，声优是田村大魔王，于是就打算试试游戏。<br>然后就被震撼到了，不亏是岛学，那种给人带来的沉浸感，是其他galgame难以做到了。  </p><p>接下来会从流程，人物等方面展开讨论ISLAND</p><p>虽说在暑假，但是时间比较少（网上大佬二周目用了80个小时），所以夏莲和纱罗线基本是跳着过的，所以流程的话就会少掉夏莲和纱罗线。</p><p>序言就写这么多，要不然就要变成后记了233</p><h1 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h1><h2 id="序章"><a href="#序章" class="headerlink" title="序章"></a>序章</h2><p>有这样一个传说，传说的主人公叫切那，他爱着一个女性，女性的名字叫凛音，凛音也不为人知的爱着切那，但是他们二人有着永远无法结合的命运，因为他们是兄妹，有一个叫夏莲的女孩子对这二人的关系感到不高兴，因为夏莲也爱上了切那，于是她请求魔女无论怎样也要分离二人，于是魔女向二人下了诅咒，魔女把凛音的脸变成谁也不会爱上的怪物的模样，承受如此痛苦的凛音，自己结束了生命，被留下孤身一人的切那，切那也被放逐了，切那与魔女进行了契约，魔女约定，凛音会在这个世界再次重生，然后，二人结合之时诅咒将会解除。但是需要几十年，甚至几百年，并没有和魔女约定好。切那为了停止自己的时间而在冰中沉眠，为了等待着那一天的到来。<br>浦岛上的人信奉这一个传说，并时不时的用传说中的人名给自己的孩子命名，浦岛上的御三家，御原家，珈蓝堂家，枢都家，就是贯彻这一传统的家庭，时至1999年8月，一名男子被冲上浦岛的沙滩，男子被警察发现后，因为枢都镇长的要求，准备将其遣返本土，这是男子在船上邂逅了镇长的女儿枢都夏莲，在逃跑时在海滩上遇见了御原凛音，而凛音收留了他，并给他取了三千界切那这个名字，这场旅行正式拉开了序幕。  </p><p>然而没那么简单orz</p><h2 id="夏篇"><a href="#夏篇" class="headerlink" title="夏篇"></a>夏篇</h2><blockquote><p>注：Flowchart中，白色描边<font color="878787"><strong>灰点</strong></font>代表一节（可能有分支也可能没有），<font color="000000"><strong>黑色</strong></font>点代表BE，<font color="66ccff">蓝色</font>点代表下一章，<font color="878787"><strong>灰色</strong></font>无描边点代表No retrun,<font color="FF7700"><strong>橙色</strong></font>点代表除了BE的其他结局</p></blockquote><p><img src="https://s1.ax1x.com/2018/07/26/PNksnH.md.png"><br>夏篇才是ISLAND里面最像一个galgame的地方，你有三条路（虽然凛音线是被锁住的），三个<em>女主</em>对你似乎都有好感。<br>它同时也是ISLAND埋伏笔的地方。<br>游戏一开始就将你引入到男主是从未来来的误区，也让玩家以为切那就是凛音5年前遇到的切那。（结果都不是）<br>在夏篇中就已经提到切那是为了拯救人而“回到过去”，做法是“杀死切那”。<br>而要拯救的那个人就是凛音（吗？）<br>但是这样是说不通的，有一个cg是切那脑中闪过的模糊的凛音穿婚纱的样子，对象肯定是切那（切那视角）</p><p><img src="https://s1.ax1x.com/2018/07/26/PNAZvD.md.png"></p><p>总之，打完夏篇，你要在意的是：<br>1.凛音没有患煤纹病。<br>2.凛音说她也是时空旅行者。<br>3.BE未来预想图只是切那的脑补。<br>4.夏莲和纱罗线和主线有着关系，要认真打（虽然我是跳着打的orz）。<br>5.凛音的房间很整洁。<br>6.浦岛太郎和玉手箱。</p><h2 id="夏莲篇"><a href="#夏莲篇" class="headerlink" title="夏莲篇"></a>夏莲篇</h2><p>不过多介绍，但是这里出现了一个之后对主线有着重要作用的人——桃香。</p><h2 id="纱罗篇"><a href="#纱罗篇" class="headerlink" title="纱罗篇"></a>纱罗篇</h2><p>需要在意地方：<br>1.玖音的房间很乱。<br>2.纱罗的母亲万里爱。<br>3.少儿不宜的全年龄向内容（下面是玖音说的）<br><img src="https://s1.ax1x.com/2018/07/26/PNE1eJ.md.jpg"></p><h2 id="凛音篇"><a href="#凛音篇" class="headerlink" title="凛音篇"></a>凛音篇</h2><p>这篇前面在发糖，后面就很难受，概括来讲就是：  </p><p>岛上盛行一种疾病——煤纹病。凛音表面是很害怕自己也得煤纹病，所以一直闭门不出，但真实原因是因为害怕自己和传说中的凛音一样，所以凛音也将setsuna当成了真正的切那，二人相爱了。<br><img src="https://s1.ax1x.com/2018/07/26/PNZcM8.md.png"><br>但是在纱罗的推理下，认为这个世界存在平行世界，他们认为setsuna为了拯救凛音重复了无数次，推理的结果是凛音认为眼前的setsuna杀掉了五年前的切那，于是自己到达了暴龙岛，想要杀掉5年前的凛音。<br><img src="https://s1.ax1x.com/2018/07/26/PNkKhV.png"><br>但是这是不可能的，其实并没有平行宇宙这种事情，setsuna也追随到了暴龙岛，最后二人和解，二人坐着一条船回来的时候，切那因为脱力沉入海中，而凛音为了救他丧命。而后，setsuna登上了冷冻睡眠装置，打算到了造出时间机器的年代，乘坐时间机器拯救凛音。<br><img src="https://s1.ax1x.com/2018/07/26/PNCMss.md.png" alt="冷冻睡眠装置"></p><p>是不是很晕呐233，</p><blockquote><p>重回标题，标题变为never island</p></blockquote><h2 id="冬篇"><a href="#冬篇" class="headerlink" title="冬篇"></a>冬篇</h2><p>冬篇才是这个游戏最最最最最最最最最最最最最最最最最最最最</p><pre><code class="c++">while(1)printf(&amp;quot;最&amp;quot;);</code></pre><p>厉害的地方，本在是为了凛音而来，却喜欢上了Rinne（这里指的是我）</p><blockquote><p>下面为了输入方便，会把片假名直接打成英文字母，如リンネ=Rinne</p></blockquote><p>概括来讲就是：<br>20000年后，切那再次醒来发现自己身处雪原，有一个年幼的女孩救了昏迷的自己，模糊的样子让人容易想起谁。<br><img src="https://s1.ax1x.com/2018/07/26/PNmChn.md.png"><br>女孩的名字叫Rinne（Rinne，这里用的是片假名，夏篇的那个凛音用的是平假名），他们生活在一个叫IslandEurasia的避难所，生活的很艰难，Rinne很不会整理东西，不但自己房间很乱，还把之前哥哥的房间当成杂货间，setsuna在这里找到了工作，拿到了Rinne哥哥的名环，作为setsunaOhara在这个避难所生活。</p><p>但是因为有很多孩子没有名环，所以有暗势力组织暴动，KarenKruz就是他们的老大。setsuna作为反叛军和教会的纽带，也想让教会理解没有名环的孩子的痛苦，但因为这样，想要让大家和平生活的SarahGarland被当做魔女烧死了，<br><img src="https://s1.ax1x.com/2018/07/26/PNir8O.md.png"></p><p>KarenKruz也因为被太阳照射而病发煤纹病，去医院的时候带上了Rinne的名环<br><img src="https://s1.ax1x.com/2018/07/26/PNiNr9.md.png"><br>最后只剩下setsuna和Rinne两个人在山洞中过活，可好景不长，食物越来越少，两人渐渐撑不下去了，有一天setsuna到island外的雪地里发现了冷冻睡眠装置，那是自己乘坐的那一个。</p><p>“重要的东西原来近在咫尺啊”setsuna意识到自己真正要拯救的人是眼前的Rinne，他很坚定的告诉Rinne自己一定要回到他们相遇的时候，杀死自己，来拯救Rinne，Rinne最后只能妥协，setsuna把自己的名环当做戒指交给了Rinne，但是Rinne却把时间设定在了1999年——切那的时代。</p><h2 id="真夏篇"><a href="#真夏篇" class="headerlink" title="真夏篇"></a>真夏篇</h2><p>真夏篇揭露了煤纹病其实是伴X显性遗传病，分急性和非急性。<br>setsuna再次在浦岛醒来，他明白了自己究竟该拯救谁，就像开挂一样的快速培养自己与身边的人的关系，完成了在夏篇中没能够做到的很多事。</p><h3 id="关于凛音END"><a href="#关于凛音END" class="headerlink" title="关于凛音END"></a>关于凛音END</h3><p>他对玖音表达了自己想让凛音幸福，玖音幸福地答应了,想要让setsuna给凛音幸福<br><img src="https://s1.ax1x.com/2018/07/26/PNCnzQ.md.png"><br>setsuna和凛音的关系发展得很顺利，大家都在为他们祝福，就在这样一个环境下，setsuna与凛音步入了婚姻的殿堂<br><img src="https://s1.ax1x.com/2018/07/26/PNAmKe.md.png"></p><h3 id="关于re：END"><a href="#关于re：END" class="headerlink" title="关于re：END"></a>关于re：END</h3><p>他对玖音表达了自己想让Rinne幸福，但是，自己却将玖音惹火了，玖音质问他，当自己生下凛音的时候他在哪里，自己和凛音这么多年来是怎么熬过来的，setsuna完全不知道，就这样，玖音跑走了。<br><img src="https://s1.ax1x.com/2018/07/26/PNCeJS.md.png"><br>setsuna在小镇上遇到了纱罗的母亲万里爱，她把setsuna来岛上的一切都告诉了他:  </p><p>在浦岛上有御三家，御原家，枢都家，伽蓝堂家。在御原家有一个没有名字，不知道出身的女孩子，大家都叫她「小空」，同时御原家也有一个小婴儿——凛音，凛音实际上是小空的亲生女儿，但是却寄养在御原家中，御原家的女主人御原玖音对凛音和小空太过亲近，而感到非常不高兴，不久就开始了对她们的虐待，随后在1988年的夏天，凛音在海边的断崖上坠落，三天后漂流到了附近的海滨，而在一个月后，御原玖音的遗体在本土的港口被发现了，后来小空被迫只得冒充御原玖音生活。而凛音被发现时，有一个男孩子在海滩上救了她，男孩是御原切那，御原家的长子，之后凛音就和切那成了好友，切那自己一个人住在海滨的小屋里，和凛音一起抓虫子，辅导数学题目，直到1993年，凛音想要给切那过生日的时候，脚滑坠海，切那去救了她，并带凛音到了海边的小屋中，二人发生了关系，但在天亮时被父亲御原典正发现了，切那遭受了典正的一顿暴打，被扔进了海里，而后凛音被阳光下身患煤纹病的御原典正吓到了，听到了切那的呼救，跑去救切那，二人失去平衡坠入海中，一起漂流到了暴龙岛，在岛上切那为她寻找到了逃生的船，其实就是冷冻睡眠装置，于是凛音在其中被冷冻了5年，直到1998年6月才漂回浦岛，而报纸对外界宣称遭受神隐的少女回归了，2个月之后，setsuna便到了这座岛上。</p><p>似乎明白了什么的他进入玖音的房间，打算好好谈谈。<br>门没锁，玖音就这样躺在地上睡着了，<br><img src="https://s1.ax1x.com/2018/07/26/PNuYYd.md.png"></p><p>“这是追逐梦想的人的房间”setsuna知道，玖音实际上就是Rinne，setsuna坐上去的不是时空机器，而是，冷冻睡眠装置，Rinne知道了这一点，也坐上了根据蓝图开发的冷冻装置。<br>他和Rinne所在的那个避难所，实际上是20000年前的时间，他做出了决定，打算和她一起完成他们二人的梦想，切那决定再次坐上冷冻装置，他要再次前往neverisland拯救真正应该拯救的少女。</p><h2 id="真冬篇（序章）"><a href="#真冬篇（序章）" class="headerlink" title="真冬篇（序章）"></a>真冬篇（序章）</h2><pre><code>FW欠我一个真冬篇！！</code></pre><p>“Rin、ne——”嘴里自然地发出了声音,<br>那刻在记忆深处的话语,<br>到现在还没能拯救的，<br><strong>最后</strong>的少女的名字<br><font size=10>“Rin、ne！！！！”</font><br>————就在那时。<br>沙沙地踏雪的声音。<br>“……谁？……”<br>抬起头。<br>映入眼帘的是，担心地看着我的那张脸。<br><img src="https://s1.ax1x.com/2018/07/26/PNFRlF.md.png"><br>那张脸令人十分怀念。<br>让人不禁落泪一般地惹人怜爱，<br>“为什么……”<br>啊，你是……<br>“为什么你知道我的名字？”<br>你,是——……</p><h1 id="人物"><a href="#人物" class="headerlink" title="人物"></a>人物</h1><p>上面的内容是不是看得云里雾里？那就对了！要想真正体验ISLAND还是要自己去玩一下啊。</p><h2 id="御原-凛音-（おはら-りんね）"><a href="#御原-凛音-（おはら-りんね）" class="headerlink" title="御原 凛音 （おはら りんね）"></a>御原 凛音 （おはら りんね）</h2><p>看上去是女主，然而确实女主的女儿2333<br>当初就是为了凛音的人设才开始游戏的，结果冬篇最后喜欢上了Rinne。<br>凛音一直喜欢说「因为――我也是个时间旅行者啊」,一开始以为只是为了附和setsuna，结果从某种意义上来说还真的是。<br>这个孩子也受够了苦，从小受虐待，喜欢的人死了，记忆也是缺失的。<br>setsuna出现后，与他玩上了过家家的游戏，setsuna不是那个御原切那，这一点凛音比谁都清楚。<br>一开始分不清Rinne和凛音，冬篇后才发现这完全是两个人，从房间和性格各个方面都可以感受得到。</p><h2 id="伽蓝堂-纱罗-（がらんどう-さら）"><a href="#伽蓝堂-纱罗-（がらんどう-さら）" class="headerlink" title="伽蓝堂 纱罗 （がらんどう さら）"></a>伽蓝堂 纱罗 （がらんどう さら）</h2><p>原以为是全作的智商担当，结果是胡乱瞎猜素质巫女。<br>动不动就要杀了setsuna<br>凛音篇的时候更是助攻送了凛音一程<br>难受QAQ  </p><p>不过冬篇里的Sarah还是很不错的。</p><h2 id="枢都-夏莲-（くるつけ-かれん）"><a href="#枢都-夏莲-（くるつけ-かれん）" class="headerlink" title="枢都 夏莲 （くるつけ かれん）"></a>枢都 夏莲 （くるつけ かれん）</h2><p>可以从夏莲身上看到自己的影子，努力地想要出岛，与父亲作对，因该是本作中最正常的女生了吧（虽然在冬篇里是靠那啥吃饭的）</p><h2 id="三千界-刹那-（さんぜんかい-せつな）"><a href="#三千界-刹那-（さんぜんかい-せつな）" class="headerlink" title="三千界 刹那 （さんぜんかい せつな）"></a>三千界 刹那 （さんぜんかい せつな）</h2><p>我至今都没弄懂setsuna到底是哪里来的……<br>13岁到37岁通吃，正好是冬篇Rinne的岁数和真夏篇玖音的岁数。<br>单曲大小（&lt;=8cm）  </p><h2 id="RinneOhara-（リンネオハラ）-御原-玖音"><a href="#RinneOhara-（リンネオハラ）-御原-玖音" class="headerlink" title="RinneOhara （リンネオハラ）/ 御原 玖音"></a>RinneOhara （リンネオハラ）/ 御原 玖音</h2><p>什么都不说，先唱岛歌</p><p>ランランララン～♪アイランジャ～♪戦え爱を守るため～♪今だ！合体だ！セツナ！リンネ！</p><p>本作的灵魂，充满活力的少女<br>特别喜欢Rinne说过的一句话：“一直呆在一起的话，就会慢慢喜欢上的吧” QAQ 我现在后悔死了</p><p>这里留白就好，要不然会写到明天。</p><h1 id="BGM"><a href="#BGM" class="headerlink" title="BGM"></a>BGM</h1><p>一开始觉得不是很好听，有一首还挺像《桑坦路奇亚》。<br>直到打完后，重新听OST，才发现这是天籁😭<br>最顶上的网易云音乐外链就是整个OST<br>推荐第2、20、35、38首</p><h1 id="乱七八糟想说的"><a href="#乱七八糟想说的" class="headerlink" title="乱七八糟想说的"></a>乱七八糟想说的</h1><p>要说我打通的galgame，ISLAND是第一部，打完的那一天，停在标题画面久久无法释怀。<br>完全被作者牵着鼻子走了，夏篇的时候只想着凛音却把很多伏笔漏了。<br>凛音篇的时候总以为自己就是那个切那，能让凛音幸福，结果还是假面。<br>冬篇的时候总想着回去救凛音，甚至对和Rinne在一起的日常感到厌烦，结果到了最后才发现自己想拯救的是Rinne而不是凛音😭<br>一直都是这样，整个游戏下来我一直都很难受。<br>这个游戏玩下来不但烧脑，虐心，伤眼睛，还疯狂打脸，但即便如此，我仍然觉得这是个好游戏，欠我真冬篇啦！烂人杰！<br>哦 对，这里有一篇超厉害的<a href="https://tieba.baidu.com/p/5272565737">伏笔回收</a><br>还有这个标签什么鬼啊，性和犯罪，难道只要擦到了边算吗？<br>还是说本来可以不加，官方为了销量故意加的？<br><img src="https://s1.ax1x.com/2018/07/26/PNyAvq.png"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>2018NOI导刊被虐记</title>
    <link href="/2018/10/01/2018NOI%E5%AF%BC%E5%88%8A%E8%A2%AB%E8%99%90%E8%AE%B0/"/>
    <url>/2018/10/01/2018NOI%E5%AF%BC%E5%88%8A%E8%A2%AB%E8%99%90%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h1><p>结束以来已经过了很久了，终于有时间填坑，写这篇博客的目的就是想要保存这份回忆，无论今后怎么也好，当下才是最重要的。</p><h1 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h1><h2 id="Day0"><a href="#Day0" class="headerlink" title="Day0"></a>Day0</h2><p>好像我是比较晚和大家在火车站集合的，为了一个舒适的路程，特意买的是高铁票（为此还放弃了直达票）<br>路程大概是宜春-&gt;杭州-&gt;常州-&gt;嘉兴-&gt;宜春<br>正好宜春这边有暴雨，赶紧逃！<br>高铁上还是比较舒适的，有电有网有吃，十几个人把电脑打开，俨然一个高档网吧（误）  </p><center><img src="https://s1.ax1x.com/2018/07/26/PtjSnf.md.jpg" width="100%" height="100%" /></center>然而只有到杭州的那段路是这样的，后面就十分无聊了（杭州的火车站是真的大）  <p>在杭州站捐了50元给一个关爱听障组织，一个同学还笑我，受不了。不过也确实如他所说，万一是骗子怎么办？要是我没有看过《声之形》的话我还会不会给他捐钱呢？说实话我也不清楚。</p><p>杭州-&gt;常州的那段遇到了一位日本女士，带着一对小孩（兄妹），为什么这两个小孩会这么乖啊！上车的时候被堵在车厢走廊，别的小孩都在闹，但那对兄妹也没有吵（也许是身在国外？这对小孩只会日语，但母亲会中文）</p><p>到了之后已经很晚了，于是老师带我们去吃饭，好甜，我指的是菜。。。  </p><p>这7天住酒店，两个人一间房，但是因为我们这边男生个数是奇数，所以我就和另一个参加培训的常州本地学生一间房，嘛，感觉还是可以的，他也一直在玩手机，对话完了之后两个人都在做自己的事。<br>也幸亏我和他住一间房，才知道培训的地方临时换了，通知了我们学校的人。（常州高级中学-&gt;常州外国语学校，据说前者被举报暑假补课）<br>总之远了多，每天坐大巴一个小时好难受。  </p><h2 id="Day1"><a href="#Day1" class="headerlink" title="Day1"></a>Day1</h2><p>早上到了常州外国语学校（私立）就觉得这学校不一般，特别气派<br><img src="https://s1.ax1x.com/2018/07/26/PtXiS1.md.jpg"><br>就连机房里都装了Ubuntu（NOILinux）</p><p>正式开始上课！！<br>上午曹文老师讲课，年纪比较大，讲了些基本算法（枚举，模拟，递推和递归），第一次发现原来基本算法也不简单。<br>中午在学校食堂吃饭，不得不说15元一餐就是不一样，三荤一素有水果有汤，菜多的吃不完。<br>下午的老师是堵君懿，NOI金牌（之后给我们授课的老师基本都是这种“怪物”），完全跟不上节奏，大概也是讲了些基本算法，还有点数学内容。</p><p>在和旁边同学闲聊的时候了解到他们基本是从初中开始学的，还有很多从小学开始学的，如果就按学习oi的时间来讲，我们可能他们所有人的学弟学妹吧。</p><p>还有就是在提高组的学生里面有挺多学习态度不端正的（尤其是我旁边的），交了这么多钱，结果就是下课打游戏，上课讲话，摸鱼，睡觉的态度。</p><p>晚自习后回酒店，第一次用浴缸洗澡，有点不习惯，洗完衣服就睡了，第一天实在是太累了。</p><h2 id="Day2"><a href="#Day2" class="headerlink" title="Day2"></a>Day2</h2><p>第二天一整天都是蔡昊源老师讲课，讲着讲着看我们觉得太难了就开始讲语文，如果觉得这两个都很难的怎么办😂。</p><p>一整天讲的都是动态规划，主要是优化，什么前缀和，矩阵乘法，四边形不等式，斜率优化，单调队列，凸包（有些是day7才讲的）  </p><p>主要是晚上的考试，差点爆零，结果有两道是codeforces上的……其实我觉得这7天3次考试题目基本和讲的内容没关系。</p><p>最后一次用浴缸洗，之后就没有这么享受了。</p><h2 id="Day3"><a href="#Day3" class="headerlink" title="Day3"></a>Day3</h2><p>第三天讲课老师的名字忘了，总之也很厉害，一天的搜索，特别精彩。</p><p>上午是深搜和广搜，然后拓展了一下迭代加深深搜和双向广搜，然后讲了下剪枝。</p><p>下午的随机化搜索令人影响深刻，由爬山推广到模拟退火，玄的不能再玄的算法，在某些时候还真的很管用。</p><p>晚上给我们重新讲了些前些天的内容，各种数学知识orz，在这些人面前自己真的就是⑨。</p><h2 id="Day4"><a href="#Day4" class="headerlink" title="Day4"></a>Day4</h2><p>第四天和第五天由毕克——毕大爷（codeforces红名）给我们讲课，说实话还是挺喜欢的，就是身上很臭。这一天就是讲数据结构。</p><p>上午讲了堆，并查集，字符串hash（这东西贼神奇）。<br>讲字符串hash的时候讲了好久关于hack的内容，明明我们NOI和NOIP用不到，但是听着很有趣。</p><p>下午讲树状数组，差分，线段树。</p><p>晚上考试很难过，有一个要求组合数的题目，结果要用一个我听都没听过的方法——逆元，还要用到<em>费马小定理</em>，我太弱了orz</p><h2 id="Day5"><a href="#Day5" class="headerlink" title="Day5"></a>Day5</h2><p>上午对昨天的考试做了讲评，讲了逆元，以及 $ 方差=平方的平均数-平均数的平方 $</p><p>然后就是乱七八糟的听不懂的东西，什么积性函数，欧拉函数，莫比乌斯函数。</p><p>下午讲了概率与期望，又是一些乱七八糟颠覆尝试的东西。<br>比如说：<em><strong>如果一个房间里有23个或23个以上的人，那么至少有两个人的生日相同的概率要大于50%。</strong></em></p><h2 id="Day6"><a href="#Day6" class="headerlink" title="Day6"></a>Day6</h2><p>后面两天都是李煜东讲课，（毕克说BZOJ网址lydsy是李煜东刷牙的意思233）</p><p>他是《算法竞赛进阶指南》的作者，可以看得出他写这本书特别用心，而且也确实很优秀，推荐！<br><a href="http://www.lydshy.com/">他的个人网站</a></p><p>这一天讲的是图论，树的直径，树的中心，图的直径，树网的核……总之还有一大堆神奇算法。  </p><p>晚上考试第二题太暴力了!拉出去续一秒！</p><h2 id="Day7"><a href="#Day7" class="headerlink" title="Day7"></a>Day7</h2><p>这一天详细地讲了下动态规划的各种方法，讲了下昨天考试的题目。<br>下午发了点奖品，我这种蒟蒻当然是没有的，不过我有些同学还是拿到了的李煜东的亲笔签名书<img src="https://s1.ax1x.com/2018/07/26/PtzSnx.md.jpg"><br>晚上没有晚自习，老师带我们去川菜馆吃，然而也不是很辣。<br>因为那个本地人今晚回家，为了省钱我就和另外两个同学一起住，打了一下cs1.6（真的是打了“一下”）</p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>感觉这次培训收获到最多的东西就是<strong>很多新名词</strong>（雾）<br>一开始还是挺兴奋的，但后面还是在三点一线的日常。从每个Day的长度就能看出来。<br>很感谢一路走来有同学们和老师的陪伴，如果没有他们，这场培训我估计会撑不住。<br>这次培训之后感觉自己还是有很多不懂，无论是没学过的，还是已经学过的，听这些大佬讲课，总有新的收获，但是这7天课程安排太紧，想要消化是不可能的，所以回来过后还是要多练。</p><p>NOIP2018加油！</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>六度空间</title>
    <link href="/2018/09/30/%E5%85%AD%E5%BA%A6%E7%A9%BA%E9%97%B4/"/>
    <url>/2018/09/30/%E5%85%AD%E5%BA%A6%E7%A9%BA%E9%97%B4/</url>
    
    <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>“六度空间”理论又称作“六度分隔（Six Degrees of Separation）”理论。这个理论可以通俗地阐述为：“你和任何一个陌生人之间所间隔的人不会超过六个，也就是说，最多通过五个人你就能够认识任何一个陌生人。”如下图所示。<br><img src="https://s1.ax1x.com/2018/06/11/CLrnfS.jpg"><br>六度空间”理论虽然得到广泛的认同，并且正在得到越来越多的应用。但是数十年来，试图验证这个理论始终是许多社会学家努力追求的目标。然而由于历史的原因，这样的研究具有太大的局限性和困难。随着当代人的联络主要依赖于电话、短信、微信以及因特网上即时通信等工具，能够体现社交网络关系的一手数据已经逐渐使得“六度空间”理论的验证成为可能。</p><p>假如给你一个社交网络图，请你对每个节点计算符合“六度空间”理论的结点占结点总数的百分比。</p><h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>输入第1行给出两个正整数，分别表示社交网络图的结点数N（1&lt;N≤10000，表示人数）、边数M（≤33×N，表示社交关系数）。随后的M行对应M条边，每行给出一对正整数，分别是该条边直接连通的两个结点的编号（节点从1到N编号）。</p><h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>对每个结点输出与该结点距离不超过6的结点数占结点总数的百分比，精确到小数点后2位。每个结节点输出一行，格式为“结点编号:（空格）百分比%”。</p><h2 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例"></a>输入样例</h2><pre><code>10 91 22 33 44 55 66 77 88 99 10</code></pre><h2 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例"></a>输出样例</h2><pre><code>1: 70.00%2: 80.00%3: 90.00%4: 100.00%5: 100.00%6: 100.00%7: 100.00%8: 90.00%9: 80.00%10: 70.00%</code></pre><h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><p>简单的一道图的遍历题，这里我用的是bfs（感觉这道题用bfs更简单），超过6次就跳出，这里有一个重点就是如何在队列里判断一轮结束，具体看代码。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre><code class="cpp">#include&amp;lt;iostream&amp;gt;#include&amp;lt;cstdio&amp;gt;#include&amp;lt;cstring&amp;gt;using namespace std;#define MAXN 10001bool a[MAXN][MAXN];//这里可以扣一点开个boolbool visited[MAXN];//用来标记访问过的点，注意重置int n,m;int bfs(int v)&#123;    int que[MAXN];    int head=1,tail=1;    int step=1,last=v;//last存放上一个点访问的最后一个点    int tmp;    int count;    visited[v]=1;    count=1;    que[tail++]=v;    while(head&amp;lt;tail)&#123;        int out=que[head++];//出队元素        for(int i=1;i&amp;lt;=n;i++)&#123;            if(visited[i])continue;            if(a[out][i])&#123;                visited[i]=1;                que[tail++]=i;                count++;                tmp=i;//不断更新，最后访问的点被tmp存到            &#125;        &#125;        if(out==last)&#123;//如果出队元素等于上个点最后访问的点            step++;//说明这一轮结束，step++，last更新为tmp            last=tmp;        &#125;        if(step==7)break;    &#125;    return count;&#125;int main()&#123;    scanf(&amp;quot;%d%d&amp;quot;,&amp;amp;n,&amp;amp;m);    for(int i=1;i&amp;lt;=m;i++)&#123;        int x,y;        scanf(&amp;quot;%d%d&amp;quot;,&amp;amp;x,&amp;amp;y);        a[x][y]=a[y][x]=1;//无向图    &#125;    for(int i=1;i&amp;lt;=n;i++)&#123;//从每个点开始        memset(visited,0,sizeof(visited));//每次要重置visited        double ratio;        ratio=bfs(i)*1.0/n*100;        printf(&amp;quot;%d: %.2f%%\n&amp;quot;,i,ratio);//用%%转义字符输出%    &#125;    return 0;&#125;</code></pre>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>世界，您好！</title>
    <link href="/2018/09/30/%E4%B8%96%E7%95%8C%EF%BC%8C%E6%82%A8%E5%A5%BD%EF%BC%81/"/>
    <url>/2018/09/30/%E4%B8%96%E7%95%8C%EF%BC%8C%E6%82%A8%E5%A5%BD%EF%BC%81/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
